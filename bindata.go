package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _pr_review_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x1a\xd9\x72\xe3\xc6\xf1\x5d\x5f\x31\xf2\x56\x99\xe4\x2e\x17\x5c\xf9\x51\x8c\x62\xa7\xd6\x71\x55\x8e\x3d\xca\xb2\x2b\x0f\x34\x43\x41\xc0\x50\x84\x45\x62\x18\x0c\x20\x46\x59\xf3\xdf\xd3\x3d\xf7\x05\x8a\x5a\xad\x2b\x76\x6c\x3c\x88\xe4\x4c\xdf\xd3\xd7\x34\xb4\xec\xea\xa2\xad\x58\x4d\xd6\xc5\x90\xb7\xcd\x88\x7c\x38\x21\xa4\xa1\x6d\xd7\xd4\x04\x7e\x93\xcf\x3f\xc7\x8f\xac\x65\x7f\x67\x3b\xda\xbc\xce\x39\x25\x5f\x86\x2b\xc3\x11\x39\xc7\xb5\xe9\xc9\xfe\xe4\xc4\x10\xbc\xa1\xed\xb7\xf4\xae\xa2\x00\xc4\xbf\x61\xcd\x37\xd5\x9a\x0e\x97\xf0\x87\x8f\xc9\xb6\x5b\xaf\xbf\xa5\xff\xea\x28\x6f\xbf\xe7\xb4\x81\x85\x86\x2e\x69\xd3\xd0\xd2\x60\x48\x41\xee\xf2\x06\x84\x91\x4b\x48\x80\x93\x0b\xf2\x61\x3f\x55\x3b\x48\xcd\x20\xa8\x1d\xd8\x5a\x64\x34\x2f\x56\xc3\x98\xe6\x98\x18\xe1\xb4\x24\x9a\xb8\x64\x67\x70\xd5\xae\x0f\xae\x61\x88\xcf\x78\x86\xbf\xe6\xc0\x3e\xb5\xfa\xd3\x4f\x64\x36\x9f\xf6\xa3\x65\xdb\x8e\xaf\x86\x46\x0a\x09\xb9\x17\x9f\xf8\xf7\xe4\x38\x89\x5c\x33\xa1\x21\x62\xd5\x05\xb7\x0c\xff\xd4\xf9\xc6\x97\xab\x5a\x12\x23\x00\xcf\x00\xe0\xa6\x5d\x91\x3f\x92\x57\x56\x5d\x25\x42\x93\xb2\x63\x68\x40\x7c\xbc\x13\x9b\xe9\x5f\x68\xa2\xbe\x1d\xcf\x4c\xbd\x04\x92\xc6\xd2\xe6\x82\x4f\x42\xd7\xe0\x9e\x5a\x0e\x34\xca\x36\x6f\x5b\x0a\x9e\x7c\x01\x3a\x2c\xab\xba\x1c\x16\xac\x5e\x56\x37\x99\x5a\x8f\x0c\xfa\x1a\xb6\x5d\x4d\x1c\x1a\x5c\x9d\x30\x82\x68\xfc\xa9\x07\xd8\x81\x2b\xa3\x75\x3d\x48\x63\x34\x71\x98\x16\x78\x93\xb7\xc5\xca\xca\xa5\x99\x64\x7c\xbb\xae\xda\xe1\x60\x3c\x18\xb9\xb2\xa9\x6d\x57\x34\x42\x26\x13\xd0\x86\x33\x38\xd7\x35\xbb\xd1\x20\x63\xe2\x9d\xf4\x68\xea\x20\xa8\xb0\x16\xac\xd1\xb4\xef\xf3\x76\xf5\x30\x9e\xf2\x43\xcd\x93\x68\x9f\x22\x4b\x26\x43\x90\x14\x79\xdd\x92\x6b\x4a\xda\x15\x25\x1c\x90\x49\xce\xc5\x77\x0c\x73\x60\x2a\xe2\x9c\x70\x5a\x97\xb4\x31\x84\xd0\xeb\xa4\x0d\x20\xc3\x0c\x8d\xe9\x32\x30\x06\xfd\xf7\xbb\xe5\x30\x48\x11\x23\x72\x71\x71\x41\x5e\x9e\xa1\xa7\x58\x60\xe3\xac\x67\x23\xdf\x34\x4a\xd3\x45\xb6\xab\xda\x15\xeb\x5a\xcb\x20\x4a\x3e\x23\xc7\xe5\x1d\xa5\x4f\x22\xe5\x51\xe2\xd3\xc4\x41\x48\x5e\xc6\x19\x35\xb8\x1b\x8f\x56\x0e\x85\x9f\x39\xb1\x14\xca\x63\x18\xba\x51\xfd\x9a\x75\x60\xe3\x0b\x12\xe2\xcb\x75\x30\xca\x99\x87\x96\xaf\x1b\x9a\x97\xf7\xf2\xa8\xaa\xfa\x46\xc8\x50\xd5\x80\xca\xa9\x70\xa9\x61\x14\x6b\x7c\x6c\x96\x16\xd9\x2d\xbd\xe7\x43\x2f\x0a\x47\x6a\xd7\xb7\x47\xc8\x27\x99\x3e\x94\xc3\xb3\xc6\x24\x3f\xad\x8d\xaf\xc5\xcb\x48\x6c\x45\x6e\xea\x7b\x4d\x44\x28\xe0\x26\xf9\xd5\xac\xf5\xd5\x2f\xab\x25\x24\x45\x5a\x17\xd4\xcd\x64\x21\x4b\x2f\x60\xd0\xc3\x87\x48\xac\x02\x0a\xaf\xa6\xf0\xf1\x87\x84\x1e\xe0\xc0\x2e\x33\xd7\x9f\x48\xf5\xe2\x85\x2f\x9a\x3a\xd6\xbc\x2e\xd9\xc6\x44\xd2\x85\x4f\x00\x73\x00\x48\xf9\x06\xc2\x33\x5b\xae\x19\x6b\xe4\x57\x89\x04\xc5\xf6\x79\x8a\x1f\xe4\x8b\xb3\xd1\xec\xd5\x7c\xea\x31\x8b\x2c\x2a\x53\xa8\xc7\xde\x53\x79\x1f\x85\x80\xef\xca\x21\xc1\xc8\xef\x53\x36\x6b\x42\x7b\xa5\xea\x4d\x64\xac\xa4\xa1\xa0\x4d\xb1\xc8\x0f\x1b\x2a\x64\xa4\xad\x34\xea\x2d\x36\x1e\xc3\x44\xcd\x0a\xf6\x0f\x57\x2e\x1f\x58\x1a\x3f\x9d\x67\xf7\x6e\x58\xe9\x28\x67\xbb\xda\xaf\xac\x68\x12\xb1\x28\x2d\xe1\xc3\xf5\x49\x21\x76\x63\x4d\xd4\xf2\x41\x05\x24\xcc\x61\xb9\xf5\xdf\xfd\x18\x92\x7e\xc5\x65\x82\x50\x09\xd8\xa3\x16\xb5\x87\xb8\x7a\xb9\xca\xdf\xe4\x5b\xd9\xde\xd8\x9e\x6f\x69\x76\x4c\xc3\x77\x4c\x1f\x64\xd1\xc2\x7e\x47\x56\xe4\x8c\xaf\x72\xdd\x5a\x19\x19\x2d\x92\x2f\xa0\x93\x97\xdf\x6d\x69\x4d\xcb\x21\xbd\xa3\x75\xfb\x75\xde\xe6\x56\xd0\x20\x79\xcb\x63\x31\x70\x19\x6e\x2f\x54\x05\xcc\xb0\x06\x61\xa9\xae\x6a\x69\x23\xad\x28\x86\x15\x58\xe3\xbd\x25\x25\xcc\xe5\x90\xa9\xbb\xcd\xb5\x3a\xe0\x54\x47\xfc\x98\x4e\xfb\xc3\x7e\x34\x4d\x19\x39\x75\x1c\x42\x4a\xf4\xc7\x64\x41\x48\xe4\x7a\x91\xe7\x29\xe7\xf9\x0d\x05\x92\x83\x3f\xed\x28\x67\xd0\x0e\xec\x58\x73\x7b\x4a\xde\xb2\x1d\xf9\xb1\xc3\x4e\xa0\x82\x6e\x21\x2f\x6e\x09\x44\x07\xd9\xe5\xf0\x0b\x73\xc6\x77\x4d\x7e\x57\x41\xdf\xc0\xa0\xc6\x71\x2e\xf6\x18\x34\x11\x8d\x58\x92\x9c\xc9\x3d\xeb\x1a\x52\xb0\x92\x66\x3f\xd4\x3f\xd4\x03\xe9\x83\x9a\xe1\x0b\xe0\xf8\xec\x99\x69\x4f\xb8\x00\x70\x9b\x7a\x4f\xfc\x23\xee\x02\x3e\xe9\xaf\x06\xe4\x85\x01\x81\xaf\x03\x23\xc0\xb1\xb7\x06\x9f\xde\x4b\x72\x85\x14\x45\x03\x05\xd4\xae\x1c\x72\x7b\x13\x5d\x2e\x82\x01\x30\x3d\x89\xbf\xfb\xcc\x28\x0f\x26\xda\x6c\xc0\x80\x3c\x69\x23\x28\xb3\x45\x41\xb7\xed\x39\xb9\xda\x36\x0b\x65\xd9\x77\x7f\xbb\xea\x03\x2e\x4b\xa3\xb6\x87\x82\x1b\x33\xdd\x57\xcd\xc9\x4c\x25\xa3\x79\x1f\xa1\x62\x95\xd7\xf0\x23\x49\x4b\xed\xcd\xd8\xba\x5c\x38\x24\x6b\xba\xb3\x3f\xfb\xe8\x6e\x1b\x68\x6c\xe0\xfa\x99\xb7\x1d\xf7\x88\xca\xa5\x2b\xeb\x07\x05\x94\xae\x96\xfe\x85\xf3\x0e\x7a\xf3\xcd\x06\xa2\x2b\x8a\xb1\xb1\x26\xae\x8e\x40\xa2\x5c\x0a\x4a\xba\x67\xea\x09\xef\x15\xd4\x45\x4c\x30\xba\x8f\x1a\x40\xd2\x28\xa1\x42\x0e\xc6\x87\xf1\xba\x66\x6d\x50\xde\xbb\x1d\xb3\x54\xe3\x9c\xa0\x9b\xa4\x23\xf0\x47\x56\xd5\x70\x57\x20\x70\x59\x30\x4c\xb5\xfa\x03\xb1\xa2\xd4\xe0\xf9\x1d\x45\xce\x91\xbe\xe8\x7a\xe7\x18\x83\x20\xa8\x42\x5c\x2c\x1b\xb6\x01\xa2\x7f\xbd\x7c\xf7\x36\x83\x5b\x3d\xec\x54\xcb\xfb\x80\xb5\xbc\xa1\xa2\x59\x0f\x93\x16\x21\x11\x13\xb3\xa9\x07\x29\xf5\x64\xdd\xef\xb7\x25\xd8\xfe\xd3\xa6\xdd\x27\x64\x5d\x2b\xf3\x65\x2b\x38\xb2\xbc\x7c\x48\x71\x83\x0c\x8e\x6d\x12\xd3\x31\xe8\xa9\x23\x49\x27\x6e\x3b\x0e\x71\x79\xd8\x69\x48\xdb\xdc\x47\xd5\x11\x76\xc5\x81\x6c\x73\xb8\x0f\x0c\x3d\xc5\xe4\xc1\xc2\x95\x0e\xae\x66\x43\x4c\x5e\x7b\x9f\x48\xc0\xc4\x21\x13\xa8\x98\x26\xa4\x2d\x8f\xd7\xde\x35\xa4\x8b\xc3\x39\x13\x6b\x4f\x7f\x4d\x3f\xbd\xb0\x55\xdd\x9f\xcd\x1c\xd3\x03\xc8\x66\x47\x74\x00\x6d\xd3\xd1\xa9\xed\x63\x6c\x75\x7e\x4a\xa1\x75\xcd\xf1\xe4\x4a\x7a\x89\x65\x94\x2d\xc5\xad\x5a\x9a\x10\x90\x29\xe9\x64\x84\x1c\x5d\x0d\xff\x9f\x8b\xe1\x64\x42\xde\xd0\x06\xb6\xc1\xf0\x5c\x19\x09\xbb\x0c\x57\x69\xf7\x4c\x8e\xd2\xb9\x49\x5e\x3c\x46\xd3\x60\xfb\xf8\x41\xd7\x97\x20\x4a\x57\xe3\x05\x3c\xe0\x19\x00\xe2\x44\x75\x29\x9b\x66\x4f\xcb\x47\x96\xb0\xdf\x6b\xd8\xff\xb8\x86\x45\x87\x64\x6b\x58\x55\x82\x9f\x58\x86\x15\x9e\xa9\x62\xab\x33\xba\x9c\x99\xbd\xc5\x91\x5a\x50\xe1\xe4\x4e\x50\xd6\xae\x59\x79\xef\xd1\x2c\x24\xf7\x0c\x37\x32\x10\x1c\xee\xc4\x1a\xb6\xd8\x94\xee\x78\x59\x40\xa8\xd9\x23\xc4\x96\x37\x7c\xd4\xee\xe4\x24\x65\xb5\x64\xa6\x75\xce\x91\xc9\x49\x9d\x33\x90\x01\x4e\x6e\xc2\x77\xa6\x4c\x1b\xb8\x69\x68\x4a\xbc\xbb\x96\xa6\x1d\x9e\xbd\x1a\x69\x49\x48\x38\x05\x6d\xda\xe4\x9c\x0f\x37\x94\x7e\x59\x43\xb7\xeb\xbc\xa0\xc3\xc9\x3f\xbf\x9a\x80\x57\x0d\xbc\x49\xa6\x9d\x71\x59\xaa\x20\x5f\x92\xe8\xe9\xa9\xb0\x91\x41\x8e\x06\x60\xee\xf4\x75\x80\x5a\xa2\x93\xc3\xa7\x72\x69\x10\xde\xc2\xf2\x5d\x85\x75\x10\x76\x67\xaf\xe6\xfe\xbb\x13\x97\x79\x81\xef\x57\x06\xec\x76\x70\x1e\x4c\xb3\xc0\x36\x78\xa2\x6e\xdf\x00\xfe\x73\xb0\x53\xd0\x0f\x9e\x97\x42\x0f\x47\x51\xb6\xac\xfb\xdc\xc2\xba\xe7\x54\x79\x4d\x69\x1a\xa0\x95\x74\x4d\x5b\x1a\xa4\x33\xeb\xbf\xf3\x10\xde\x84\xdc\x01\x35\x1e\x8e\xdf\x84\xec\xdb\xe6\x6b\xda\xe6\xd5\x3a\xee\xef\xd4\x3a\x70\x8c\xa4\x7f\xb0\x34\x07\x3e\x6d\x1f\x2f\xb9\x1a\xde\x36\x91\x92\x01\xef\xe0\xba\xc5\x31\x81\xd8\x6d\xcc\x97\xc9\x4c\x49\x4a\x56\x53\xcc\x86\x4e\x40\x85\xc2\x26\xab\x40\x55\x8e\xc9\x67\xf6\xfa\xb7\xc5\xd3\x28\x4f\x3f\x8b\x90\x83\x97\x24\x3d\x8a\x44\xbb\x84\x24\x74\x4b\x40\x45\x05\x23\x4d\xc2\xa9\x17\x1e\xf6\x93\x6b\x87\x2f\x8b\x5f\x47\xdc\x27\xb6\x8b\xef\x4b\x7e\xe3\xea\x82\xe9\x6f\xd7\x60\xaf\xdb\x69\x10\xb9\x70\x27\xf6\x42\x17\xfd\x0a\x63\xfe\x6c\x9e\x9a\x02\x03\x34\x2d\xed\xfd\x45\x01\x4e\x23\x38\xfb\x16\x0b\x41\xbe\x98\xc7\x10\x70\x51\xd6\xb1\x3a\x4b\x6c\x3f\x21\x7b\x1c\xcc\x1f\xe9\x0c\xf2\x88\x1c\x12\x61\x3a\xd3\xcf\x54\xb4\x11\x57\xd3\x05\xd6\x0f\x53\x57\x52\x77\x39\x88\xf4\x43\x1d\xa8\xfb\x7c\xdc\xbb\x31\xfb\xec\x1f\xcb\xc9\x23\x99\xa6\x18\xaf\xee\x63\x8b\xf9\x19\xd7\xb8\xd4\x5c\xd4\x5c\xd9\x6a\xf6\x82\x88\xd9\xef\xd8\xd8\x34\xc1\xf0\xd3\xa4\xe9\x90\xea\x47\xe7\xe9\xdf\x7c\x9a\xea\xcd\xfd\xf2\x4a\x66\x33\x0a\x1c\x96\xfc\x15\xd7\x8f\xbe\xdc\xe6\x66\xb7\x03\x99\x6e\xf2\x3c\x48\x7a\x0d\xdd\xb0\x3b\xfa\x88\xbc\xf7\x8b\x4d\x47\x21\x62\xb2\xa9\x91\x7a\x45\x0d\xcd\xcf\x13\x2b\x4f\x3c\xab\xe7\x93\xe0\xac\xe4\xa0\xb5\xe7\xac\xf0\xcd\x9c\xac\x30\xa9\x53\x43\xf9\x8f\x28\x56\x2d\xf3\x81\xbe\x48\x01\xfd\x62\x3d\x20\x59\x90\xfc\xf3\xd7\x76\x88\x8c\x24\x1f\x1f\x58\x5a\xa3\x3f\x19\xeb\x7d\x95\x89\xfb\x38\xa5\xea\x43\xd2\x39\x0d\x4a\x0a\xe3\xe7\x49\xe6\x0f\xa4\x24\xe3\x36\x98\x91\xa4\xfb\x95\xf8\x4a\x47\x6c\x4a\xf5\x93\x85\x2e\xf8\xfd\xb4\x38\xd0\x89\x8a\x41\xde\x77\x9c\x5f\xb8\x75\x7e\x4b\xff\x8c\x37\x66\x1c\x99\xca\xeb\xf7\x39\x41\xf1\xdd\x01\xc7\x79\x7f\x89\xda\x5b\x2e\xf1\x1b\x43\x43\xdc\x51\x31\x29\x9a\x7c\x57\xf1\xeb\xbb\xf6\x05\x73\xca\x7f\x48\xa9\xf4\x65\x06\xa5\x72\x66\x93\xf6\xf9\xe8\x21\xa4\x7d\x8e\x1d\x47\x46\x4c\x1f\x1c\x4c\xa6\x79\xbc\x24\xee\x84\x32\xc9\x20\xd5\xb1\x25\x87\x96\x3e\x4a\xb0\xd4\x13\x4d\xc1\x50\xcf\x3e\x1f\x7f\x77\xfd\x54\x6d\xd8\xef\xd7\xde\x5f\x6d\x3f\xf9\xb4\x6b\xaf\xf3\xcf\x1f\x72\x04\x3a\x99\x90\xf7\x0d\xc3\x73\x27\x2b\xc6\x6e\x49\x09\x39\xe3\x04\x1d\x54\xcc\x24\xbf\xbb\xdf\x52\xe1\x8d\x03\x37\xb7\x0e\xb0\xed\xb0\x33\xcb\x5c\x46\xa5\x00\x63\x22\x8b\x0e\xa4\xef\x1e\xfa\x7f\x0c\x60\x2e\x0f\x38\xc1\x4b\x0c\x56\x17\x6a\x14\x7a\x80\x99\xf4\x84\x32\x80\x90\x63\x59\x57\xde\x48\x9a\x78\xc6\x7b\x48\x9c\x23\x55\xe7\xf7\x75\xb1\x6a\x58\x5d\xfd\x87\xc6\xfa\xc7\x6f\x46\xd1\xfa\xff\x0d\x00\x00\xff\xff\x1a\xce\x8f\x1f\xcb\x2d\x00\x00")

func pr_review_js_bytes() ([]byte, error) {
	return bindata_read(
		_pr_review_js,
		"pr_review.js",
	)
}

func pr_review_js() (*asset, error) {
	bytes, err := pr_review_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "pr_review.js", size: 11723, mode: os.FileMode(420), modTime: time.Unix(1441859089, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pr_review.js": pr_review_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"pr_review.js": &_bintree_t{pr_review_js, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

