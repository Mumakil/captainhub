package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _pr_review_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x5b\x73\xdb\xba\x11\x7e\xf7\xaf\x80\x4f\x66\x0e\xa9\x1c\x85\xbe\x3c\x5a\xe3\x5e\xe6\xa4\x99\xe9\x25\xb1\x27\x4e\xa6\x0f\x8a\x46\xa1\x45\xc8\x62\x2c\x11\x2a\x41\x5a\x55\x13\xfd\xf7\xee\xe2\x0e\x10\x92\xe5\xd8\x6d\x93\x9e\xf0\x21\x96\x88\xc5\xde\xf7\x5b\x60\x95\x69\x5b\x4d\x9a\x92\x55\xe4\x86\x36\x6f\xe9\x5d\x49\x57\xb4\xe6\xaf\x58\xfd\xaa\x9c\xd3\x74\x0a\xff\xf0\x3e\x59\xb6\xf3\xf9\x5b\xfa\x8f\x96\xf2\xe6\x3d\xa7\x35\xbc\xa8\xe9\x94\xd6\x35\x2d\xcc\x8e\x1e\xf9\x7c\x40\xc8\x84\x55\x9c\xcd\x69\x36\x67\x37\x69\xf2\xaa\xac\x8a\xb2\xba\x21\xb5\xa6\x21\xd7\x6d\x43\xca\x9b\x8a\xd5\xf8\x3a\x21\xbf\x84\x8c\x7b\x83\x03\x60\x72\x97\xd7\x66\x0f\x6a\xc1\xc9\x39\xf9\xbc\x19\xa8\x15\x54\xc9\x48\x55\x2b\xb0\x34\xce\x68\x3e\x99\xa5\x5d\xc5\xfa\xc4\x58\xa8\xcd\xd1\xcc\xa5\xce\x66\xaf\x5a\xf5\xc9\x35\x0d\xf1\x05\x0f\xf1\xdb\x08\xc4\xc7\xde\x7e\xf9\x42\x86\xa3\xc1\xf6\x6d\xd9\xb2\xe5\xb3\xd4\x68\x21\x29\x37\xe2\xef\xa6\xe7\x5a\xb3\x53\x23\xd7\x4d\xe8\x88\xae\xe9\x42\x5a\x86\xff\x54\xf9\xc2\xea\x25\x76\x97\x53\x62\x34\xe0\x19\x50\xdc\x34\x33\x72\x7e\x7e\x4e\x8e\xad\xc5\x28\x61\x99\x37\x0d\xad\x2b\xe0\x3f\x06\x4e\x55\x91\x42\x88\xa7\xe5\x4d\xa6\xde\x77\xb4\xfb\x15\x96\x2d\x07\x8f\x07\x57\xee\x42\x12\xbd\x7f\xe0\x11\xb6\x90\x03\xa8\xaa\x47\x69\xb4\x54\x9a\x6b\xe2\x45\xde\x4c\x66\x56\x2f\x2d\x24\xe3\xcb\x79\xd9\xa4\x49\x3f\xe9\xb9\xba\xa9\x65\x57\x35\x42\x8e\x8e\xdc\x84\x55\x24\x7d\xe2\xb9\xad\x37\x70\x36\xd4\xb4\x69\xc1\x19\x42\x34\xa6\xe6\x65\xde\xcc\xee\xdf\xa7\x82\xaa\x65\x12\x1d\x20\x32\x65\x32\x9f\xc9\x24\xaf\x1a\x72\x4d\x49\x33\xa3\x84\xc3\x66\x92\x73\xf1\x19\xeb\x03\x84\x8a\x02\x21\x9c\x56\x05\xad\x0d\x23\x8c\xa0\xf4\xc1\xcf\x3f\x93\xd4\xb8\x2e\x03\x67\xd0\x7f\x5e\x4c\xd3\xb0\xb6\x44\x74\x5f\x9c\x60\x16\x58\x62\x15\xf8\xdf\x91\x93\x9e\xef\x1a\x65\xe9\x38\x5b\x95\xcd\x8c\xb5\x8d\x15\xd0\x81\x83\x9e\xe5\x72\xec\x18\x7d\xd0\x31\x1e\x35\x3e\x8c\x04\x42\xca\xd2\x5b\x37\x9a\xdc\x4d\x6e\xab\x87\xda\x6f\xd3\xa2\xab\x8f\x11\x88\x69\x92\xcf\x6b\x9a\x17\x6b\xe9\x73\xc4\x1d\x64\x56\x56\xc0\x83\x53\x91\x1b\xa9\xa3\x87\x66\x69\x5e\x8d\xb3\x5b\xba\xe6\xa9\x07\x47\x3d\xb5\xea\x1b\x16\xca\x71\x9c\xe2\xdb\x6a\x8d\x0a\xb7\x58\x0f\x38\x7e\x10\x65\x9e\x57\x05\x5b\x98\xb4\x39\xb7\x5c\x86\xaf\x21\x03\xb3\xe9\x9c\xb1\x3a\x15\x1f\x25\x69\xda\x23\xcf\x49\x58\xde\x3d\x5d\xfb\x9e\x35\x43\x9f\xf9\xc8\xe1\x1e\x5f\x77\xd0\x6d\x27\xa1\x44\xb9\x6e\x4d\x6c\xfa\x90\xda\x25\x97\xde\x53\x69\xe6\x31\x1a\x1c\x80\xe9\x6e\x5b\xc2\xb7\x57\xb3\xfc\x75\xbe\x94\x88\x28\xfd\xa9\x9b\x81\x5c\x31\x3d\x62\x1f\xe8\xb4\xdb\x42\x88\x94\xb8\x93\xf1\x59\xae\xd1\xd8\xe8\x68\x37\xf9\x0a\x3a\xd9\x77\xb1\xa4\x15\x2d\x52\x7a\x47\xab\xe6\x65\xde\xe4\x56\xd1\x20\x45\x41\x8e\x21\xca\x70\x6d\xac\x8a\x3c\xc3\x32\x43\x34\x2a\x2b\xd3\x0b\xa7\xaa\x07\x82\x27\x2e\x2d\x1b\xe1\x2a\x2b\x2a\xab\xda\xc5\xb5\x6a\x26\xb1\x06\xfa\x90\xee\xfe\x79\xd3\x1b\xc4\x1c\x1c\x0b\x85\xd0\x12\xf3\x3f\x5a\x29\x91\x22\x10\xd0\x4d\x39\xcf\x6f\x28\xb0\x4c\xfe\xb8\xa2\x9c\x01\xe0\xad\x58\x7d\x7b\x48\xde\xb0\x15\xf9\xd4\x22\xd6\x95\x80\x87\xf9\xe4\x96\x40\x4e\x91\x55\x0e\xdf\x10\x2b\xdf\xd5\xf9\x5d\x09\xc8\xc8\xa0\xa5\x70\x2e\xd6\x18\xc0\x64\x2d\x5e\x49\xc9\x64\xcd\xda\x1a\xce\x21\x05\xcd\x3e\x54\x1f\xaa\x44\x26\xaa\x16\xf8\x0b\x48\x7c\xf6\xcc\x00\x30\x17\x04\xee\x19\xc0\x53\x7f\x8f\xa3\x83\xcf\xfa\x0f\x78\xa6\xd1\x24\xf0\x31\x31\x0a\xec\x7b\xc8\xf0\xf9\xbd\x10\x87\x24\xd1\x21\x7c\x66\x1b\xd3\x5d\x5c\x72\x43\x60\x30\xd7\x5f\x7d\x66\x4c\x07\x07\x2d\x16\xe0\x3e\x1e\xf5\xd0\x0b\x92\x4f\x26\x74\xd9\x9c\x91\x8f\xcb\x7a\xac\xfc\x7a\xf1\xd7\x8f\xdb\x88\x8b\xc2\x18\xed\x6d\xc1\x85\xa1\xee\x1b\x23\x32\x54\xd0\x3d\xda\xc6\x68\x32\xcb\x2b\xf8\x12\xe5\xa5\xd6\x86\x6c\x5e\x8c\x1d\x96\x15\x5d\xd9\xaf\xdb\xf8\x2e\xe1\xbc\x09\x29\xd5\xe4\x4d\xcb\x3d\xa6\xf2\xd5\x47\x9b\x05\x13\x00\xe4\x86\xfe\x99\xf3\x16\xce\x1e\x8b\x05\xd4\x56\xa7\xc2\xfa\x9a\xb9\x0a\x81\xdc\x72\x25\x38\xe9\x56\xb2\xa5\xb6\x67\x80\xf6\x08\x2d\xba\xbd\x24\x00\x17\x78\x42\x4e\xfa\xbb\xf7\xb5\xf5\xdc\x6c\xb9\x74\x4f\x04\xd2\x8c\x33\x91\x25\xf1\xfa\xfb\xc4\xca\x0a\xce\x42\x04\x0e\x43\x46\xa8\x36\x3f\x39\x50\x5d\x0c\xff\xf0\xfc\x8e\xa2\xe4\x8e\xbd\x98\x79\x67\x58\x81\xa0\xa8\xda\x38\x9e\xd6\x6c\x01\x4c\xff\x72\x75\xf1\x26\xe3\x0d\x9e\xe6\xcb\xe9\x3a\x10\x2d\xb1\x1e\xdd\xba\x9b\xb5\x28\x88\x2e\x33\x0b\x3c\xc8\x69\x0b\xde\xbe\x5f\x16\xe0\xfb\xa7\x03\xdc\x47\xe0\xad\xd5\xf7\xaa\x41\x69\x73\x96\x17\xf7\x19\x6d\x36\x43\x52\x1b\x48\xda\x67\x7b\x2c\x1c\x71\xc8\xb6\xf7\x26\x57\x86\xbd\x36\x35\xf5\xba\xd3\x13\x61\x55\x04\x63\x99\xc3\x11\x29\xf5\x0c\x93\x41\x85\xe3\x2a\x1c\x3b\x53\x84\xad\x8d\xcf\x24\x10\xe2\xb0\x09\x4c\x8c\x33\xd2\x9e\xc7\x23\xfd\x1c\xa0\x62\x37\x5a\x62\xd7\xd9\xde\xc9\x0f\xcf\x6d\x2f\xf7\x2f\x71\xfb\x74\x7e\x79\xba\x11\x7d\xbf\xa9\x5b\xaa\x60\xd5\x5e\xd0\x1e\xdb\x62\x5d\x77\x3c\xba\x87\x5e\x61\x03\x65\x53\x71\x63\x90\x2e\x84\xcd\x94\xb4\xb2\x3a\xf6\xee\x83\xff\xbf\x6d\x10\xee\x5c\xaf\x69\x0d\xcb\xe0\x76\xae\x5c\x84\xa7\x0b\xd7\x64\x37\x22\x7b\x59\x1c\x1c\x7e\xb7\x9f\x9f\xcd\xca\xef\x41\x56\x5b\xe1\x95\x23\x60\x1a\x10\xf6\xc8\x99\x54\x32\x30\xe3\x81\xdd\xe9\x47\x7b\xfa\x1f\xb7\xa7\x4e\x90\x6c\x7b\x2a\x0b\xaf\x23\x95\x18\x53\x25\x56\x03\xb6\xbc\xee\xbf\xc1\x69\x80\x4b\x2a\x5f\xfb\x1d\xeb\x9a\x15\x6b\x8f\x68\x22\x25\x67\xb8\x90\x81\xd2\x70\x21\xd4\xb4\x93\x45\xe1\x8e\x98\x04\x85\x1a\x99\x40\xe1\x78\x33\x13\x9d\x4a\x0e\xde\xaa\x57\x66\xc8\xe0\x84\xab\x17\x8e\x8f\x40\x92\x8b\xe5\xce\x9d\x7a\x01\xd7\x07\xcd\x89\xb7\xd7\xd2\xad\xe9\xc9\x71\x4f\x6b\x42\xc2\xe1\x4d\xdd\x00\x5f\x8d\xc8\xf8\x55\x5b\x05\xd5\x61\x6f\xeb\x76\x07\xc8\x8e\xce\x33\x0e\x0f\x85\xfd\xfa\xed\xa6\x73\x95\xf7\x26\x98\x68\x01\x26\x2f\xfc\x55\xa9\x0a\x8a\x59\x5a\xbe\x2a\xb1\x7d\xc1\xea\xf0\x78\x94\x35\xec\x6f\x0c\xd2\xeb\xd7\x1c\xba\x9d\x37\x4c\x99\xc0\x1b\x92\xb0\xdb\xe4\xcc\xd1\x47\x44\xb8\xa9\x31\x5a\x6e\xbb\x87\xbc\xd8\xd9\xe0\xf5\x83\xb1\x50\xdb\x7d\x3b\xdd\x6e\xec\x4b\x0b\xdb\x95\xd3\x9c\x35\xa7\x41\xb0\xad\xa0\x73\xda\xd0\x00\xa6\x6c\x5e\x8e\x42\x7a\x53\x4a\x3b\xcc\xb8\xbf\x2e\x23\xba\x2f\xeb\x97\xb4\xc9\xcb\x79\xf7\x58\xa6\xde\x83\xc4\x8e\xf6\xf7\x76\xd4\x20\x5f\xed\xe3\x81\xa6\x91\x6d\x01\x92\x24\xbc\x85\x1b\x12\x47\x60\xb0\xcb\x88\x83\x51\x04\x44\x80\x73\xea\x24\xd4\x33\x0a\xec\x65\xd1\x27\x3f\xd9\xcb\xda\x12\x03\x51\x1c\xfe\xd4\xd9\xbc\x21\x74\x0e\xe9\x75\x8f\x0d\x9d\x55\x42\x22\x66\x45\xa8\x3a\x3d\x20\xce\xc2\x69\x01\xde\xee\x47\xb7\x03\x5f\x17\xbf\x35\xb8\x4f\xd7\x2f\x7e\x1a\xf9\x47\x4d\x97\x4c\x7f\xba\x06\x7f\xdd\x0e\x82\xa2\x85\x1b\xac\x57\xb5\x98\x52\x58\xee\x27\xa3\x30\x6d\x30\x4b\xe1\x32\xaa\x8b\x6b\x18\xd4\xc6\x23\xcb\x7d\x67\xc1\xc7\x4b\xfe\x01\x45\xdf\xd9\xa9\xcd\x3c\xed\x98\x29\x1f\xc7\x50\x03\xef\xb1\xdb\x12\x14\xe5\xae\x33\x9e\xfb\x44\x27\xeb\x52\x87\x5d\x03\x79\xfd\x6c\x22\x6f\x37\x5d\xc3\x7c\x24\x93\x91\x1c\x09\x2b\xe4\xb9\x2c\xbe\x2e\x26\x9e\x7d\x63\x75\x44\xd4\xd3\x00\x5f\x2c\x80\x5f\x85\x7c\xbf\xf9\xea\xdf\x0a\xa9\xf2\x6e\x22\x03\x8b\x91\xc2\x19\x15\x2d\xba\x98\xbc\x0d\x2f\x5c\xc4\xd8\x81\x1e\x47\xcf\x03\x20\xa9\xe9\x82\xdd\xd1\x07\x60\xc9\x37\x0b\x16\xe1\xc6\xe8\x19\x41\x55\xce\x7f\xa7\x50\x1e\x19\xab\xe7\x47\x41\xac\xe4\xa8\x71\x4b\xac\xf0\xc7\xb6\x38\x34\x7e\xd3\x51\x8b\x42\x7c\x34\x66\x71\x80\xee\x92\x9e\xde\x03\x9c\xa7\x16\x38\xe3\x72\x62\x30\xfe\xb0\x64\xfa\x4f\xe1\xee\xfe\xe8\x21\x53\xa5\xc0\x9f\x1f\xcc\xd2\x69\xcc\xb4\xcd\xd3\xe6\xac\x06\x15\x06\x00\xed\x24\xaa\x18\xff\xe5\xb7\xf4\x4f\x78\x11\xc4\x21\x9f\xbc\x51\x9e\x11\x54\xde\xbd\xb3\x9f\x6d\xef\x25\x1b\x2b\xa5\xfb\xcb\x96\x61\xee\x98\x18\x55\x4d\x4e\xd6\xbf\xbf\x1b\x4f\x30\x59\xfb\xbb\xd4\x4a\xff\xb6\x84\x5a\x39\xd3\x34\xfb\x7c\xf5\xd8\xcc\x3e\xfb\x0e\xd0\x3a\x42\xef\x1d\xa5\xc5\x65\x6c\x1d\xaa\xd9\x27\x76\xa8\x8a\x0e\xda\xfc\x2d\xc1\xab\x2d\xb5\x14\xcc\xa9\xec\xf3\xf5\xd7\xb6\xa7\x3a\x2f\xfd\xb8\xf1\x7d\x8f\x67\xbe\xc7\xdd\xf8\xf4\xff\xb9\x90\x29\x0c\xbc\x8e\x8e\xc8\x65\xcd\x30\xe4\x64\xc6\xd8\x2d\x29\x00\x2e\x0e\x30\x37\xc5\x94\xed\xdd\x7a\x49\x45\x22\x26\x2e\xac\x26\x78\x3a\xb0\x53\xb8\x5c\x16\xa4\x20\x63\x02\x40\x13\x99\xb6\xbb\xfe\xcb\x00\x08\x97\x01\x8e\xc8\x12\x63\xc2\xb1\x1a\xee\xed\x10\x26\x33\xa1\x08\x28\xe4\x90\xd1\xd5\xb7\xa3\x4d\x77\x62\xb9\x4b\x9d\x3d\x4d\xe7\xeb\x6a\x32\xab\x59\x55\xfe\x8b\x76\xed\xef\xfe\x84\x87\xde\xff\x77\x00\x00\x00\xff\xff\x89\x0f\x1a\x1a\x95\x28\x00\x00")

func pr_review_js_bytes() ([]byte, error) {
	return bindata_read(
		_pr_review_js,
		"pr_review.js",
	)
}

func pr_review_js() (*asset, error) {
	bytes, err := pr_review_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "pr_review.js", size: 10389, mode: os.FileMode(420), modTime: time.Unix(1441706119, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pr_review.js": pr_review_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"pr_review.js": &_bintree_t{pr_review_js, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

