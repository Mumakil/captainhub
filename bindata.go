package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _pr_review_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x59\x73\xe3\xc6\x11\x7e\xd7\xaf\x18\x79\xab\x4c\x72\x97\x0b\xae\xfc\x28\x46\xb1\x53\xeb\xb8\x2a\xc7\x1e\x65\xd9\x95\x07\x99\x91\x20\x60\x28\xc2\x22\x31\x0c\x06\x10\xa3\xac\xf9\xdf\xd3\x3d\xf7\x05\x92\x5a\xae\x2b\x76\x6c\x3e\x48\x22\xa6\xa7\xaf\xe9\xfe\xba\xa7\xa1\x79\x57\x17\x6d\xc5\x6a\xb2\x2c\x86\xbc\x6d\x46\xe4\xc3\x09\x21\x0d\x6d\xbb\xa6\x26\xf0\x9d\x7c\xfe\x39\xfe\xca\x5a\xf6\x77\xb6\xa1\xcd\xeb\x9c\x53\xf2\x65\xf8\x64\x38\x22\xe7\xf8\x6c\x7a\xb2\x3d\x39\x31\x0c\xef\x68\xfb\x2d\x7d\xa8\x28\x10\xf1\x6f\x58\xf3\x4d\xb5\xa4\xc3\x39\xfc\xe0\x63\xb2\xee\x96\xcb\x6f\xe9\xbf\x3a\xca\xdb\xef\x39\x6d\xe0\x41\x43\xe7\xb4\x69\x68\x69\x76\x48\x45\x1e\xf2\x06\x94\x91\x8f\x90\x01\x27\x17\xe4\xc3\x76\xaa\x56\x90\x9b\xd9\xa0\x56\x60\xe9\x3a\xa3\x79\xb1\x18\xc6\x3c\xc7\xc4\x28\xa7\x35\xd1\xcc\xa5\x38\xb3\x57\xad\xfa\xe4\x9a\x86\xf8\x82\xaf\xf0\xdb\x0c\xc4\xa7\x9e\xfe\xf4\x13\xb9\x9a\x4d\xfb\xb7\x65\xeb\x8e\x2f\x86\x46\x0b\x49\xb9\x15\xbf\xf1\xe7\xc9\x61\x1a\xb9\x6e\x42\x47\xc4\xa6\x0b\x69\x19\xfe\xa8\xf3\x95\xaf\x57\x35\x27\x46\x01\x9e\x01\xc1\x5d\xbb\x20\x7f\x24\xaf\xac\xb9\x4a\x85\x26\xe5\xc7\xd0\x81\xf8\xf1\x4e\xec\x4a\x7f\x43\x17\xf5\xad\x78\x6e\xea\x65\x90\x74\x96\x76\x17\xfc\x26\x74\x09\xe1\xa9\xf5\x40\xa7\xac\xf3\xb6\xa5\x10\xc9\x17\x60\xc3\xbc\xaa\xcb\x61\xc1\xea\x79\x75\x97\xa9\xe7\x91\x43\x5f\xc3\xb2\x6b\x89\xc3\x83\xab\x13\x46\x12\xbd\x7f\xea\x11\x76\x10\xca\xe8\x5d\x8f\xd2\x38\x4d\x1c\xa6\x25\x5e\xe5\x6d\xb1\xb0\x7a\x69\x21\x19\x5f\x2f\xab\x76\x38\x18\x0f\x46\xae\x6e\x6a\xd9\x55\x8d\x90\xc9\x04\xac\xe1\x0c\xce\x75\xc9\xee\x34\xc9\x98\x78\x27\x3d\x9a\x3a\x1b\x54\x5a\x0b\xd1\xe8\xda\xf7\x79\xbb\xd8\xbf\x4f\xc5\xa1\x96\x49\x74\x4c\x91\x39\x93\x29\x48\x8a\xbc\x6e\xc9\x2d\x25\xed\x82\x12\x0e\x9b\x49\xce\xc5\xdf\x98\xe6\x20\x54\xe4\x39\xe1\xb4\x2e\x69\x63\x18\x61\xd4\x49\x1f\x00\xc2\x0c\x8d\xeb\x32\x70\x06\xfd\xf7\xbb\xf9\x30\x80\x88\x11\xb9\xb8\xb8\x20\x2f\xcf\x30\x52\x2c\xb1\x09\xd6\xb3\x91\xef\x1a\x65\xe9\x75\xb6\xa9\xda\x05\xeb\x5a\x2b\x20\x02\x9f\x91\x13\xf2\x8e\xd1\x27\x91\xf1\xa8\xf1\x69\xe2\x20\xa4\x2c\x13\x8c\x9a\xdc\xcd\x47\xab\x87\xda\x9f\x39\xb9\x14\xea\x63\x04\xba\x59\xfd\x9a\x75\xe0\xe3\x0b\x12\xee\x97\xcf\xc1\x29\x67\xde\xb6\x7c\xd9\xd0\xbc\x7c\x94\x47\x55\xd5\x77\x42\x87\xaa\x86\xad\x9c\x8a\x90\x1a\x46\xb9\xc6\xc7\xe6\xd1\x75\x76\x4f\x1f\xf9\xd0\xcb\xc2\x91\x5a\xf5\xfd\x11\xca\x49\xc2\x87\x0a\x78\xd6\x18\xf0\xd3\xd6\xf8\x56\xbc\x8c\xd4\x56\xec\xa6\x7e\xd4\x44\x8c\x02\x69\x52\x5e\xcd\x5a\xdf\xfc\xb2\x9a\x03\x28\xd2\xba\xa0\x2e\x92\x85\x22\xbd\x84\xc1\x08\x1f\x22\xb3\x0a\x38\xbc\x9a\xc2\xaf\x3f\x24\xec\x80\x00\x76\x85\xb9\xf1\x44\xaa\x17\x2f\x7c\xd5\xd4\xb1\xe6\x75\xc9\x56\x26\x93\x2e\x7c\x06\x88\x01\xa0\xe5\x1b\x48\xcf\x6c\xbe\x64\xac\x91\x7f\xca\x4d\x50\x6c\x9f\xa7\xe4\x01\x5e\x9c\x8d\xae\x5e\xcd\xa6\x9e\xb0\xc8\xa3\x12\x42\x3d\xf1\x9e\xc9\xdb\x28\x05\xfc\x50\x0e\x19\x46\x71\x9f\xf2\x59\x13\xfa\x2b\x55\x6f\x22\x67\x25\x1d\x05\x6d\x8a\xdd\xbc\xdf\x51\xa1\x20\xed\xa5\x51\x6f\xb1\xf1\x04\x26\x6a\x56\xb0\xbe\xbb\x72\xf9\xc4\xd2\xf9\x69\x9c\xdd\xba\x69\xa5\xb3\x9c\x6d\x6a\xbf\xb2\xa2\x4b\xc4\x43\xe9\x09\x9f\xae\x4f\x0b\xb1\x1a\x5b\xa2\x1e\xef\x34\x40\xd2\xec\xd6\x5b\xff\xdc\x8e\x01\xf4\x2b\x2e\x01\x42\x01\xb0\xc7\x2d\x6a\x0f\xf1\xe9\xe5\x22\x7f\x93\xaf\x65\x7b\x63\x7b\xbe\xb9\x59\x31\x0d\xdf\x21\x7d\x90\xdd\x16\xf6\x3b\xb2\x22\x67\x7c\x91\xeb\xd6\xca\xe8\x68\x37\xf9\x0a\x3a\xb8\xfc\x6e\x4d\x6b\x5a\x0e\xe9\x03\xad\xdb\xaf\xf3\x36\xb7\x8a\x06\xe0\x2d\x8f\xc5\xd0\x65\xb8\x7c\xad\x2a\x60\x86\x35\x08\x4b\x75\x55\x4b\x1f\x69\x43\x31\xad\xc0\x1b\xef\x2d\x2b\xe1\x2e\x87\x4d\xdd\xad\x6e\xd5\x01\xa7\x3a\xe2\xa7\x74\xda\x1f\xb6\xa3\x69\xca\xc9\xa9\xe3\x10\x5a\x62\x3c\x26\x0b\x42\x02\xeb\x05\xce\x53\xce\xf3\x3b\x0a\x2c\x07\x7f\xda\x50\xce\xa0\x1d\xd8\xb0\xe6\xfe\x94\xbc\x65\x1b\xf2\x63\x87\x9d\x40\x05\xdd\x42\x5e\xdc\x13\xc8\x0e\xb2\xc9\xe1\x1b\x62\xc6\x77\x4d\xfe\x50\x41\xdf\xc0\xa0\xc6\x71\x2e\xd6\x18\x34\x11\x8d\x78\x24\x25\x93\x47\xd6\x35\xa4\x60\x25\xcd\x7e\xa8\x7f\xa8\x07\x32\x06\xb5\xc0\x17\x20\xf1\xd9\x33\xd3\x9e\x70\x41\xe0\x36\xf5\x9e\xfa\x07\xdc\x05\x7c\xd6\x5f\x0d\xc8\x0b\x43\x02\x7f\x0e\x8c\x02\x87\xde\x1a\x7c\x7e\x2f\xc9\x0d\x72\x14\x0d\x14\x70\xbb\x71\xd8\x6d\x4d\x76\xb9\x1b\x0c\x81\xe9\x49\xfc\xd5\x67\xc6\x78\x70\xd1\x6a\x05\x0e\xe4\x49\x1f\x41\x99\x2d\x0a\xba\x6e\xcf\xc9\xcd\xba\xb9\x56\x9e\x7d\xf7\xb7\x9b\x3e\xe2\xb2\x34\x66\x7b\x5b\x70\xe1\x4a\xf7\x55\x33\x72\xa5\xc0\x68\xd6\xc7\xa8\x58\xe4\x35\x7c\x49\xf2\x52\x6b\x57\x6c\x59\x5e\x3b\x2c\x6b\xba\xb1\x5f\xfb\xf8\xae\x1b\x68\x6c\xe0\xfa\x99\xb7\x1d\xf7\x98\xca\x47\x37\x36\x0e\x0a\x28\x5d\x2d\xfd\x0b\xe7\x1d\xf4\xe6\xab\x15\x64\x57\x94\x63\x63\xcd\x5c\x1d\x81\xdc\x72\x29\x38\xe9\x9e\xa9\x27\xbd\x17\x50\x17\x11\x60\x74\x1f\x35\x00\xd0\x28\xa1\x42\x0e\xc6\xbb\xf7\x75\xcd\xd2\x6c\x79\xef\x76\xcc\xd2\x8c\x73\x82\x61\x92\xce\xc0\x1f\x59\x55\xc3\x5d\x81\xc0\x65\xc1\x08\xd5\xe6\x0f\xc4\x13\x65\x06\xcf\x1f\x28\x4a\x8e\xec\xc5\xd0\x3b\xc7\x1c\x04\x45\xd5\xc6\xeb\x79\xc3\x56\xc0\xf4\xaf\x97\xef\xde\x66\x70\xab\x87\x95\x6a\xfe\x18\x88\x96\x37\x54\x74\xeb\x6e\xd6\x22\x25\x62\x66\x16\x7a\x90\x53\x0f\xea\x7e\xbf\x2e\xc1\xf7\x9f\x16\x76\x8f\x40\x5d\xab\xf3\x65\x2b\x24\xb2\xbc\xdc\x67\xb8\xd9\x0c\x81\x6d\x80\xe9\x90\xed\xa9\x23\x49\x03\xb7\x1d\x87\xb8\x32\xec\x34\xa4\x6d\x1e\xa3\xea\x08\xab\xe2\x40\xd6\x39\xdc\x07\x86\x9e\x61\xf2\x60\xe1\x4a\x07\x57\xb3\x21\x82\xd7\xd6\x67\x12\x08\x71\xd8\x04\x26\xa6\x19\x69\xcf\xe3\xb5\x77\x09\x70\xb1\x1b\x33\xb1\xf6\xf4\xd7\xf4\xd3\x0b\x5b\xd5\xfd\xd9\xcc\x21\x3d\x80\x6c\x76\x44\x07\xd0\x36\x1d\x9d\xda\x3e\xc6\x56\xe7\x63\x0a\xad\xeb\x8e\xa3\x2b\xe9\x25\x96\x51\x36\x17\xb7\x6a\xe9\x42\xd8\x4c\x49\x27\x33\xe4\xe0\x6a\xf8\xff\x5c\x0c\x27\x13\xf2\x86\x36\xb0\x0c\x8e\xe7\xca\x49\xd8\x65\xb8\x46\xbb\x67\x72\x90\xcd\x4d\xf2\xe2\x31\x9a\x06\xcb\x87\x0f\xba\xbe\x04\x55\xba\x1a\x2f\xe0\x81\xcc\x80\x10\x27\xaa\x73\xd9\x34\x7b\x56\x3e\xb1\x84\xfd\x5e\xc3\xfe\xc7\x35\x2c\x3a\x24\x5b\xc3\xaa\x12\xe2\xc4\x0a\xac\xf0\x4c\x95\x58\x8d\xe8\x72\x66\xf6\x16\x47\x6a\x41\x85\x93\x2b\x41\x59\xbb\x65\xe5\xa3\xc7\xb3\x90\xd2\x33\x5c\xc8\x40\x71\xb8\x13\x6b\xda\x62\x55\xba\xe3\x65\x41\xa1\x66\x8f\x90\x5b\xde\xf0\x51\x87\x93\x03\xca\xea\x91\x99\xd6\x39\x47\x26\x27\x75\xce\x40\x06\x24\xb9\x80\xef\x4c\x99\x56\x70\xd3\xd0\x9c\x78\x77\x2b\x5d\x3b\x3c\x7b\x35\xd2\x9a\x90\x70\x0a\xda\xb4\xc9\x39\x1f\x2e\x28\xfb\xb2\x86\xae\x97\x79\x41\x87\x93\x7f\x7e\x35\x81\xa8\x1a\x78\x93\x4c\x3b\xe3\xb2\x5c\x41\xbf\x24\xd3\xd3\x53\xe1\x23\xb3\x39\x1a\x80\xb9\xd3\xd7\x01\x5a\x89\x41\x0e\xbf\x55\x48\x83\xf2\x96\x96\x6f\x2a\xac\x83\xb0\x7a\xf5\x6a\xe6\xbf\x3b\x71\x85\x17\xf8\x7e\x65\xc0\xee\x07\xe7\xc1\x34\x0b\x7c\x83\x27\xea\xf6\x0d\x10\x3f\x3b\x3b\x05\xfd\xc1\xf3\x52\xdb\xc3\x51\x94\x2d\xeb\xbe\xb4\xb0\xee\x39\x55\x5e\x73\x9a\x06\xdb\x4a\xba\xa4\x2d\x0d\xe0\xcc\xc6\xef\x2c\xa4\x37\x29\xb7\xc3\x8c\xfd\xf9\x9b\xd0\x7d\xdd\x7c\x4d\xdb\xbc\x5a\xc6\xfd\x9d\x7a\x0e\x12\x23\xed\xf7\x96\xe6\x20\xa6\xed\xc7\x03\x57\x23\xdb\x02\x29\x19\xf0\x0e\xae\x5b\x1c\x01\xc4\x2e\x23\x5e\x26\x91\x92\x94\xac\xa6\x88\x86\x4e\x42\x85\xca\x26\xab\x40\x55\x8e\xc9\x67\xf6\xfa\xb7\xc6\xd3\x28\x4f\x3f\x8b\x36\x07\x2f\x49\x7a\x0c\x89\x56\x09\x49\xd8\x96\xa0\x8a\x0a\x46\x9a\x85\x53\x2f\xbc\xdd\x47\xd7\x0e\x5f\x17\xbf\x8e\xb8\x9f\xd8\x2f\x7e\x2c\xf9\x8d\xab\x4b\xa6\xff\xba\x05\x7f\xdd\x4f\x83\xcc\x85\x3b\xb1\x97\xba\x18\x57\x98\xf3\x67\xb3\xd4\x14\x18\xa8\x69\x69\xef\x2f\x8a\x70\x1a\xd1\xd9\xb7\x58\x48\xf2\xc5\x2c\xa6\x80\x8b\xb2\xce\xd5\xab\xc4\xf2\x11\xe8\xb1\x13\x3f\xd2\x08\xf2\x04\x0c\x89\x76\x3a\xd3\xcf\x54\xb6\x11\xd7\xd2\x6b\xac\x1f\xa6\xae\xa4\xee\x72\x90\xe9\xbb\x3a\x50\xf7\xf3\x71\xef\xc6\xec\x67\xfb\x54\x49\x1e\xcb\x34\xc7\xf8\xe9\x36\xf6\x98\x8f\xb8\x26\xa4\x66\xa2\xe6\xca\x56\xb3\x97\x44\xcc\x7e\xc7\xc6\xa7\x09\x81\x9f\x06\xa6\x43\xae\x1f\x8d\xd3\xbf\x79\x98\xea\xc5\x7e\x79\x25\xb3\x88\x02\x87\x25\xbf\xc5\xf5\xa3\x0f\xdb\x5c\x74\xdb\x81\x74\x93\xe7\x01\xe8\x35\x74\xc5\x1e\xe8\x13\x70\xef\x17\x0b\x47\xe1\xc6\x64\x53\x23\xed\x8a\x1a\x9a\x9f\x27\x57\x8e\x3c\xab\xe7\x93\xe0\xac\xe4\xa0\xb5\xe7\xac\xf0\xcd\x9c\xac\x30\xa9\x53\x43\xfd\x0f\x28\x56\x2d\xf3\x89\xbe\x48\x11\xfd\x62\x23\x20\x59\x90\xfc\xf3\xd7\x7e\x88\x9c\x24\x3f\x3e\xb1\xf4\x46\x3f\x18\xeb\x75\x85\xc4\x7d\x92\x52\xf5\x21\x19\x9c\x66\x4b\x6a\xc7\x11\xb0\xbb\x1f\x78\x0f\x85\xde\x3d\xe0\x7b\x00\xfc\x7e\x6a\x00\xde\x0d\xc1\x49\x10\xfe\xb9\x0a\xe3\x1e\x78\x37\x29\x88\xe8\x2e\x53\xb9\xc4\xd7\x63\x62\x51\x86\x52\xb2\x69\x08\xbe\x1f\x87\x29\x1a\xf4\x19\x1c\xa3\x03\x24\x02\x22\xf2\x7b\xfa\x67\x9c\x3e\xe0\xf8\x59\x8e\x32\xce\x09\xaa\xef\x0e\x8b\xce\xfb\xe3\x6e\x6b\xa5\xc4\x6f\x5f\x0d\x73\xc7\xc4\xa4\x6a\xf2\xbd\xcf\xaf\xef\x0a\x1d\xcc\x7c\xff\x21\xb5\xd2\x17\x43\xd4\xca\x99\xf3\xda\xcf\x47\x0f\x74\xed\xe7\xd0\xd1\x6e\x24\x74\xef\x90\x37\x2d\xe3\x25\x71\xa7\xbd\x49\x01\xa9\xee\x37\x39\x00\xf6\xb7\x04\x8f\x7a\xb2\x29\x18\x90\xda\xcf\xc7\xcf\x01\x3e\x55\x4b\xfb\xfb\x08\xe1\x57\xdb\x9b\x1f\x37\x42\x70\xfe\x91\x46\x8e\x93\x27\x13\xf2\xbe\x61\x78\xee\x64\xc1\xd8\x3d\x29\x01\x33\x4e\x30\x40\xc5\x7c\xf7\xbb\xc7\x35\x15\xd1\x38\x70\xb1\x75\x80\x2d\x9c\x9d\xff\xe6\x32\x2b\x05\x19\x13\x28\x3a\x90\xb1\xbb\xeb\x7f\x5b\x40\xb8\x3c\xe0\x84\x2c\x31\xa4\xbe\x56\x63\xe5\x1d\xc2\x64\x24\x94\x01\x85\x1c\x71\xbb\xfa\x46\xda\xc4\xf3\xf2\x5d\xea\x1c\x68\x3a\x7f\xac\x8b\x45\xc3\xea\xea\x3f\x34\xb6\x3f\x7e\xcb\x8c\xde\xff\x6f\x00\x00\x00\xff\xff\xb1\x59\xf1\x7a\x17\x2f\x00\x00")

func pr_review_js_bytes() ([]byte, error) {
	return bindata_read(
		_pr_review_js,
		"pr_review.js",
	)
}

func pr_review_js() (*asset, error) {
	bytes, err := pr_review_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "pr_review.js", size: 12055, mode: os.FileMode(420), modTime: time.Unix(1441863750, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _pr_review_peer_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x57\x4b\x73\xdb\x36\x10\xbe\xeb\x57\xac\xc6\x33\x01\x39\x96\x69\xe7\x6a\x8d\xd3\xb4\xce\xa5\x8f\xb1\x3d\x71\x3a\x3d\xd8\xae\x0c\x91\x2b\x89\x31\x45\xb0\x00\x68\x55\x4d\xfc\xdf\xbb\x00\xf8\x00\xa9\x87\xed\x34\xc7\xf2\x90\x58\xc0\x62\xf7\xfb\x16\xfb\xc2\xac\xcc\x63\x9d\x8a\x1c\xb2\x38\x50\x5a\x86\xf0\x65\x00\x20\x51\x97\x32\x07\xfa\x0d\x6f\xde\x98\xff\x22\x2d\x7e\x13\x2b\x94\xe7\x5c\x21\xfc\xd0\x5f\x09\x42\x38\x35\x6b\xe3\xc1\xd3\x60\xd0\x28\x2c\xca\x2c\xfb\x88\x7f\x95\xa8\xf4\x65\x81\x39\x26\x01\x3e\x62\xae\x3f\x70\xcd\x47\x50\x16\x09\xd7\xe8\xac\x3d\x72\xe9\x0b\xff\xae\x50\xc2\x99\xc1\xd3\xc8\x47\x66\x7b\x22\xdd\x7e\x54\x92\x40\x94\x89\x79\x9a\x87\xe3\xea\xb8\xc4\xc7\x14\x0d\x1a\x51\xe6\x9a\x0e\xc7\x22\x9f\xa5\xf3\xa8\xb3\x5c\xcb\x16\xf2\xa2\x5c\x4e\xad\x8d\xd6\x40\x6e\x97\x6a\x91\x25\x2a\xc5\xe7\x38\x1e\xd0\xef\x74\x06\xc1\xd0\x87\x0b\xf5\x36\x29\x60\x3f\xae\x50\x89\x25\xc2\x4a\xc8\x87\x21\x5c\x88\x15\x7c\x2e\x95\x06\x95\x6a\x98\xf2\xf8\x01\x78\x9e\xc0\x8a\xd3\xaf\x99\x90\xf0\x49\xf2\xc7\x54\x81\x16\x50\x70\xa5\xec\xde\x3d\x83\xc3\x1e\xfa\x43\x60\xf7\x20\xf4\x02\xa5\x15\x75\x9b\xb0\x16\xa5\x24\x5a\x09\x46\xb7\xf9\x6d\xce\x2c\xb4\x16\xc9\x21\x41\xb9\xcd\x0f\x0e\x0e\xe0\xa3\x13\x8f\xc5\x72\x49\xfa\x95\x15\xed\x4b\x1e\x01\x8f\x63\x2c\xf4\x29\xdc\x17\x72\x52\x19\xb8\xfc\xf5\x7e\x87\x70\x21\x53\x82\xa5\x34\xd7\xa5\xea\x1c\x71\x4b\xf5\xb1\x27\xc0\x8c\xa2\xe3\xcb\x86\x86\x6b\xe3\x20\x31\x03\xa2\x04\xb3\x34\x43\x05\xc4\x15\xab\x10\x48\x86\xcf\xf9\x20\x47\x4c\x3c\x47\x18\x2d\xf1\x82\xe7\x73\x54\x91\xb3\x6b\x5c\x11\x4b\x24\x65\x3f\x2b\x55\xe2\x39\x51\xa7\x6b\x0d\xea\x7b\x1e\xd5\x60\x6c\xb4\x38\xc1\x6b\x8b\x3c\xb0\x50\x77\x44\xd9\x02\x79\x12\xa9\x05\x1f\x59\x21\x46\x11\x9c\xa4\xf9\x9c\x8d\xf6\x9d\x29\x65\x56\x89\x5f\xd1\x32\x54\xcb\x35\x72\x13\x07\xa4\x02\xb6\xd2\x85\x02\x89\x2c\xab\xad\xd5\x3e\x66\xf4\xdb\xe2\x56\xfc\x11\x8d\xc1\x86\x96\x39\x74\x5a\xa9\xac\x84\x27\xb1\xd1\xc6\x46\xf0\xcb\xf5\xe5\x45\x44\x09\x49\x5b\xe9\x6c\x1d\x74\x8c\x85\x2f\x56\x87\xc9\x64\xba\xde\xd4\x76\x73\x67\x54\x90\xd7\xb7\xa6\x7a\xed\xfd\xc6\x43\x5e\x8e\x6f\x4b\xbc\xd4\x5c\x59\x2f\xfd\x14\xf9\x1a\xe5\x05\x5f\x62\xbf\x0e\xb8\x9d\x5e\xf2\x4f\x45\xb2\xee\xe8\x8c\x1d\x86\xc8\x6c\x44\x84\x7b\x19\x34\xb2\xf1\x32\xb1\xa9\x33\x89\x90\xc7\x8b\xc0\x4a\xa8\x22\x4b\x75\x40\xf9\xc3\xc2\x11\x34\x9c\x82\x3a\x6a\xaa\x88\x36\x75\xa0\x5a\x8a\x52\x42\xf1\xf7\xe5\x2c\xf0\xee\x29\x84\xb3\xb3\x33\x38\xa9\xa5\xc1\x58\x22\x50\x93\x88\x22\x5e\xa3\x0c\xaa\x55\x63\x79\xc9\x8b\x46\x93\x2a\xa7\xce\xb3\xc1\xdb\x93\xb0\x46\x02\x5d\x20\x05\x97\xba\xd5\x6b\xbe\xaa\x3e\x9b\x8d\x8a\x1f\x95\xba\x22\xe3\x31\x06\xc7\x7f\xbe\x3f\x1e\x01\x63\xe1\xb8\x91\x7f\x0a\x47\xcd\xdf\xad\x56\xc2\xb7\x55\xe9\x70\x68\x7d\xd4\x1c\xae\xfe\x0a\xab\x8a\x03\xa6\xb6\x2a\x91\xa1\xb9\x84\x80\x19\x96\x26\x9e\xe9\xff\xe8\xb3\x48\x73\x0b\xbe\x95\x55\xab\x54\x93\x9b\x69\xf7\xe6\xe4\xae\xdb\x32\x7c\xe3\xb1\x69\x2b\x4c\x3c\xb0\xd3\x81\x07\xc8\xc5\xcc\x07\xd4\x3c\xcd\x14\xf9\x72\x8e\xfa\xaa\x0d\xb4\x6a\xbd\x09\x60\x8f\xf0\x9e\x96\xd2\xe8\xeb\x77\x11\xff\x64\x27\x5f\xae\xb5\x3d\x2a\x78\xf2\xc2\xf4\x0b\xe1\xeb\xd7\xad\x0d\x88\xf8\x5f\xbb\xbb\xde\x65\x31\xf9\x69\xfd\x72\x73\x2e\x3d\xad\x35\x76\x73\xc7\xc6\x7d\xd7\xf5\x7b\xa2\x4d\x63\x0a\x19\x72\x7e\x9f\xe0\x1e\x3c\x5b\x0f\x3a\x9c\x61\xc7\xa4\xc9\x0f\x3f\x71\x29\x1b\x7a\x37\xd0\x0d\xb7\x67\x6a\x36\x3b\xe7\x79\x53\x39\xc5\xca\xd5\x98\xba\xa2\xb2\x0e\xe0\x3a\x74\xfd\xb5\xa7\x3e\xb4\x16\x79\x93\xbd\x2d\xda\x10\xde\xc1\xd1\xdb\x3e\xbe\xe3\x63\xe0\x19\x61\xa4\xea\x52\x9f\x86\xe9\x9a\x1a\x10\xf5\x70\x13\x3d\xaf\x20\xf3\xde\xe4\x88\xe7\x1d\x53\xf0\xfb\xba\x87\xaf\x64\xe5\x31\x2a\x4a\xb5\xf0\xe9\x8c\x37\xc5\xdc\x5d\x1f\x1d\x6d\xdc\x59\x37\x4c\xde\xf9\x25\xcc\x67\xe6\x77\xcc\xf6\x6b\xd3\xa9\xdb\x2e\xdb\xaf\xd7\x38\xb7\x1d\x6d\xba\xa6\x77\xea\xbf\xf5\x4f\xdf\xbc\xdf\x49\xdb\xaf\xe3\xa2\xce\xe4\xf2\x9d\x68\xab\x92\x46\x2c\xb5\x09\xe8\xf5\xb4\x13\x91\xe3\xb7\xf1\x7a\x2e\x2a\xdb\x59\xb1\xc8\x50\x6f\x44\x60\x27\xda\xbe\xf3\xfc\xf1\x1a\xb5\x3b\xe6\x90\x36\xfe\x43\xbf\x12\x4d\x89\xf2\xc3\xb8\xd7\x5a\xdc\xa4\x4a\xed\xa5\xb5\xfc\x7f\xa1\xff\xc6\x42\xef\x3d\x90\xcc\x0b\xe8\x8f\x2a\x2b\xab\x68\x9d\x49\xb1\xdc\x31\xd1\xbb\x14\xbd\xaf\x1f\x30\xad\xc6\x5d\xaf\x18\x5b\x6f\xdb\xc7\x8e\xfb\xaa\xc9\xad\x05\xe8\x8f\x4a\xb5\xcd\x7e\x0d\xeb\x3f\x69\x7c\x7c\x9d\x90\xef\x52\x7d\xf1\xab\x62\x4b\xe8\xb9\xc1\xc9\xfc\xfb\xe4\xc6\x65\x6a\x27\x57\x52\x98\xa2\x00\x0b\x21\x1e\x80\x5e\x3f\x7c\x60\x2a\xb0\x1d\x5c\x3f\xad\x0b\xd7\x34\x99\xff\xa2\x60\xe6\xfd\xdd\x0e\xb6\xdc\xd1\xb4\x62\xc2\xbe\xa9\x99\x63\xba\xe7\xad\x6d\x8c\xbb\xfa\xb6\xc5\x96\x9d\xbe\x27\xd5\xbc\xbc\xc7\x98\x73\x44\xd2\x93\x70\xb3\xbb\x8f\x77\x03\xcd\xe6\x73\x60\x1f\x9c\x17\x52\x57\xeb\x3c\x5e\x48\x91\xa7\xff\xe0\xf3\xfc\x47\xa0\x65\x89\xf6\x0a\xfe\x0d\x00\x00\xff\xff\xc6\xa3\xe5\x73\xec\x10\x00\x00")

func pr_review_peer_js_bytes() ([]byte, error) {
	return bindata_read(
		_pr_review_peer_js,
		"pr_review_peer.js",
	)
}

func pr_review_peer_js() (*asset, error) {
	bytes, err := pr_review_peer_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "pr_review_peer.js", size: 4332, mode: os.FileMode(420), modTime: time.Unix(1441955725, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pr_review.js": pr_review_js,
	"pr_review_peer.js": pr_review_peer_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"pr_review.js": &_bintree_t{pr_review_js, map[string]*_bintree_t{
	}},
	"pr_review_peer.js": &_bintree_t{pr_review_peer_js, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

