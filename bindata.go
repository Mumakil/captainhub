package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _pr_review_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x5b\x73\xdb\xba\x11\x7e\xf7\xaf\x80\x4f\x66\x0e\xa9\x1c\x85\xb6\xf3\x68\x8d\x7b\x99\x93\x66\xa6\x97\xc4\x9e\x38\x99\x3e\x28\x1a\x85\x16\x21\x8b\xb1\x44\xa8\x04\x69\x55\x4d\xf4\xdf\xbb\x8b\x3b\x40\xe8\xe2\xd8\x6d\xd3\x36\x7c\x88\x25\x62\xef\xd8\xfd\x16\x58\x65\xda\x56\x93\xa6\x64\x15\xb9\xa5\xcd\x3b\x7a\x5f\xd2\x15\xad\xf9\x6b\x56\xbf\x2e\xe7\x34\x9d\xc2\x3f\xbc\x4f\x96\xed\x7c\xfe\x8e\xfe\xad\xa5\xbc\xf9\xc0\x69\x0d\x2f\x6a\x3a\xa5\x75\x4d\x0b\xc3\xd1\x23\x5f\x8e\x08\x99\xb0\x8a\xb3\x39\xcd\xe6\xec\x36\x4d\x5e\x97\x55\x51\x56\xb7\xa4\xd6\x34\xe4\xa6\x6d\x48\x79\x5b\xb1\x1a\x5f\x27\xe4\x97\x50\x70\x6f\x70\x04\x42\xee\xf3\xda\xf0\xa0\x15\x9c\x5c\x90\x2f\x9b\x81\x5a\x41\x93\x8c\x56\xb5\x02\x4b\xe3\x8c\xe6\x93\x59\xda\x35\xac\x4f\x8c\x87\xda\x1d\x2d\x5c\xda\x6c\x78\xd5\xaa\x4f\xae\x69\x88\xaf\x78\x88\xdf\x46\xa0\x3e\xf6\xf6\xeb\x57\x32\x1c\x0d\xb6\xb3\x65\xcb\x96\xcf\x52\x63\x85\xa4\xdc\x88\xbf\x9b\x9e\xeb\xcd\x4e\x8b\xdc\x30\x61\x20\xba\xae\x0b\x6d\x19\xfe\x53\xe5\x0b\x6b\x97\xe0\x2e\xa7\xc4\x58\xc0\x33\xa0\xb8\x6d\x66\xe4\xe2\xe2\x82\x9c\x5a\x8f\x51\xc3\x32\x6f\x1a\x5a\x57\x20\x7f\x0c\x92\xaa\x22\x85\x2d\x9e\x96\xb7\x99\x7a\xdf\xb1\xee\x57\x58\xb6\x12\x3c\x19\x5c\x85\x0b\x49\x34\xff\xc0\x23\x6c\x21\x07\xd0\x54\x8f\xd2\x58\xa9\x2c\xd7\xc4\x8b\xbc\x99\xcc\xac\x5d\x5a\x49\xc6\x97\xf3\xb2\x49\x93\x7e\xd2\x73\x6d\x53\xcb\xae\x69\x84\x9c\x9c\xb8\x09\xab\x48\xfa\xc4\x0b\x5b\x6f\xe0\x30\xd4\xb4\x69\x21\x18\x42\x35\xa6\xe6\x55\xde\xcc\xf6\xf3\xa9\x4d\xd5\x3a\x89\xde\x20\x32\x65\x32\x9f\xc9\x24\xaf\x1a\x72\x43\x49\x33\xa3\x84\x03\x33\xc9\xb9\xf8\x8c\xf5\x01\x4a\x45\x81\x10\x4e\xab\x82\xd6\x46\x10\xee\xa0\x8c\xc1\xcf\x3f\x93\xd4\x84\x2e\x83\x60\xd0\xbf\x5f\x4e\xd3\xb0\xb6\xc4\xee\xbe\x38\xc3\x2c\xb0\xc4\x6a\xe3\x7f\x43\xce\x7a\x7e\x68\x94\xa7\xe3\x6c\x55\x36\x33\xd6\x36\x56\x41\x07\x0e\x7a\x56\xca\xa9\xe3\xf4\x51\xc7\x79\xb4\xf8\x38\xb2\x11\x52\x97\x66\xdd\x68\x72\x2f\xb9\x25\x57\x24\x19\x30\x15\xf2\x79\x4d\xf3\x62\x2d\xe3\x8a\xd8\x82\x59\x51\x56\xc0\xc1\xa9\xd8\xff\xd4\xd1\xa5\x71\xc1\xbc\x1a\x67\x77\x74\xcd\x53\x0f\x72\x7a\x6a\xd5\x37\x3e\xd4\xe3\x38\xee\xfb\x63\x0d\x0f\x59\xac\x97\x8e\xaf\xa2\x94\xf3\xaa\x60\x0b\x93\x1a\x17\x56\xca\xf0\x0d\x64\x59\x36\x9d\x33\x56\xa7\xe2\xa3\x24\x4d\x7b\xe4\x39\x09\x4b\xb8\xa7\xeb\xdb\xf3\x66\xe8\x0b\x1f\x39\xd2\xe3\xeb\x0e\x82\xed\x24\x94\x48\xd6\xcd\xfb\x4d\x1f\xd2\xb7\xe4\x32\x7a\x2a\x95\x3c\x41\x83\x23\x70\xdd\x6d\x3d\xf8\xf6\x7a\x96\xbf\xc9\x97\x12\xf5\x64\x3c\x35\xe0\xcb\x15\xd3\x07\x0e\x81\x47\xcb\x16\xc2\xa0\xc4\x96\x8c\xcf\x72\x8d\xb8\xc6\x46\xcb\xe4\x1b\xe8\x64\xfc\xe5\x92\x56\xb4\x48\xe9\x3d\xad\x9a\x57\x79\x93\x5b\x43\x83\xb2\x00\x3d\x86\x28\xc3\xb5\xb1\x2a\xe4\x0c\x4b\x09\x11\xa7\xac\x4c\xbf\x9b\xaa\x3e\x07\x91\xb8\xb2\x62\x44\xa8\xac\xaa\xac\x6a\x17\x37\xaa\x61\xc4\x9a\xe4\x43\x3a\xf8\x97\x4d\x6f\x10\x0b\x70\x6c\x2b\x84\x95\x98\xff\xd1\x4a\x89\x14\x81\x80\x67\xca\x79\x7e\x4b\x41\x64\xf2\xfb\x15\xe5\x0c\x40\x6d\xc5\xea\xbb\x63\xf2\x96\xad\xc8\xe7\x16\xf1\xac\x04\xcc\xcb\x27\x77\x04\x72\x8a\xac\x72\xf8\x86\x78\xf8\xbe\xce\xef\x4b\x40\x3f\x06\x35\xcf\xb9\x58\x63\x00\x85\xb5\x78\x25\x35\x93\x35\x6b\x6b\x38\x6b\x14\x34\xfb\x58\x7d\xac\x12\x99\xa8\x5a\xe1\x2f\xa0\xf1\xd9\x33\x03\xb2\x5c\x10\xb8\x7d\xde\x33\xff\x80\xe3\x81\x2f\xfa\x77\x78\x6e\xd1\x24\xf0\x31\x31\x06\x1c\x7a\x90\xf0\xe5\xbd\x10\x07\x21\xd1\x05\x7c\x61\x1b\xd3\x41\x5c\x72\x43\x60\x70\xd5\x5f\x7d\x66\x5c\x87\x00\x2d\x16\x10\x3e\x1e\x8d\xd0\x0b\x92\x4f\x26\x74\xd9\x9c\x93\x4f\xcb\x7a\xac\xe2\x7a\xf9\xe7\x4f\xdb\x88\x8b\xc2\x38\xed\xb1\xe0\xc2\x50\xf7\x86\xd1\x36\xf6\xc9\x2c\xaf\xe0\x4b\x54\x82\x5a\x1b\xb2\x79\x31\x36\x82\xc8\xb0\xa2\xab\xf1\x5e\xb9\x4b\x38\x49\x42\x22\x35\x79\xd3\x72\x4f\xa8\x7c\xf5\xc9\xee\xfd\x04\x60\xb8\xa1\x7f\xe4\xbc\x85\x53\xc5\x62\x01\x15\xd5\xa9\xab\xbe\x16\xae\x02\x2f\x59\xae\x85\x24\xdd\x40\xb6\x54\xf4\x0c\x30\x1e\x01\x45\x37\x95\x04\x40\x02\xcf\xbe\x49\x7f\x37\x5f\x5b\xcf\x0d\xcb\x95\xdb\xeb\xa5\x1b\xe7\x22\x37\xe2\x55\xf7\x99\x95\x15\x9c\x72\x08\x1c\x73\x8c\x52\xed\x7e\x72\xa4\x7a\x17\xfe\xe1\xf9\x3d\x45\xcd\x1d\x7f\x31\xdf\xce\xb1\xee\xc0\x50\xc5\x38\x9e\xd6\x6c\x01\x42\xff\x74\x7d\xf9\x36\xe3\x0d\x9e\xd3\xcb\xe9\x3a\x50\x2d\x11\x1e\xc3\xba\x5b\xb4\x28\x83\xae\x30\x0b\x37\x28\x69\x0b\xca\x7e\x58\x16\x10\xfb\xa7\x83\xd9\x47\xa0\xac\xb5\xf7\xba\x41\x6d\x73\x96\x17\xfb\x9c\x36\xcc\x90\xd4\x06\x88\x0e\x61\x8f\x6d\x47\x1c\xa8\xed\x8d\xc8\xd5\x61\x2f\x44\x4d\xbd\xee\x74\x42\x58\x15\x9b\xb1\xcc\xe1\x60\x94\x7a\x8e\xc9\x4d\x85\x83\x28\x1c\x28\x53\x04\xab\x8d\x2f\x24\x50\xe2\x88\x09\x5c\x8c\x0b\xd2\x91\xc7\xc3\xfa\x1c\xce\x65\xbb\x31\x12\x7b\xcd\xf6\xfe\x7d\x7c\x61\x3b\xb8\x7f\x3d\x3b\xa4\xdf\xcb\x33\x8d\xe8\xf6\x4d\xdd\x52\x05\xa6\xf6\xea\xf5\xd8\xc6\xea\x86\xe3\xd1\x9d\xf3\x1a\xdb\x26\x9b\x8a\xbb\x80\x0c\x21\x30\x53\xd2\xca\xea\x38\xb8\xfb\xfd\xef\x36\x3f\xb8\x4d\xbd\xa1\x35\x2c\x43\xd8\xb9\x0a\x11\x9e\x29\x5c\x97\xdd\x1d\x39\xc8\xe3\xe0\xc8\xbb\xfd\xd4\x6c\x56\x7e\x0b\xba\xda\x0a\x2f\x1a\x81\xd0\x80\xb0\x47\xce\xa5\x91\x81\x1b\x0f\xec\x4e\x3f\xda\xd3\x7f\xb8\x3d\x75\x36\xc9\xb6\xa7\xb2\xf0\x3a\x52\x89\x7b\xaa\xd4\x6a\xc0\x96\x17\xf9\xb7\x78\xcf\x77\x49\xe5\x6b\xbf\x63\xdd\xb0\x62\xed\x11\x4d\xa4\xe6\x0c\x17\x32\x30\x1a\xae\x81\x9a\x76\xb2\x28\xdc\xe1\x91\xa0\x50\xc3\x10\x28\x1c\x6f\x1a\xa2\x53\xc9\xc1\x5b\xf5\xca\x8c\x0f\x9c\xed\xea\x85\x83\x21\xd0\xe4\x62\xb9\x73\x93\x5e\xc0\xa5\x41\x4b\xe2\xed\x8d\x0c\x6b\x7a\x76\xda\xd3\x96\x90\x70\x2c\x53\x37\x20\x57\x23\x32\x7e\xd5\x5e\x41\x75\xd8\x3b\xba\xe5\x00\xdd\xd1\x49\xc5\xf1\xb1\xf0\x5f\xbf\xdd\x74\x2e\xf0\xde\x6c\x12\x3d\xc0\xe4\x85\xbf\x2a\x55\xc1\x30\x4b\xcb\x57\x25\xb6\x2f\x58\x1d\x9e\x8e\xb2\x86\xfd\x85\x41\x7a\xfd\x9a\x43\xb7\xf3\xc6\x24\x13\x78\x43\x12\x76\x97\x9c\x3b\xf6\x88\x1d\x6e\x6a\xdc\x2d\xb7\xdd\x43\x5e\xec\x6c\xf0\xfa\xc1\xbd\x50\xec\xbe\x9f\x6e\x37\xf6\xb5\x85\xed\xca\x69\xce\x5a\xd2\x20\x60\x2b\xe8\x9c\x36\x34\x80\x29\x9b\x97\xa3\x90\xde\x94\xd2\x0e\x37\xf6\xd7\x65\xc4\xf6\x65\xfd\x8a\x36\x79\x39\xef\x1e\xcb\xd4\x7b\xd0\xd8\xb1\x7e\x6f\x47\x0d\xf2\xd5\x3e\x1e\x68\x1a\xdd\x16\x20\x49\xc2\x5b\xb8\x17\x71\x04\x06\xbb\x8c\x38\x18\x45\x40\x04\x38\xa7\x4e\x42\x3b\xa3\xc0\x5e\x16\x7d\xf2\x93\xbd\xa2\x2d\x71\x23\x8a\xe3\x9f\x3a\xcc\x1b\x42\xe7\x90\x5e\x7b\x7c\xe8\xac\x12\x12\x71\x2b\x42\xd5\xe9\x01\x71\x11\x4e\x0b\xf0\xb8\x1f\xdd\x0e\x7c\x5b\xfc\xd6\xe0\x3e\xdd\xb8\xf8\x69\xe4\x1f\x35\x5d\x32\xfd\xe9\x06\xe2\x75\x37\x08\x8a\x16\xee\xad\x5e\xd5\x62\x4a\x61\xb9\x9f\x8d\xc2\xb4\xc1\x2c\x85\xcb\xa8\x2e\xae\x61\x50\x1b\x8f\x2c\xf7\x9d\x05\x1f\x2f\xf9\x07\x14\x7d\x87\x53\xbb\xf9\xb2\xe3\xa6\x7c\x1c\x47\x0d\xbc\xc7\x6e\x4b\x50\x94\xbb\xce\x78\xee\x13\x9d\x99\x4b\x1b\x76\x8d\xda\xf5\xb3\x89\xbc\xdd\x74\x1d\xf3\x91\x4c\xee\xe4\x48\x78\x21\xcf\x65\xf1\x75\x31\xe7\xec\x1b\xaf\x23\xaa\x9e\x06\xf8\x62\xdb\x70\xe8\x95\xc0\x7f\xbe\x19\x33\xf1\xd9\x87\x1c\x87\x62\xc7\x1e\xf4\x38\x00\x3f\x9e\x1a\x41\x76\x63\x48\x04\x45\x5c\x80\x50\xdf\xb7\x00\x89\x4f\xb9\x15\x56\x4e\x9e\x07\x08\x53\xd3\x05\xbb\xa7\x0f\x00\x99\xef\x16\x45\x42\xc6\xe8\xe1\x41\x95\xd4\xbf\xa7\x82\x1e\xb9\x57\xcf\x4f\x82\xbd\x92\x33\xc8\x2d\x7b\x85\xbf\xaf\xc5\x31\xf3\xbb\xde\xb5\x28\xe8\x44\xf7\x2c\x8e\x34\x5d\xd2\x97\x7b\x10\xf5\xa5\x45\xd4\xb8\x9e\x18\x26\x3d\x2c\x99\xfe\x55\x80\xfc\xc4\x60\xa0\x11\x80\x01\x4c\x3a\x59\x25\x86\x78\xf9\x1d\xfd\x03\x5e\xe7\x70\x54\x27\xef\x85\xe7\x04\xcf\x84\xee\xcd\xfb\x7c\x3b\xae\x6f\xac\x96\xee\xaf\x52\x46\xb8\xe3\x62\xd4\x34\x39\x1f\xff\xef\xbb\xb7\x04\xf3\xb1\xbf\x4a\xab\xf4\xef\x42\x68\x95\x33\x13\xb3\xcf\x37\x0f\xbf\xec\x73\xe8\x18\xac\xa3\x74\xef\x40\x2c\xae\x63\xeb\x68\xcc\x3e\xb1\xa3\x51\x74\x5c\xe6\xb3\x04\xaf\xb6\x5c\x51\x82\x69\x93\x7d\xbe\xfd\xf2\xf5\x88\xb3\xcb\x8f\x7b\x9b\x7e\xfe\x4f\xef\x6d\xfa\xff\x4b\xc8\x14\x06\x59\x27\x27\xe4\xaa\x66\xb8\xe5\x64\xc6\xd8\x1d\x29\x00\x2e\x8e\x30\x37\xc5\xac\xec\xfd\x7a\x49\x45\x22\x26\x2e\xac\x26\xd8\xca\xed\x2c\x2d\x97\x05\x29\xc8\x98\x00\xd0\x44\xa6\xed\xae\x9f\xfb\x41\xb9\xdc\xe0\x88\x2e\x31\xec\x1b\xab\x11\xdd\x0e\x65\x32\x13\x8a\x80\x42\x8e\x0a\x5d\x7b\x3b\xd6\x74\xe7\x8e\xbb\xcc\x39\xd0\x75\xbe\xae\x26\xb3\x9a\x55\xe5\x3f\x68\xd7\xff\xee\x0f\x71\x18\xfd\x7f\x06\x00\x00\xff\xff\xf2\xad\xa1\x84\x35\x28\x00\x00")

func pr_review_js_bytes() ([]byte, error) {
	return bindata_read(
		_pr_review_js,
		"pr_review.js",
	)
}

func pr_review_js() (*asset, error) {
	bytes, err := pr_review_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "pr_review.js", size: 10293, mode: os.FileMode(420), modTime: time.Unix(1441705361, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pr_review.js": pr_review_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"pr_review.js": &_bintree_t{pr_review_js, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

