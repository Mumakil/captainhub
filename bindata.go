package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _pr_review_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x59\x73\xe3\xc6\x11\x7e\xd7\xaf\x18\x79\xab\x0c\x72\x97\x0b\x4a\xfb\x28\x46\x89\x53\x76\x5c\x95\x63\x8f\xb2\xec\xca\x83\xcc\x50\x10\x31\x14\x61\x91\x18\x66\x06\x10\xa3\xac\xf9\xdf\xd3\x8d\xb9\x0f\x42\xd4\x4a\x49\xec\x64\xf1\x20\x89\x98\xe9\x73\xba\xbf\xee\x69\x6a\xd1\xd6\xf3\xa6\x62\x35\xb9\xa1\xcd\x77\xf4\xae\xa2\x5b\xca\xc5\xb7\x8c\x7f\x5b\xad\xe8\x60\x01\x3f\xc4\x88\x6c\xda\xd5\xea\x3b\xfa\xf7\x96\x8a\xe6\x07\x41\x39\xbc\xe0\x74\x41\x39\xa7\xa5\xa1\x18\x92\x8f\x47\x84\xdc\x15\x9c\x70\xf5\x0a\x19\x08\x72\x4e\x3e\xee\x26\x6a\x05\xb9\x19\x02\xb5\x02\x4b\xb3\x9c\x16\xf3\xe5\x20\xe6\x39\x22\x46\x39\xad\x89\x66\x2e\xc5\x19\x5a\xb5\xea\x6f\xd7\x7b\x88\x2f\xf8\x12\x3f\x4d\x41\x7c\xea\xed\xcf\x3f\x93\xcb\xe9\x64\x3f\x59\xbe\x69\xc5\x72\x60\xb4\x90\x3b\x77\xdd\x6f\xfc\x79\x74\x98\x46\xae\x9b\xd0\x11\xb1\xe9\x9d\xb4\x1c\x7f\xd4\xc5\xda\xd7\xab\x5a\x10\xa3\x80\xc8\x61\xc3\x4d\xb3\x24\xbf\x25\x27\xd6\x5c\xa5\x02\x4f\xf9\x31\x74\x20\x3e\xde\x89\x5d\xea\x4f\xe8\xa2\x7d\x2b\x9e\x9b\xf6\x32\x48\x3a\x4b\xbb\x0b\x7e\x13\xba\x12\xd4\xe8\x81\x4e\xd9\x14\x4d\x43\x79\x0d\x92\x67\x60\x7c\x5d\x0e\xe6\xac\x5e\x54\x37\xb9\x7a\x1f\x39\xf4\x6b\x58\x76\x2d\x71\x78\x08\x75\xc2\xb8\x45\xd3\x4f\xbc\x8d\x2d\x84\x32\x7a\xd7\xdb\x69\x9c\xd6\x1d\xa6\xdd\xbc\x2e\x9a\xf9\xd2\xea\xa5\x85\xe4\x62\xb3\xaa\x9a\x41\x36\xca\x86\xae\x6e\x6a\xd9\x55\x8d\x90\xf1\x18\xac\x11\x0c\xce\x75\xc5\x6e\xf4\x96\x11\xf1\x4e\x7a\x38\x71\x08\x38\x6d\x5a\x70\x46\x27\x1a\x5d\xfb\xa1\x68\x96\x0f\xd3\xa9\x38\xd4\x32\x89\x8e\x29\xb2\x60\x32\x05\xc9\xbc\xa8\x1b\x72\x4d\x49\xb3\xa4\x44\x00\x31\x29\x44\xf7\x37\xa6\x39\x08\xed\xf2\x9c\x08\x5a\x97\x94\x1b\x46\x18\x75\xd2\x07\x5f\x7e\x49\x06\xc6\x75\x39\x38\x83\xfe\xe3\xfd\x62\x10\x40\xc4\x90\x9c\x9f\x9f\x93\xd7\xa7\x18\x29\x76\xb3\x09\xd6\xd3\xa1\xef\x1a\x65\xe9\x2c\xdf\x56\xcd\x92\xb5\x8d\x15\x10\x81\xcf\xd0\x09\x79\xc7\xe8\xa3\xc8\x78\xd4\xf8\x38\x71\x10\x52\x96\x09\x46\xbd\xdd\xcd\x47\xab\x87\xa2\xcf\x9d\x5c\x0a\xf5\x31\x02\xdd\xac\xfe\x9a\xb5\xe0\xe3\x73\x12\xd2\xcb\xf7\xe0\x94\x53\x8f\xac\x58\x71\x5a\x94\xf7\xf2\xa8\xaa\xfa\xa6\xd3\xa1\xaa\x81\x54\xd0\x2e\xa4\x06\x51\xae\x89\x91\x79\x35\xcb\x6f\xe9\xbd\x18\x78\x59\x38\x54\xab\xbe\x3f\x42\x39\x49\xf8\x50\x01\xcf\xb8\x01\x3f\x6d\x8d\x6f\xc5\xeb\x48\x6d\xc5\x6e\xe2\x47\x4d\xc4\x28\x90\x26\xe5\xd5\xac\xf1\xcd\x2f\xab\x05\x80\x22\xad\xe7\xd4\x45\xb2\x50\xa4\x97\x30\x18\xe1\x03\x64\x56\x01\x87\x93\x09\xfc\xfa\x4d\xc2\x0e\x08\x60\x57\x98\x1b\x4f\xa4\x7a\xf5\xca\x57\x4d\x1d\x6b\x51\x97\x6c\x6d\x32\xe9\xdc\x67\x80\x18\x00\x5a\xbe\x85\xf4\xcc\x17\x2b\xc6\xb8\xfc\x53\x12\x0d\x86\xe4\x65\x4a\x1e\xe0\xc5\xe9\xf0\xf2\x64\x3a\xf1\x84\x45\x1e\x95\x10\xea\x89\xf7\x4c\xde\x45\x29\xe0\x87\x72\xc8\x30\x8a\xfb\x94\xcf\x78\xe8\xaf\x54\xbd\x89\x9c\x95\x74\x94\xa5\x7c\xd8\x4b\xa1\x94\xd8\x45\x41\xa1\xf1\x84\x25\xea\x55\xb0\xde\x5f\xb5\xfc\xcd\xd2\xf1\x69\x8c\xdd\xb9\x29\xa5\x33\x9c\x6d\xeb\xbe\xaa\xea\x6d\x8b\x55\x0d\x96\x7b\x35\xf5\xf7\xf6\x2b\xaa\x7f\xee\x46\x80\xf0\x95\x90\x68\xa0\xd0\xd6\xe3\x3a\x39\x02\xab\xdc\x5e\x10\xdf\x5e\x2c\x8b\xb7\xc5\x46\xf6\x32\xb6\xc1\x5b\x98\x15\xd3\xdd\x1d\xd2\xf4\x58\xb2\xb0\xb9\x91\xe5\x37\x17\xcb\x42\xf7\x51\x46\x47\x4b\xe4\x2b\xe8\x80\xf0\xfb\x0d\xad\x69\x39\xa0\x77\xb4\x6e\xbe\x29\x9a\xc2\x2a\x1a\x20\x35\xc8\x31\x9b\x72\x5c\x9b\xa9\x5a\x97\x63\xb5\xc1\xa2\x5c\xd5\x9d\x7f\xb4\x91\x98\x3f\xe0\x89\x0f\x96\x4d\xe7\x2a\x2b\x2a\xaf\xdb\xf5\xb5\x4a\xc8\x54\xeb\xfb\x98\x96\xfa\xe3\x6e\x38\x49\x39\x38\x75\x14\x9d\x96\x18\x7c\x49\xe4\x4f\x80\x7a\x07\xe8\x54\x88\xe2\x86\x02\xcb\xec\xf7\x5b\x2a\x18\xd4\xfd\x2d\xe3\xb7\xc7\xe4\x1d\xdb\x92\x9f\x5a\x2c\xf9\x15\xb4\x05\xc5\xfc\x96\x40\x2a\x90\x6d\x01\x9f\x10\x1c\xbe\xe7\xc5\x5d\x05\x0d\x02\x83\x62\x26\x44\xb7\xc6\xa0\x5b\xe0\xdd\x2b\x29\x99\xdc\xb3\x96\x93\x39\x2b\x69\xfe\x63\xfd\x63\x9d\xc9\xf8\xd3\x02\x5f\x81\xc4\x17\x2f\x4c\x1f\x22\xba\x0d\x6e\xf7\xee\xa9\x7f\x40\xd3\xef\xb3\xfe\x2a\x23\xaf\xcc\x16\xf8\x33\x33\x0a\x1c\x7a\x3d\xf0\xf9\xbd\x26\x57\xc8\xb1\xeb\x94\x80\xdb\x95\xc3\x6e\x67\x32\xcb\x25\x30\x1b\x4c\xf3\xe1\xaf\xbe\x30\xc6\x83\x8b\xd6\x6b\x70\xa0\x48\xfa\x08\xea\xe9\x7c\x4e\x37\xcd\x19\xb9\xda\xf0\x99\xf2\xec\xfb\x3f\x5f\xed\xdb\x5c\x96\xc6\x6c\x8f\x04\x17\x2e\x75\x03\x35\x25\x1a\x2f\xa6\xfb\x18\xcd\x97\x45\x0d\x1f\x92\xbc\xd4\xda\x25\x5b\x95\x33\x87\x65\x4d\xb7\xf6\xe3\x3e\xbe\x1b\x0e\x1d\x0c\x11\x4d\xd1\xb4\xc2\x63\x2a\x5f\x5d\xd9\x38\x98\x43\x8d\x6a\xe8\x1f\x85\x68\xa1\x09\x5f\xaf\x21\xbb\xa2\x1c\x1b\x69\xe6\xea\x08\x24\xc9\x45\xc7\x49\x37\x47\x7b\xb2\x7b\x09\x05\x10\xc1\x45\x37\x4c\x19\x00\x46\x09\xa5\x30\x1b\xf5\xd3\xb5\x7c\x65\x48\x3e\xb8\xad\xb1\x34\xe3\x8c\x60\x98\xa4\x33\xf0\x27\x56\xd5\x70\x29\x20\x70\x2b\x30\x42\xb5\xf9\x59\xf7\x46\x99\x21\x8a\x3b\x8a\x92\x23\x7b\x31\xf4\xce\x30\x07\x41\x51\x45\x38\x5b\x70\xb6\x06\xa6\x7f\xba\x78\xff\x2e\x17\x0d\x78\xf7\xa6\x5a\xdc\x07\xa2\xe5\x55\x14\xdd\xda\xcf\xba\x4b\x89\x98\x99\x85\x1e\xe4\xb4\x07\x71\x7f\xd8\x94\xe0\xfb\xe7\x83\xdc\x27\x20\xae\xd5\xf7\xa2\x41\x69\x2b\x56\x94\x0f\x19\x6d\x88\x21\xa8\x0d\x28\x1d\x42\x9e\x3a\x8e\x34\x68\xdb\x99\x87\x2b\xc3\x8e\x3c\x1a\x7e\x1f\x55\x45\x58\xed\x0e\x63\x53\x40\xd3\x3f\xf0\x0c\x93\x87\x0a\xf7\x36\xb8\x7f\x0d\x10\xb8\x76\x3e\x93\x40\x88\xc3\x26\x30\x31\xcd\x48\x7b\x1e\xef\xb6\x2b\x80\x8a\x7e\xbc\xc4\xba\xb3\xbf\x96\x1f\x9f\xdb\x6a\xee\x0f\x60\x0e\xa9\xfd\xb2\xd9\xe9\x2a\x7f\xc3\x5b\x3a\xb1\xfd\xcb\xd0\x54\xe6\xa7\x14\x59\xd7\x1d\x4f\xae\xa2\x17\x58\x42\xd9\xa2\xbb\x3a\x4b\x17\x02\x31\x25\xad\xcc\x8e\x83\x2b\xe1\xff\x72\x21\x1c\x8f\xc9\x5b\xca\x61\x19\x1c\x2f\x94\x93\xb0\xc3\x70\x8d\x76\xcf\xe4\x20\x9b\x1f\x3f\xae\xfa\x1d\xc8\x6a\x6b\xbc\x46\x07\x4c\x83\x8d\x43\x72\x26\x95\x0c\xcc\x78\x64\x7d\xfa\x5c\xa0\xfe\xcb\x05\x2a\x3a\x24\x5b\xa0\xaa\xd2\xab\x49\x15\x9e\xa9\x12\xab\x21\x5b\x4e\xbe\xde\xe1\x60\xcc\xdd\x2a\x5f\xfb\x35\xeb\x9a\x95\xf7\xde\xa6\xb9\x94\x9c\xe3\x42\x0e\x4a\xc3\xc5\x56\xef\x9d\xaf\x4b\x77\x40\xdc\xed\x50\xd3\x43\x48\x1c\x6f\x7c\xa8\x43\xc9\x41\x5c\xf5\xca\xcc\xdb\x9c\xe3\x92\xb3\x36\x67\xa4\x02\x92\x5c\x34\x77\xe6\x44\x6b\xb8\x42\x68\x4e\xa2\xbd\x96\x6e\x1d\x9c\x9e\x0c\xb5\x26\x24\x9c\x63\xf2\x26\x39\xa9\xc3\x05\x65\x5f\xce\xe9\x66\x55\xc0\xcd\x7e\xfc\xb7\xaf\xc6\x10\x51\x99\x37\x8b\xb4\x53\x2a\xcb\x15\xf4\x4b\x32\x3d\x3e\xee\x7c\x64\x88\xa3\x11\x96\x3b\x3f\xcd\xd0\x4a\x0c\x70\xf8\xad\xc2\x19\x94\xb7\x7b\xc5\xb6\xc2\x22\x07\xab\x97\x27\xd3\xbc\x61\x7f\x61\x38\xd0\x28\xa0\x26\x7a\xb3\xc7\x39\xbc\x21\x19\xbb\xcd\xce\x82\x79\x14\xf8\x06\x4f\xd4\x6d\x0a\x20\x76\x7a\xdb\x00\xfd\xe0\x79\x29\xf2\x70\x98\x64\x6b\xb6\x2f\x2d\x2c\x6a\x4e\x09\xd7\x9c\x26\x01\x59\x49\x57\xb4\xa1\x01\x94\xd9\xd8\x9d\x86\xfb\x4d\xba\xf5\x98\xf1\x70\xee\x26\x74\xdf\xf0\x6f\x68\x53\x54\xab\xb8\x79\x53\xef\x41\x62\xa4\xfd\x83\x75\x37\x88\x69\xfb\x78\xc0\x6a\x64\x5b\x10\x25\x99\x68\xe1\x1e\x25\x10\x3c\xec\x32\x62\x65\x12\x25\x49\xc9\x6a\x8a\x48\xe8\x24\x54\xa8\x6c\xb2\x02\x54\xe5\x88\x7c\x61\xef\x75\x1b\x3c\x8d\xf2\xf8\x8b\x88\x38\xf8\x9a\x63\x8f\x21\xd1\x2a\x21\x09\xdb\x12\xbb\xa2\x62\x91\x66\xe1\xd4\x0a\x8f\xfa\xc9\x75\xc3\xd7\xc5\xaf\x21\xee\x13\xfb\xc5\x8f\x25\xbf\x2b\x75\xb7\xe9\xbf\xae\xc1\x5f\xb7\x93\x20\x73\xe1\xb2\xeb\xa5\x2e\xc6\x15\xe6\xfc\xe9\x34\x35\xc7\x85\x7b\xab\xce\xb0\xcb\x20\x41\x9e\x98\xf3\xbd\x59\x9f\xce\xfb\x47\x64\x7e\x44\xa9\xcd\x7c\x13\x99\x29\x1f\xc7\xd0\x19\x82\xbe\x29\x06\xa9\xdb\x15\xa4\x67\x5f\x4f\xe8\x3e\xc9\xaf\xa4\xa4\x22\x7d\xdf\x64\xe9\x67\xf7\x58\x41\x1e\xcb\x34\xc7\xf8\xed\x2e\xf6\x97\x8f\x92\x32\x40\xa6\x5d\x91\x94\x7d\x61\x7a\xbd\x1b\xc3\x8e\x8c\x33\x13\xa2\x9e\x07\x54\x43\xae\x9f\x8c\xaa\xff\xf7\xa0\xb2\x17\xa9\xe5\xed\x48\x1e\x2c\x9e\x14\x4e\xc9\x68\x19\x43\xfd\x3e\x18\x72\x81\xa8\x07\x94\xc6\x2f\x03\x7c\xe2\x74\xcd\xee\xe8\x23\x20\xea\x17\x8b\x41\x21\x61\xb2\xff\x50\x99\xf3\x9f\x49\x94\x27\x9e\xd5\xcb\x71\x70\x56\x72\xd8\xb9\xe7\xac\xf0\x6b\xb0\x34\xe2\xfe\xa2\x4f\x2d\x59\x39\x92\x67\x96\x46\xe2\x78\xeb\x9b\x07\x80\xf3\x8d\x05\xce\xb4\x9c\x14\x8c\x3f\x2e\x98\xfe\x5d\xb8\x7b\x38\x7a\xc8\x50\x29\xf1\x2b\x10\xb3\xf4\x26\x65\xda\xee\x79\x63\x56\x83\x0a\x03\x80\x76\x02\xb5\x1b\x40\x16\xb7\xf4\x0f\x78\x11\xc5\x31\xa3\xbc\xd1\x9e\x11\x54\xde\x9d\x19\x9c\xed\xaf\x25\x3b\x2b\x25\xfe\x76\xcd\x30\x77\x4c\x4c\xaa\x26\x67\xfb\xbf\xbe\xdb\x54\x30\xdb\xfb\xab\xd4\x4a\xdf\x11\x50\x2b\x67\x9e\x67\x9f\x4f\x1e\xdc\xd9\xe7\xd0\x11\x5e\x24\xf4\xc1\x61\x5e\x5a\xc6\x6b\xe2\x4e\xf5\x92\x02\x52\x4d\x55\x72\xd0\xe7\x93\x04\xaf\xf6\xe4\x52\x30\x27\xb3\xcf\xa7\x5f\x09\x9f\xab\x5f\xfa\x7c\x9b\xfc\xd5\x36\x7e\x4f\xbb\x4d\x3a\xff\x28\x21\xa7\x8a\xe3\x31\xf9\xc0\x19\x9e\x3b\x59\x32\x76\x4b\x4a\xc0\x8c\x23\x0c\xd0\x6e\xd4\xf7\xfd\xfd\x86\x76\xd1\x98\xb9\xd8\x9a\x61\x8b\x60\x47\x81\x85\xcc\xca\x6e\x1b\xeb\x50\x34\x93\xb1\xdb\xf7\xbf\x0b\x20\x5c\x1e\x70\x42\x56\x37\xab\x9c\xa9\x09\x63\x8f\x30\x19\x09\x65\xb0\x43\x4e\x3a\x5d\x7d\x23\x6d\xe2\xb1\x69\x9f\x3a\x07\x9a\x2e\xee\xeb\xf9\x92\xb3\xba\xfa\x27\x8d\xed\x8f\xbf\x49\x44\xef\xff\x2b\x00\x00\xff\xff\x0e\xd4\x51\xf5\x93\x2c\x00\x00")

func pr_review_js_bytes() ([]byte, error) {
	return bindata_read(
		_pr_review_js,
		"pr_review.js",
	)
}

func pr_review_js() (*asset, error) {
	bytes, err := pr_review_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "pr_review.js", size: 11411, mode: os.FileMode(420), modTime: time.Unix(1441773148, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pr_review.js": pr_review_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"pr_review.js": &_bintree_t{pr_review_js, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

