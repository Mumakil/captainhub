package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _pr_review_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\xdd\x73\xe3\xb6\x11\x7f\xf7\x5f\x01\xe7\x66\x42\xea\x4e\x47\xdb\xf7\x68\xd5\x6d\x3a\x49\x33\xd3\x8f\xfb\x98\x38\x99\x3e\x38\xae\x4c\x93\x90\xc5\x58\x22\x54\x80\xb4\xea\x5e\xf4\xbf\x77\x17\x20\xbe\x21\x59\x3e\xbb\x6d\xd2\x1e\x1f\x6c\x8b\xd8\x6f\xec\xfe\x16\x58\x79\xd6\xb7\x55\xd7\xb0\x96\xdc\xd0\xee\x3b\x7a\xd7\xd0\x35\xe5\xe2\x5b\xc6\xbf\x6d\x16\x34\x9f\xc1\x0f\x31\x26\xab\x7e\xb1\xf8\x8e\xfe\xbd\xa7\xa2\xfb\x41\x50\x0e\x2f\x38\x9d\x51\xce\x69\x6d\x38\x46\xe4\xe3\x01\x21\x77\x25\x27\x7c\x78\x85\x02\x04\x39\x23\x1f\x37\x93\x61\x05\xa5\x19\x86\x61\x05\x96\xa6\x05\x2d\xab\x79\x1e\xcb\x1c\x13\x63\x9c\xb6\x44\x0b\x57\xea\x0c\xef\xb0\xea\x93\x6b\x1a\xe2\x2b\xbe\xc0\x4f\x97\xa0\x3e\xf5\xf6\xe7\x9f\xc9\xc5\xe5\x64\x3b\x5b\xb1\xea\xc5\x3c\x37\x56\x28\xca\x8d\xfc\x8d\x3f\x0f\xf6\xb3\xc8\x0d\x13\x06\x22\x76\x5d\x6a\x2b\xf0\x47\x5b\x2e\x7d\xbb\x9a\x19\x31\x06\x88\x02\x08\x6e\xba\x39\xf9\x2d\x39\xb6\xee\x0e\x26\xf0\x54\x1c\xc3\x00\xe2\xe3\xed\xd8\x85\xfe\x84\x21\xda\xb6\xe2\x85\x69\xab\x80\x64\xb0\x74\xb8\xe0\x37\xa1\x0b\x41\x8d\x1d\x18\x94\x55\xd9\x75\x94\xb7\xa0\x79\x0a\xce\xb7\x75\x5e\xb1\x76\xd6\xdc\x14\xc3\xfb\x28\xa0\x5f\xc3\xb2\xeb\x89\x23\x43\x0c\x3b\x8c\x24\x9a\x7f\xe2\x11\xf6\x90\xca\x18\x5d\x8f\xd2\x04\xcd\xa7\xd5\xaf\xbf\x66\x7d\xdb\xa5\xe8\xa7\x95\x5c\x81\xc0\x9c\xc8\x34\xb0\xac\xcb\xb2\xab\xe6\xd6\x23\x6d\x5e\x21\x56\x8b\xa6\xcb\xb3\x71\x36\x72\xbd\x1a\x96\x5d\xa7\x08\x39\x3a\x82\x38\x08\x06\x19\xb1\x60\x37\x9a\x64\x4c\xbc\x1c\x19\x4d\x1c\x06\x4e\xbb\x1e\xc2\x28\x55\xe3\xa6\x7c\x28\xbb\xf9\xc3\x7c\x43\x06\x6b\x9d\x44\x67\x23\x99\x31\x55\xbc\xa4\x2a\xc1\xc7\x6b\x4a\xba\x39\x25\x02\x98\x49\x29\xe4\xdf\x08\x10\xa0\x54\x22\x04\x11\xb4\xad\x29\x37\x82\x30\x5f\x55\x0c\xbe\xfc\x92\xe4\x26\xe8\x05\x04\x83\xfe\xe3\xfd\x2c\x0f\xc0\x65\x44\xce\xce\xce\xc8\xeb\x13\x0c\xa5\x25\x36\x69\x7e\x32\xf2\x43\x33\x78\x3a\x2d\xd6\x4d\x37\x67\x7d\x67\x15\x44\xb0\x35\x72\x8a\xc5\x71\xfa\x20\x72\x1e\x2d\x3e\x4c\x6c\x84\xd2\x65\xd2\x58\x93\xbb\x95\x6c\xed\x18\xf8\x0b\xa7\x0a\x43\x7b\x8c\x42\x4c\x93\x72\xc1\x69\x59\xdf\xab\x98\x37\xed\x8d\x14\xd6\xb4\x20\x43\x50\x99\x1b\x79\x54\x6e\x62\x6c\x5e\x4d\x8b\x5b\x7a\x2f\x72\xaf\x10\x47\xc3\xaa\xef\x58\xa8\x27\x89\x20\xbe\x53\x21\x4b\x14\x01\xcc\x8f\x1c\x9d\x68\x80\xfa\x78\x02\xbf\x7e\x43\x42\xff\x55\xe5\x40\x0a\xa4\xb0\x0b\x58\x5e\xbd\x0a\x0b\x99\x97\x6d\xcd\x96\x26\x09\xcf\x1c\x4e\xac\x9d\x8a\xe6\x6f\x21\xad\x8b\xd9\x82\x31\xae\xfe\x54\x1c\xf9\x88\xbc\x8c\xb4\x40\x91\x9d\x8c\x2e\x8e\x1d\xd0\x92\x38\xea\xa9\x08\x33\xcb\x03\x35\x8f\x32\x81\x8d\xc1\x7a\x80\x90\x0f\x88\x53\x48\xb9\xb5\x2e\xc3\x78\xa3\xe9\x3a\xbe\x6c\xdd\xee\x42\x73\x8f\x2c\x36\x3b\x58\xde\x89\xeb\x3e\xed\x2e\x93\x95\xc1\xf8\x73\x33\x06\x7c\x68\x84\x4a\xc1\xa1\x56\x3d\xa9\x93\x03\xf0\xca\x3d\x83\xe0\xdb\xf3\x79\xf9\xb6\x5c\xa9\x1e\x6a\x0f\x16\x33\xb3\x62\x4e\x15\xfb\x34\x5b\xcb\x16\x36\x55\x05\xe3\x85\x98\x97\xba\x7f\x1b\x1b\x2d\x93\x6f\xa0\x53\xc2\xef\x57\xb4\xa5\x75\x4e\xef\x68\xdb\x7d\x53\x76\xa5\x35\x34\xa8\x73\xd0\x63\x88\x0a\x5c\x9b\x0e\x48\x59\x20\x56\x21\xa4\x37\xad\x8c\x8f\x76\x12\x6b\x0e\x22\xf1\xc1\x8a\x91\xa1\xb2\xaa\x8a\xb6\x5f\x5e\x0f\x1d\x35\x75\xe4\x7a\xcc\x51\xee\xe3\x66\x34\x49\x05\x38\xb5\x15\xd2\x4a\x4c\xbe\x24\xdc\x24\x90\x44\xf6\x3f\x2a\x44\x79\x43\x41\x64\xf6\xfb\x35\x15\x0c\xba\xc6\x9a\xf1\xdb\x43\xf2\x8e\xad\xc9\x4f\x3d\x36\x8c\x06\x9a\x4a\x59\xdd\x12\x28\x0a\xb2\x2e\xe1\x13\x02\xca\xf7\xbc\xbc\x6b\xa0\xbd\x30\x80\x12\x21\xe4\x1a\x83\x5e\xc3\xe5\x2b\xa5\x99\xdc\xb3\x9e\x93\x8a\xd5\xb4\xf8\xb1\xfd\xb1\xcd\x54\xfe\x69\x85\xaf\x40\xe3\x8b\x17\xa6\x8b\x09\x49\xe0\x9e\x1a\x3d\xf3\xf7\x38\x6c\xfa\xa2\xbf\xca\xc8\x2b\x43\x02\x7f\x66\xc6\x80\x7d\x8f\xa5\xbe\xbc\xd7\xe4\x0a\x25\xca\x3e\x0b\xd2\xae\x1c\x71\x1b\x53\x59\x2e\x83\x21\x30\xad\xcb\x5f\x7d\x61\x9c\x87\x10\x2d\x97\x10\x40\x91\x8c\xd1\x6b\x52\x56\x15\x5d\x75\xa7\xe4\x6a\xc5\xa7\x43\x64\xdf\xff\xf9\x6a\x1b\x71\x5d\x1b\xb7\x3d\x16\x5c\xb8\xd0\xed\xf7\x92\x68\xbc\xb8\xdc\x26\xa8\x9a\x97\x2d\x7c\x48\xca\x1a\xd6\x2e\xd8\xa2\x9e\x3a\x22\x5b\xba\xb6\x1f\xb7\xc9\x5d\x71\x68\x9b\x44\x74\x65\xd7\x0b\x4f\xa8\x7a\x75\x65\xf3\xa0\x82\xbe\xd6\xd1\x3f\x0a\xd1\xc3\x61\x6e\xb9\x84\xea\x8a\x6a\x6c\xac\x85\x0f\x5b\xa0\x58\xce\xa5\x24\xdd\x91\xb7\x54\xf7\x1c\x9a\x26\x82\x8b\xee\xd2\x19\x00\x46\x0d\xed\x33\x1b\xef\xe6\xeb\xf9\xc2\xb0\x7c\x70\x0f\x56\xca\x8d\x53\x82\x69\x92\xae\xc0\x9f\x58\xd3\xc2\x91\x92\xc0\x99\xd2\x28\xd5\xee\x67\xf2\xcd\xe0\x86\x28\xef\x28\x6a\x8e\xfc\xc5\xd4\x3b\xc5\x1a\x04\x43\x07\xc6\xe9\x8c\xb3\x25\x08\xfd\xd3\xf9\xfb\x77\x85\xe8\x20\xba\x37\xcd\xec\x3e\x50\xad\xae\x40\x18\xd6\xdd\xa2\x65\x49\xc4\xc2\x2c\xf4\xa0\xa4\x2d\x88\xfb\xc3\xaa\x86\xd8\x3f\x1f\xe4\x3e\x01\x71\xad\xbd\xe7\x1d\x6a\x5b\xb0\xb2\x7e\xc8\x69\xc3\x0c\x49\x6d\x40\x69\x1f\xf6\xd4\x76\xa4\x41\xdb\xde\xb5\x5d\x1d\xf6\xaa\xdd\xf1\xfb\xa8\x2b\xc2\xaa\xdc\x8c\x55\x09\x27\xcd\xdc\x73\x4c\x6d\x2a\x9c\xfa\xe1\xf4\x9e\x23\x70\x6d\x7c\x21\x81\x12\x47\x4c\xe0\x62\x5a\x90\x8e\x3c\xde\x8c\x16\x00\x15\xbb\xf1\x12\xfb\xce\xf6\x5e\x7e\x78\x66\xbb\xb9\x7f\xf1\xdf\xa7\xf7\xab\xc3\x8e\xec\xfc\x1d\xef\xe9\xc4\x9e\x5f\x46\xa6\x33\x3f\xa5\xc9\xba\xe1\x78\x72\x17\x3d\xc7\x16\xca\x66\xf2\xe2\xa5\x42\x08\xcc\x94\xf4\xaa\x3a\xf6\xee\x84\xff\xcb\x8d\x10\x2e\xaf\x6f\x29\x87\x65\x08\xbc\x18\x82\x84\x27\x0c\xd7\x69\x77\x4f\xf6\xf2\xf9\xf1\x63\x92\xdf\x81\xae\xbe\xc5\xbb\x5b\x20\x34\x20\x1c\x91\x53\x65\x64\xe0\xc6\x23\xfb\xd3\xe7\x06\xf5\x5f\x6e\x50\xd1\x26\xd9\x06\xd5\xd4\x5e\x4f\x6a\x70\x4f\x07\xb5\x1a\xb2\xd5\xdc\xe4\x1d\x8e\x55\x5c\x52\xf5\xda\xef\x59\xd7\xac\xbe\xf7\x88\x2a\xa5\xb9\xc0\x85\x02\x8c\x86\x4b\xb0\xa6\xad\x96\xb5\x3b\x98\x94\x14\xc3\xec\x09\x0a\xc7\x1b\x3e\xe9\x54\x72\x10\x77\x78\x65\xa6\x35\xce\x76\xa9\x49\x8d\x33\x35\x00\x4d\x2e\x9a\x3b\xc3\x89\x25\x5c\x21\xb4\x24\xd1\x5f\xab\xb0\xe6\x27\xc7\x23\x6d\x09\x09\xa7\x60\xbc\x4b\xce\x79\x70\x61\xf0\xaf\xe0\x74\xb5\x28\x2b\x9a\x1f\xfd\xed\xab\x23\xc8\xa8\xcc\x9b\x64\xd9\xd1\x88\x95\x0a\xf6\x25\x85\x1e\x1e\xca\x18\x19\xe6\x68\x6e\xe2\x4e\xdf\x32\xf4\x12\x13\x1c\x7e\x0f\xe9\x0c\xc6\x5b\x5a\xb1\x6e\xb0\xc9\xc1\xea\xc5\xf1\x65\xd1\xb1\xbf\x30\x1c\x7e\x94\xd0\x13\xbd\xc9\x55\x05\x6f\x48\xc6\x6e\xb3\x53\xc7\x1e\x99\x05\x1d\xc7\x1d\x75\x0f\x05\x90\x3b\x3b\x8f\x01\xfa\xc1\xfd\x1a\xd8\x7d\x3f\xdd\x9e\xed\x6b\x0b\x9b\x9a\xd3\xc2\xb5\xa4\x49\xc0\x56\xd3\x05\xed\x68\x00\x65\x36\x77\x2f\x43\x7a\x53\x6e\x3b\xdc\x78\xb8\x76\x13\xb6\xaf\xf8\x37\xb4\x2b\x9b\x45\x7c\x78\x1b\xde\x83\xc6\xc8\xfa\x07\xfb\x6e\x90\xd3\xf6\xf1\x80\xd5\xe8\xb6\x20\x4a\x32\xd1\xc3\x3d\x4a\x20\x78\xd8\x65\xc4\xca\x24\x4a\x92\x9a\xb5\x14\x91\xd0\x29\xa8\xd0\xd8\x64\x07\x68\xea\x31\xf9\xc2\xde\xeb\x56\xb8\x1b\xf5\xe1\x17\x11\x73\x30\x5e\xdf\xe2\x48\xb4\x4a\x48\xc2\xb7\x04\x55\xd4\x2c\xd2\x22\x9c\x5e\xe1\x71\x3f\xb9\x6f\xf8\xb6\xf8\x3d\xc4\x7d\xe2\xb8\xf8\xb9\xe4\x9f\x4a\x5d\x32\xfd\xd7\x35\xc4\xeb\x76\x12\x54\x2e\x5c\x76\xbd\xd2\xc5\xbc\xc2\x9a\x3f\xb9\x0c\x73\x07\x53\x15\xee\xad\xba\xc2\x2e\x82\x02\x79\x62\xcd\xef\xac\xfa\x74\xdd\x3f\xa2\xf2\x23\x4e\xed\xe6\x9b\xc8\x4d\xf5\x38\x8e\x4e\x11\xf4\x4d\x33\x48\xdd\xae\xa0\x3c\x77\x9d\x09\xdd\x27\xf9\x85\x86\x32\x64\xd7\xf7\x20\xfa\xd9\x3c\x56\x91\x27\x32\x2d\x31\x7e\xbb\x89\xe3\xe5\xa3\xa4\x4a\x90\x4b\xd9\x24\xd5\xb9\x30\xbd\x2e\xc7\xb0\x63\x13\xcc\x84\xaa\xe7\x01\xd5\x50\xea\x27\xa3\xea\xff\x3d\xa8\x6c\x45\x6a\x75\x3b\x52\x1b\x8b\x3b\x85\x53\x32\x5a\xc7\x50\xbf\x0d\x86\x5c\x20\xda\x01\x4a\x47\x2f\x03\x7c\xe2\x74\xc9\xee\xe8\x23\x20\xea\x17\x8b\x41\x21\x63\xf2\xfc\x31\x54\xce\x7f\xa6\x50\x9e\xb8\x57\x2f\x8f\x82\xbd\x52\xc3\xce\x2d\x7b\x85\x5f\x99\xa5\x11\xf7\x17\xbd\x6b\xc9\xce\x91\xdc\xb3\x34\x12\xc7\xa4\x6f\x1e\x00\xce\x37\x16\x38\xd3\x7a\x52\x30\xfe\xb8\x64\xfa\x77\xe1\xee\xfe\xe8\xa1\x52\xa5\xc6\xaf\x40\xcc\xd2\x9b\x94\x6b\x9b\xe7\xcd\x59\x0d\x2a\x0c\x00\xda\x49\x54\x39\x80\x2c\x6f\xe9\x1f\xf0\x22\x8a\x63\x46\x75\xa3\x3d\x25\x68\xbc\x3b\x33\x38\xdd\xde\x4b\x36\x56\x4b\xfc\xed\x9a\x11\xee\xb8\x98\x34\x4d\xcd\xf6\x7f\x7d\xb7\xa9\x60\xb6\xf7\x57\x65\x95\xbe\x23\xa0\x55\xce\x3c\xcf\x3e\x9f\x3c\xb8\xb3\xcf\xbe\x23\xbc\x48\xe9\x83\xc3\xbc\xb4\x8e\xd7\xc4\x9d\xea\x25\x15\xa4\x0e\x55\xc9\x41\x9f\xcf\x12\xbc\xda\x52\x4b\xc1\x9c\xcc\x3e\x9f\x7e\x25\x7c\xae\xf3\xd2\xe7\xdb\xe4\xaf\xf6\xe0\xf7\xb4\xdb\xa4\xf3\x8f\x12\x6a\xaa\x78\x74\x44\x3e\x70\x86\xfb\x4e\xe6\x8c\xdd\x92\x1a\x30\xe3\x00\x13\x54\x8e\xfa\xbe\xbf\x5f\x51\x99\x8d\x99\x8b\xad\x19\x1e\x11\xec\x28\xb0\x54\x55\x29\xc9\x98\x44\xd1\x4c\xe5\xee\xae\xff\x5d\x00\xe5\x6a\x83\x13\xba\xe4\xac\x72\x3a\x4c\x18\x77\x28\x53\x99\x50\x07\x14\x6a\xd2\xe9\xda\x1b\x59\x13\x8f\x4d\x77\x99\xb3\xa7\xeb\xe2\xbe\xad\xe6\x9c\xb5\xcd\x3f\x69\xec\x7f\xfc\x4d\x22\x46\xff\x5f\x01\x00\x00\xff\xff\x64\x0a\x2d\x0e\x0b\x2b\x00\x00")

func pr_review_js_bytes() ([]byte, error) {
	return bindata_read(
		_pr_review_js,
		"pr_review.js",
	)
}

func pr_review_js() (*asset, error) {
	bytes, err := pr_review_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "pr_review.js", size: 11019, mode: os.FileMode(420), modTime: time.Unix(1441772168, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pr_review.js": pr_review_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"pr_review.js": &_bintree_t{pr_review_js, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

