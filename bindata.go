package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _pr_review_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x5b\x73\xdb\xba\x11\x7e\xf7\xaf\x80\x4f\x66\x0e\xa5\x1c\x85\xb6\xf3\x68\x8d\x7b\x99\x93\x66\xa6\x97\xc4\x9e\x38\x99\x3e\x28\x1a\x85\x26\x21\x8b\xb1\x44\xa8\x04\x69\x55\x4d\xf4\xdf\xbb\x8b\x3b\x40\xe8\xe2\xd8\x6d\xd3\x36\x7c\x70\x24\x62\xef\xd8\xfd\x16\x58\x65\xda\x56\x79\x53\xb2\x8a\xdc\xd2\xe6\x1d\xbd\x2f\xe9\x8a\xd6\xfc\x35\xab\x5f\x97\x73\xda\x9b\xc2\x1f\x3e\x20\xcb\x76\x3e\x7f\x47\xff\xd6\x52\xde\x7c\xe0\xb4\x86\x17\x35\x9d\xd2\xba\xa6\x85\xe1\xe8\x93\x2f\x47\x84\xdc\x67\x35\xa9\xd5\x2b\x14\xc0\xc9\x05\xf9\xb2\x19\xaa\x15\x94\x66\x18\xd4\x0a\x2c\x4d\x52\x9a\xe5\xb3\x5e\x57\xe6\x80\x18\xe3\xb4\x25\x5a\xb8\x54\x67\x78\xd5\xaa\x4f\xae\x69\x88\xaf\x78\x84\xdf\xc6\xa0\x3e\xf6\xf6\xeb\x57\x32\x1a\x0f\xb7\xb3\xa5\xcb\x96\xcf\x7a\xc6\x0a\x49\xb9\x11\xff\xe2\xdf\xa3\xc3\x2c\x72\xc3\x84\x81\xe8\xba\x2e\xb4\xa5\xf8\xa7\xca\x16\xd6\x2e\xc1\x5d\x4e\x89\xb1\x80\xa7\x40\x71\xdb\xcc\xc8\xc5\xc5\x05\x39\xb5\x1e\xa3\x86\x65\xd6\x34\xb4\xae\x40\xfe\x04\x24\x55\x45\x2f\x67\xd5\xb4\xbc\x4d\xd5\xfb\x8e\x75\xbf\xc2\xb2\x95\xe0\xc9\xe0\x2a\x5c\x48\xa2\xf9\x87\x1e\x61\x0b\x79\x81\xa6\x7a\x94\xc6\x4a\x65\xb9\x26\x5e\x64\x4d\x3e\xb3\x76\x69\x25\x29\x5f\xce\xcb\xa6\x97\x0c\x92\xbe\x6b\x9b\x5a\x76\x4d\x23\xe4\xe4\x04\xbc\xe1\x0c\x82\x34\x67\xb7\x9a\x64\x40\xbc\xb0\xf5\x87\x0e\x43\x4d\x9b\x16\x82\x21\x54\x63\x6a\x5e\x65\xcd\x6c\x3f\x9f\xda\x54\xad\x93\xe8\x0d\x22\x53\x26\xf3\x99\xe4\x59\xd5\x90\x1b\x4a\x9a\x19\x25\x1c\x98\x49\xc6\xc5\x67\xac\x19\x50\x2a\x8a\x86\x70\x5a\x15\xb4\x36\x82\x70\x07\x65\x0c\x7e\xfe\x99\xf4\x4c\xe8\x52\x08\x06\xfd\xfb\xe5\xb4\x17\xd4\x5b\x5f\xec\xee\x8b\x33\xcc\x02\x4b\xac\x36\xfe\x37\xe4\xac\xef\x87\x46\x79\x3a\x49\x57\x65\x33\x63\x6d\x63\x15\x74\x2a\xd9\xf5\xf4\xa8\xe3\x31\x9a\x79\x1c\x89\xbe\x54\xa0\x59\x37\x9a\xdc\xcb\x68\xc9\x15\xc9\x00\xdc\xff\x6c\x5e\xd3\xac\x58\xcb\x60\x96\xd5\xad\x48\x85\xb2\x02\x0e\x4e\xc5\xa6\xf7\x1c\x5d\x1a\x0c\xcc\xab\x49\x7a\x47\xd7\xbc\xe7\xe1\x4c\x5f\xad\xfa\xc6\x87\x7a\x6c\xcc\x4e\x7d\x7f\xac\xe1\x21\x8b\xf5\xd2\xf1\x55\xd4\x6f\x56\x15\x6c\x61\xf2\xe1\xc2\x4a\x19\xbd\x81\xd4\x4a\xa7\x73\xc6\xea\x9e\xf8\x28\x49\x7b\x7d\xf2\x9c\x84\x75\xdb\xd7\x45\xed\x79\x33\xf2\x85\x8f\x1d\xe9\xf1\x75\x07\xb6\x76\x12\x4a\xf8\xea\x26\xfb\x66\x00\x39\x5b\x72\x19\x3d\x95\x3f\x9e\xa0\xe1\x11\xb8\xee\xb6\x0a\x7c\x7b\x3d\xcb\xde\x64\x4b\x09\x75\x16\xff\xa7\x66\xc5\x80\xff\x21\x98\x68\xd9\x42\xec\x93\x80\x92\xf2\x59\xa6\x61\xd6\xd8\x68\x99\x7c\x03\x9d\x34\xbf\x5c\xd2\x8a\x16\x3d\x7a\x4f\xab\xe6\x55\xd6\x64\xd6\xd0\xa0\x16\x40\x8f\x21\x4a\x71\x6d\xa2\xaa\x37\xc5\xfa\x41\x98\x29\x2b\x11\x1f\xed\x24\xa6\x0b\x44\xe2\xca\x8a\x11\xa1\xb2\xaa\xd2\xaa\x5d\xdc\xa8\x22\x8b\x75\xc6\x87\x74\xdc\x2f\x9b\xfe\x30\x16\xe0\xd8\x56\x08\x2b\x31\xff\xa3\x95\x12\x29\x02\x81\xc9\x94\xf3\xec\x96\x82\xc8\xe4\xf7\x2b\xca\x19\x20\xd9\x8a\xd5\x77\xc7\xe4\x2d\x5b\x91\xcf\x2d\x82\x58\x09\x40\x97\xe5\x77\x04\x72\x8a\xac\x32\xf8\x86\x20\xf8\xbe\xce\xee\x4b\x80\x3c\x06\x35\xcf\xb9\x58\x63\x80\x7f\xb5\x78\x25\x35\x93\x35\x6b\x6b\x92\xb3\x82\xa6\x1f\xab\x8f\x55\x22\x13\x55\x2b\xfc\x05\x34\x3e\x7b\x66\x90\x95\x0b\x02\xb7\xb9\x7b\xe6\x1f\x70\x26\xf0\x45\xff\x2e\x21\xbf\x18\x12\xf8\x98\x18\x03\x0e\x3d\x3d\xf8\xf2\x5e\x10\x14\x28\xa0\xdf\x17\xb6\x31\x60\xea\x92\x1b\x02\x83\xab\xfe\xea\x33\xe3\x3a\x04\x68\xb1\x80\xf0\xf1\x68\x84\x5e\x90\x2c\xcf\xe9\xb2\x39\x27\x9f\x96\xf5\x44\xc5\xf5\xf2\xcf\x9f\xb6\x11\x17\x85\x71\xda\x63\xc1\x85\x91\x6e\x08\xe3\x6d\xec\xf9\x2c\xab\xe0\x4b\x54\x82\x5a\x1b\xb1\x79\x31\x31\x82\xc8\xa8\xa2\xab\xc9\x5e\xb9\xcb\x1a\x50\x9e\xf0\x26\x6b\x5a\xee\x09\x95\xaf\x3e\xd9\xbd\xcf\x01\x86\x1b\xfa\x47\xce\x5b\x38\x4a\x2c\x16\x50\x51\x9d\xba\x1a\x68\xe1\x2a\xf0\x92\xe5\x5a\x48\xd2\x0d\x64\x4b\x45\xcf\x00\xe3\x11\x50\x74\x53\x49\x00\x24\x0a\x40\xfb\x64\xb0\x9b\xaf\xad\xe7\x86\xe5\xca\x6d\xf0\xd2\x8d\x73\x91\x1b\xf1\xaa\xfb\xcc\xca\x0a\x8e\x36\x04\xce\x36\x46\xa9\x76\x3f\x39\x52\xbd\x0b\xff\xe1\xd9\x3d\x45\xcd\x1d\x7f\x31\xdf\xce\xb1\xee\xc0\x50\xc5\x38\x99\xd6\x6c\x01\x42\xff\x74\x7d\xf9\x36\xe5\x0d\x44\xf7\xb6\x9c\xae\x03\xd5\x12\xe1\x31\xac\xbb\x45\x8b\x32\xe8\x0a\xb3\x70\x83\x92\xb6\xa0\xec\x87\x65\x01\xb1\x7f\x3a\x98\x7d\x04\xca\x5a\x7b\xaf\x1b\xd4\x36\x67\x59\xb1\xcf\x69\xc3\x0c\x49\x6d\x80\xe8\x10\xf6\xd8\x76\xc4\x81\xda\x5e\x83\x5c\x1d\xf6\x16\xd4\xd4\xeb\x4e\x27\x84\x55\xb1\x19\xcb\x0c\x0e\x46\x3d\xcf\x31\xb9\xa9\x70\xfa\x84\x53\x64\x0f\xc1\x6a\xe3\x0b\x09\x94\x38\x62\x02\x17\xe3\x82\x74\xe4\xf1\x84\x3e\x87\x73\xd9\x6e\x8c\xc4\x5e\xb3\xbd\x7f\x1f\x5f\xd8\x0e\xee\xdf\xc9\x0e\xe9\xf7\xf2\x4c\x23\xba\x7d\x53\xb7\x54\x81\xa9\xbd\x6f\x3d\xb6\xb1\xba\xe1\x78\x74\xe7\xbc\xc6\xb6\xc9\xa6\xe2\x02\x20\x43\x08\xcc\x94\xb4\xb2\x3a\x0e\xee\x7e\xff\xbb\xcd\x0f\xae\x50\x6f\x68\x0d\xcb\x10\x76\xae\x42\x84\x67\x0a\xd7\x65\x77\x47\x0e\xf2\x38\x38\xf2\x6e\x3f\x35\x9b\x95\xdf\x82\xae\xb6\xc2\x8b\x46\x20\x34\x20\xec\x93\x73\x69\x64\xe0\xc6\x03\xbb\xd3\x8f\xf6\xf4\x1f\x6e\x4f\x9d\x4d\xb2\xed\xa9\x2c\xbc\x8e\x54\xe2\x9e\x2a\xb5\x1a\xb0\xe5\xed\xfd\x2d\x5e\xee\x5d\x52\xf9\xda\xef\x58\x37\xac\x58\x7b\x44\xb9\xd4\x9c\xe2\x42\x0a\x46\xc3\x35\x50\xd3\xe6\x8b\xc2\x9d\x18\x09\x0a\x35\x01\x81\xc2\xf1\x46\x20\x3a\x95\x1c\xbc\x55\xaf\xcc\xcc\xc0\xd9\xae\x7e\x38\x0d\x02\x4d\x2e\x96\x3b\x37\xe9\x05\x5c\x1a\xb4\x24\xde\xde\xc8\xb0\xf6\xce\x4e\xfb\xda\x12\x12\xce\x62\xea\x06\xe4\x6a\x44\xc6\xaf\xda\x2b\xa8\x0e\x7b\x47\xb7\x1c\xa0\x3b\x3a\x9e\x38\x3e\xce\x8b\x45\x77\xfc\x60\x2f\xf0\xee\x7c\x27\x01\x5a\x91\xbc\x20\x4d\xa5\x2a\x18\x66\x69\xf9\xaa\xc4\xf6\x05\xab\xa3\xd3\x71\xda\xb0\xbf\x30\x48\xaf\x5f\x33\xe8\x76\xde\x6c\x24\x87\x37\x24\x61\x77\xc9\xb9\x63\x8f\xd8\xe1\xa6\xc6\xdd\x72\xdb\x3d\xe4\xc5\xce\x06\xaf\x1f\xdc\x0b\xc5\xee\xfb\xe9\x76\x63\x5f\x5b\xd8\xae\x9c\xe6\xac\x25\x0d\x03\xb6\x82\xce\x69\x43\x03\x98\xb2\x79\x39\x0e\xe9\x4d\x29\xed\x70\x63\x7f\x5d\x46\x6c\x5f\xd6\xaf\x68\x93\x95\xf3\xee\xb1\x4c\xbd\x07\x8d\x1d\xeb\xf7\x76\xd4\x20\x5f\xed\xe3\x81\xa6\xd1\x6d\x01\x92\x24\xbc\x85\x7b\x11\x47\x60\xb0\xcb\x88\x83\x51\x04\x44\x80\x73\xea\x24\xb4\x33\x0a\xec\x65\x31\x20\x3f\xd9\x2b\xda\x12\x37\xa2\x38\xfe\xa9\xc3\xbc\x21\x74\x0e\xe9\xb5\xc7\x87\xce\x2a\x21\x11\xb7\x22\x54\x9d\x1e\x10\x17\xe1\xb4\x00\x8f\xfb\xd1\xed\xc0\xb7\xc5\x6f\x0d\xee\xd3\x8d\x8b\x9f\x46\xfe\x51\xd3\x25\xd3\x9f\x6e\x20\x5e\x77\xc3\xa0\x68\xe1\xde\xea\x55\x2d\xa6\x14\x96\xfb\xd9\x38\x4c\x1b\xcc\x52\xb8\x8c\xea\xe2\x1a\x05\xb5\xf1\xc8\x72\xdf\x59\xf0\xf1\x92\x7f\x40\xd1\x77\x38\xb5\x9b\x2f\x3b\x6e\xca\xc7\x71\xd4\xc0\x7b\xec\xb6\x04\x45\xb9\xeb\x8c\xe7\x3e\xd1\x41\xb9\xb4\x61\xd7\x7c\x5d\x3f\x9b\xc8\xdb\x4d\xd7\x31\x1f\xc9\xe4\x4e\x8e\x85\x17\xf2\x5c\x16\x5f\x17\x73\xce\x81\xf1\x3a\xa2\xea\x69\x80\x2f\xb6\x0d\x87\x5e\x09\xfc\xe7\x9b\x31\x13\x9f\x7d\xc8\x71\x28\x76\xec\x41\x8f\x03\xf0\xe3\xa9\x11\x64\x37\x86\x44\x50\xc4\x05\x08\xf5\x7d\x0b\x90\xf8\x94\x5b\x61\xe5\xe4\x79\x80\x30\x35\x5d\xb0\x7b\xfa\x00\x90\xf9\x6e\x51\x24\x64\x8c\x1e\x1e\x54\x49\xfd\x7b\x2a\xe8\x91\x7b\xf5\xfc\x24\xd8\x2b\x39\x83\xdc\xb2\x57\xf8\xa3\x5a\x1c\x33\xbf\xeb\x5d\x8b\x82\x4e\x74\xcf\xe2\x48\xd3\x25\x7d\xb9\x07\x51\x5f\x5a\x44\x8d\xeb\x89\x61\xd2\xc3\x92\xe9\x5f\x05\xc8\x4f\x0c\x06\x1a\x01\x18\xc0\xa4\x93\x55\x62\x88\x97\xdd\xd1\x3f\xe0\x75\x0e\x47\x75\xf2\x5e\x78\x4e\xf0\x4c\xe8\xde\xbc\xcf\xb7\xe3\xfa\xc6\x6a\xe9\xfe\x2a\x65\x84\x3b\x2e\x46\x4d\x93\xf3\xf1\xff\xbe\x7b\x4b\x30\x1f\xfb\xab\xb4\x4a\xff\x2e\x84\x56\x39\x33\x31\xfb\x7c\xf3\xf0\xcb\x3e\x87\x8e\xc1\x3a\x4a\xf7\x0e\xc4\xe2\x3a\xb6\x8e\xc6\xec\x13\x3b\x1a\x45\xc7\x65\x3e\x4b\xf0\x6a\xcb\x15\x25\x98\x36\xd9\xe7\xdb\x2f\x5f\x8f\x38\xbb\xfc\xb8\xb7\xe9\xe7\xff\xf4\xde\xa6\xff\xbf\x84\x4c\x61\x90\x75\x72\x42\xae\x6a\x86\x5b\x4e\x66\x8c\xdd\x91\x02\xe0\xe2\x08\x73\x53\xcc\xca\xde\xaf\x97\x54\x24\x62\xe2\xc2\x6a\x82\xad\xdc\xce\xd2\x32\x59\x90\x82\x8c\x09\x00\x4d\x64\xda\xee\xfa\xb9\x1f\x94\xcb\x0d\x8e\xe8\x12\xc3\xbe\x89\x1a\xd1\xed\x50\x26\x33\xa1\x08\x28\xe4\xa8\xd0\xb5\xb7\x63\x4d\x77\xee\xb8\xcb\x9c\x03\x5d\xe7\xeb\x2a\x9f\xd5\xac\x2a\xff\x41\xbb\xfe\x77\x7f\x88\xc3\xe8\xff\x33\x00\x00\xff\xff\xe4\x27\x53\x71\xe5\x27\x00\x00")

func pr_review_js_bytes() ([]byte, error) {
	return bindata_read(
		_pr_review_js,
		"pr_review.js",
	)
}

func pr_review_js() (*asset, error) {
	bytes, err := pr_review_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "pr_review.js", size: 10213, mode: os.FileMode(420), modTime: time.Unix(1441699288, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pr_review.js": pr_review_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"pr_review.js": &_bintree_t{pr_review_js, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

