package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _pr_review_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x5b\x73\xd3\xc8\x12\x7e\xcf\xaf\x98\x40\x15\xb6\xc1\x28\x09\x8f\x71\xe5\x5c\x0a\x8a\xaa\x73\x81\xa4\x08\xd4\x79\x30\x2e\xa3\x48\xe3\x58\xc4\xd6\xf8\x68\xa4\x78\xbd\xe0\xff\xbe\xdd\x73\x9f\xd1\xf8\x12\x92\xdd\x65\x77\xd1\x43\xb0\x35\x7d\x9f\xee\xaf\x67\xda\x4c\x9a\x32\xab\x0b\x56\x92\x6b\x5a\xbf\xa3\xb7\x05\x5d\xd2\x8a\xbf\x66\xd5\xeb\x62\x46\xbb\x13\xf8\xc3\xfb\x64\xd1\xcc\x66\xef\xe8\xff\x1b\xca\xeb\x0f\x9c\x56\xf0\xa2\xa2\x13\x5a\x55\x34\x37\x1c\x3d\xf2\xe5\x80\x90\xdb\xb4\x22\x95\x7a\x85\x02\x38\x39\x23\x5f\xd6\x03\xb5\x82\xd2\x0c\x83\x5a\x81\xa5\x71\x42\xd3\x6c\xda\x6d\xcb\xec\x13\x63\x9c\xb6\x44\x0b\x97\xea\x0c\xaf\x5a\xf5\xc9\x35\x0d\xf1\x15\x0f\xf1\xdb\x08\xd4\xc7\xde\x7e\xfd\x4a\x86\xa3\xc1\x66\xb6\x64\xd1\xf0\x69\xd7\x58\x21\x29\xd7\xe2\x5f\xfc\x7b\xb0\x9f\x45\x6e\x98\x30\x10\x6d\xd7\x85\xb6\x04\xff\x94\xe9\xdc\xda\x25\xb8\x8b\x09\x31\x16\xf0\x04\x28\xae\xeb\x29\x39\x3b\x3b\x23\xc7\xd6\x63\xd4\xb0\x48\xeb\x9a\x56\x25\xc8\x1f\x83\xa4\x32\xef\x66\xac\x9c\x14\xd7\x89\x7a\xdf\xb2\xee\x25\x2c\x5b\x09\x9e\x0c\xae\xc2\x85\x24\x9a\x7f\xe0\x11\x36\x90\x17\x68\xaa\x47\x69\xac\x54\x96\x6b\xe2\x79\x5a\x67\x53\x6b\x97\x56\x92\xf0\xc5\xac\xa8\xbb\x9d\x7e\xa7\xe7\xda\xa6\x96\x5d\xd3\x08\x39\x3a\x02\x6f\x38\x83\x20\xcd\xd8\xb5\x26\xe9\x13\x2f\x6c\xbd\x81\xc3\x50\xd1\xba\x81\x60\x08\xd5\x98\x9a\x17\x69\x3d\xdd\xcd\xa7\x36\x55\xeb\x24\x7a\x83\xc8\x84\xc9\x7c\x26\x59\x5a\xd6\xe4\x8a\x92\x7a\x4a\x09\x07\x66\x92\x72\xf1\x19\x6b\x06\x94\x8a\xa2\x21\x9c\x96\x39\xad\x8c\x20\xdc\x41\x19\x83\x27\x4f\x48\xd7\x84\x2e\x81\x60\xd0\x9f\xce\x27\xdd\xa0\xde\x7a\x62\x77\x9f\x9f\x60\x16\x58\x62\xb5\xf1\x7f\x23\x27\x3d\x3f\x34\xca\xd3\x71\xb2\x2c\xea\x29\x6b\x6a\xab\xa0\x55\xc9\xae\xa7\x07\x2d\x8f\xd1\xcc\xc3\x48\xf4\xa5\x02\xcd\xba\xd6\xe4\x5e\x46\x4b\xae\x48\x06\xe0\xfe\xa7\xb3\x8a\xa6\xf9\x4a\x06\xb3\x28\xaf\x45\x2a\x14\x25\x70\x70\x2a\x36\xbd\xeb\xe8\xd2\x60\x60\x5e\x8d\x93\x1b\xba\xe2\x5d\x0f\x67\x7a\x6a\xd5\x37\x3e\xd4\x63\x63\x76\xec\xfb\x63\x0d\x0f\x59\xac\x97\x8e\xaf\xa2\x7e\xd3\x32\x67\x73\x93\x0f\x67\x56\xca\xf0\x0d\xa4\x56\x32\x99\x31\x56\x75\xc5\x47\x49\xda\xed\x91\xa7\x24\xac\xdb\x9e\x2e\x6a\xcf\x9b\xa1\x2f\x7c\xe4\x48\x8f\xaf\x3b\xb0\xb5\x95\x50\xc2\x57\x3b\xd9\xd7\x7d\xc8\xd9\x82\xcb\xe8\xa9\xfc\xf1\x04\x0d\x0e\xc0\x75\xb7\x55\xe0\xdb\xcb\x69\xfa\x26\x5d\x48\xa8\xb3\xf8\x3f\x31\x2b\x06\xfc\xf7\xc1\x44\xcb\x16\x62\x9f\x04\x94\x84\x4f\x53\x0d\xb3\xc6\x46\xcb\xe4\x1b\xe8\xa4\xf9\xf9\x82\x96\x34\xef\xd2\x5b\x5a\xd6\xaf\xd2\x3a\xb5\x86\x06\xb5\x00\x7a\x0c\x51\x82\x6b\x63\x55\xbd\x09\xd6\x0f\xc2\x4c\x51\x8a\xf8\x68\x27\x31\x5d\x20\x12\x17\x56\x8c\x08\x95\x55\x95\x94\xcd\xfc\x4a\x15\x59\xac\x33\xde\xa5\xe3\x7e\x59\xf7\x06\xb1\x00\xc7\xb6\x42\x58\x89\xf9\x1f\xad\x94\x48\x11\x08\x4c\xa6\x9c\xa7\xd7\x14\x44\x76\xfe\xb9\xa4\x9c\x01\x92\x2d\x59\x75\x73\x48\xde\xb2\x25\xf9\xdc\x20\x88\x15\x00\x74\x69\x76\x43\x20\xa7\xc8\x32\x85\x6f\x08\x82\xef\xab\xf4\xb6\x00\xc8\x63\x50\xf3\x9c\x8b\x35\x06\xf8\x57\x89\x57\x52\x33\x59\xb1\xa6\x22\x19\xcb\x69\xf2\xb1\xfc\x58\x76\x64\xa2\x6a\x85\xcf\x40\xe3\xe3\xc7\x06\x59\xb9\x20\x70\x9b\xbb\x67\xfe\x1e\x67\x02\x5f\xf4\x3f\x3a\xe4\x99\x21\x81\x8f\x1d\x63\xc0\xbe\xa7\x07\x5f\xde\x73\x82\x02\x05\xf4\xfb\xc2\xd6\x06\x4c\x5d\x72\x43\x60\x70\xd5\x5f\x7d\x6c\x5c\x87\x00\xcd\xe7\x10\x3e\x1e\x8d\xd0\x73\x92\x66\x19\x5d\xd4\xa7\xe4\xd3\xa2\x1a\xab\xb8\x9e\xff\xe7\xd3\x26\xe2\x3c\x37\x4e\x7b\x2c\xb8\x30\xd4\x0d\x61\xb4\x89\x3d\x9b\xa6\x25\x7c\x89\x4a\x50\x6b\x43\x36\xcb\xc7\x46\x10\x19\x96\x74\x39\xde\x29\x77\x51\x01\xca\x13\x5e\xa7\x75\xc3\x3d\xa1\xf2\xd5\x27\xbb\xf7\x19\xc0\x70\x4d\xff\xc5\x79\x03\x47\x89\xf9\x1c\x2a\xaa\x55\x57\x7d\x2d\x5c\x05\x5e\xb2\x5c\x0a\x49\xba\x81\x6c\xa8\xe8\x29\x60\x3c\x02\x8a\x6e\x2a\x1d\x00\x89\x1c\xd0\xbe\xd3\xdf\xce\xd7\x54\x33\xc3\x72\xe1\x36\x78\xe9\xc6\xa9\xc8\x8d\x78\xd5\x7d\x66\x45\x09\x47\x1b\x02\x67\x1b\xa3\x54\xbb\xdf\x39\x50\xbd\x0b\xff\xe1\xe9\x2d\x45\xcd\x2d\x7f\x31\xdf\x4e\xb1\xee\xc0\x50\xc5\x38\x9e\x54\x6c\x0e\x42\xff\x7d\x79\xfe\x36\xe1\x35\x44\xf7\xba\x98\xac\x02\xd5\x12\xe1\x31\xac\xdb\x45\x8b\x32\x68\x0b\xb3\x70\x83\x92\x36\xa0\xec\x87\x45\x0e\xb1\x7f\x38\x98\xbd\x07\xca\x5a\x7b\x2f\x6b\xd4\x36\x63\x69\xbe\xcb\x69\xc3\x0c\x49\x6d\x80\x68\x1f\xf6\xd8\x76\xc4\x81\xda\x5e\x83\x5c\x1d\xf6\x16\x54\x57\xab\x56\x27\x84\x55\xb1\x19\x8b\x14\x0e\x46\x5d\xcf\x31\xb9\xa9\x70\xfa\x84\x53\x64\x17\xc1\x6a\xed\x0b\x09\x94\x38\x62\x02\x17\xe3\x82\x74\xe4\xf1\x84\x3e\x83\x73\xd9\x76\x8c\xc4\x5e\xb3\xb9\x7f\x1f\x9e\xd9\x0e\xee\xdf\xc9\xf6\xe9\xf7\xf2\x4c\x23\xba\x7d\x5d\x35\x54\x81\xa9\xbd\x6f\xdd\xb7\xb1\xba\xe1\xb8\x77\xe7\xbc\xc4\xb6\xc9\x26\xe2\x02\x20\x43\x08\xcc\x94\x34\xb2\x3a\xf6\xee\x7e\x7f\xde\xe6\x07\x57\xa8\x37\xb4\x82\x65\x08\x3b\x57\x21\xc2\x33\x85\xeb\xb2\xbb\x23\x7b\x79\x1c\x1c\x79\x37\x9f\x9a\xcd\xca\xdf\x41\x57\x53\xe2\x45\x23\x10\x1a\x10\xf6\xc8\xa9\x34\x32\x70\xe3\x8e\xdd\xe9\x47\x7b\xfa\x9d\xdb\x53\x6b\x93\x6c\x7b\x2a\x72\xaf\x23\x15\xb8\xa7\x4a\xad\x06\x6c\x79\x7b\x7f\x8b\x97\x7b\x97\x54\xbe\xf6\x3b\xd6\x15\xcb\x57\x1e\x51\x26\x35\x27\xb8\x90\x80\xd1\x70\x0d\xd4\xb4\xd9\x3c\x77\x27\x46\x82\x42\x4d\x40\xa0\x70\xbc\x11\x88\x4e\x25\x07\x6f\xd5\x2b\x33\x33\x70\xb6\xab\x17\x4e\x83\x40\x93\x8b\xe5\xce\x4d\x7a\x0e\x97\x06\x2d\x89\x37\x57\x32\xac\xdd\x93\xe3\x9e\xb6\x84\x84\xb3\x98\xaa\x06\xb9\x1a\x91\xf1\xab\xf6\x0a\xaa\xc3\xde\xd1\x2d\x07\xe8\x8e\x8e\x27\x0e\x0f\xb3\x7c\xde\x1e\x3f\x18\x1c\xe1\xcb\x02\x3b\x12\xb0\x0f\x8f\x47\x49\xcd\xfe\xcb\x20\x63\x5e\xa6\xd0\xc0\xbc\x71\x47\x06\x6f\x48\x87\xdd\x74\x4e\x1d\x15\x62\xd3\xea\x0a\x37\xc0\xed\xe0\xb0\xd5\x5b\x7b\xb6\x7e\x30\xbc\x8a\xdd\x37\xdd\x6d\xb0\xbe\xb6\xb0\x03\x39\xfd\x56\x4b\x1a\x04\x6c\x39\x9d\xd1\x9a\x06\xc8\x63\x53\x6d\x14\xd2\x9b\xea\xd8\xe2\xc6\xee\x52\x8b\xd8\xbe\xa8\x5e\xd1\x3a\x2d\x66\xed\x93\x96\x7a\x0f\x1a\x5b\xd6\xef\x6c\x92\x41\x0a\xda\xc7\xc3\x41\xa3\xdb\x62\x1e\xe9\xf0\x06\xae\x3a\x1c\x6b\xdd\x2e\x23\xb4\x45\x41\x0d\x31\xcb\x49\xfd\xd0\xce\x28\x56\x17\x79\x9f\x3c\xb2\xb7\xae\x05\x6e\x44\x7e\xf8\xa8\xc5\xbc\x26\x74\x06\xe9\xb5\xc3\x87\xd6\x2a\x21\x11\xb7\x22\x54\x2d\x58\x8f\x8b\x70\x50\xdd\xe3\xbe\x37\xc2\xfb\xb6\xf8\x68\xef\x3e\xed\xb8\xf8\x69\xe4\x9f\x1e\x5d\x32\xfd\xe9\x0a\xe2\x75\x33\x08\x8a\x16\xae\xa2\x5e\xd5\x62\x4a\x61\xb9\x9f\x8c\xc2\xb4\xc1\x2c\x85\xfb\xa5\x2e\xae\x61\x50\x1b\xf7\x2c\xf7\xad\x05\x1f\x2f\xf9\x3b\x14\x7d\x8b\x53\xbb\xf9\xa2\xe5\xa6\x7c\x1c\x47\x0d\x62\xc7\x2e\x40\x50\x94\xdb\x8e\x6d\xee\x13\x9d\x7d\x4b\x1b\xb6\x8d\xcc\xf5\xb3\x8e\xbc\x5d\xb7\x1d\xf3\x91\x4c\xee\xe4\x48\x78\x21\x8f\x5a\xf1\x75\x31\xba\xec\x1b\xaf\x23\xaa\x1e\x06\xf8\x62\xdb\xb0\xef\x29\xdf\x7f\xbe\x19\x33\xf1\xd9\x85\x1c\xfb\x62\xc7\x0e\xf4\xd8\x03\x3f\x1e\x1a\x41\xb6\x63\x48\x04\x45\x5c\x80\x50\xdf\x37\x00\x89\x4f\xb9\x11\x56\x8e\x9e\x06\x08\x53\xd1\x39\xbb\xa5\x77\x00\x99\xef\x16\x45\x42\xc6\xe8\xe1\x41\x95\xd4\x6f\x53\x41\xf7\xdc\xab\xa7\x47\xc1\x5e\xc9\xb1\xe2\x86\xbd\xc2\xdf\xc9\xe2\x98\xf9\x5d\xef\x5a\x14\x74\xa2\x7b\x16\x47\x9a\x36\xe9\x8b\x1d\x88\xfa\xc2\x22\x6a\x5c\x4f\x0c\x93\xee\x96\x4c\xbf\x16\x20\x3f\x30\x18\xc8\xac\x92\x73\xe5\x3f\xde\xe5\x20\x98\x2b\xfd\x4f\x5a\xa5\x7f\x4f\x41\xab\x9c\x59\x92\x7d\xbe\x79\x68\x64\x9f\x7d\xc7\x47\x2d\xa5\x3b\x07\x49\x71\x1d\x1b\x47\x4a\xf6\x89\x9d\x3f\xa2\x63\x26\x9f\x25\x78\xb5\xe1\x1e\x10\x4c\x69\xec\xf3\xed\x37\x9c\x7b\x1c\x10\x7e\x5c\x8e\xf4\xf3\x17\xbd\x1c\xe9\xff\x67\x20\x53\x18\x64\x1d\x1d\x91\x8b\x8a\xe1\x96\x93\x29\x63\x37\x24\x07\xb8\x38\xc0\xdc\x14\x33\xa6\xf7\xab\x05\x15\x89\xd8\x71\x07\x81\x1d\xec\x97\x76\x06\x95\xca\x82\x14\x64\x4c\xfc\x1c\xde\x91\x69\xbb\xed\x67\x72\x50\x2e\x37\x38\xa2\x4b\x0c\xc9\xc6\x6a\xb4\xb5\x45\x99\xcc\x84\x3c\xa0\x90\x23\x36\xd7\xde\x96\x35\xed\x79\xdd\x36\x73\xf6\x74\x9d\xaf\xca\x6c\x5a\xb1\xb2\xf8\x99\xb6\xfd\x6f\xff\x80\x85\xd1\xff\x25\x00\x00\xff\xff\xf5\x6e\x47\x12\x1d\x27\x00\x00")

func pr_review_js_bytes() ([]byte, error) {
	return bindata_read(
		_pr_review_js,
		"pr_review.js",
	)
}

func pr_review_js() (*asset, error) {
	bytes, err := pr_review_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "pr_review.js", size: 10013, mode: os.FileMode(420), modTime: time.Unix(1441689225, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pr_review.js": pr_review_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"pr_review.js": &_bintree_t{pr_review_js, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

