package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _pr_review_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\xdd\x73\xe3\xb6\x11\x7f\xf7\x5f\x01\xe7\x66\x42\xea\x4e\x47\xdb\xf7\x68\xd5\x6d\x3a\x49\x33\xd3\x8f\xfb\x98\x38\x99\x3e\x38\xae\x4c\x93\x90\xc5\x58\x22\x54\x80\xb4\xea\x5e\xf4\xbf\x77\x17\x20\xbe\x21\x59\x3e\xbb\x6d\xd2\x1e\x1f\x6c\x8b\xd8\x6f\xec\xfe\x16\x58\x79\xd6\xb7\x55\xd7\xb0\x96\xdc\xd0\xee\x3b\x7a\xd7\xd0\x35\xe5\xe2\x5b\xc6\xbf\x6d\x16\x34\x9f\xc1\x0f\x31\x26\xab\x7e\xb1\xf8\x8e\xfe\xbd\xa7\xa2\xfb\x41\x50\x0e\x2f\x38\x9d\x51\xce\x69\x6d\x38\x46\xe4\xe3\x01\x21\x77\x25\x27\x7c\x78\x85\x02\x04\x39\x23\x1f\x37\x93\x61\x05\xa5\x19\x86\x61\x05\x96\xa6\x05\x2d\xab\x79\x1e\xcb\x1c\x13\x63\x9c\xb6\x44\x0b\x57\xea\x0c\xef\xb0\xea\x93\x6b\x1a\xe2\x2b\xbe\xc0\x4f\x97\xa0\x3e\xf5\xf6\xe7\x9f\xc9\xc5\xe5\x64\x3b\x5b\xb1\xea\xc5\x3c\x37\x56\x28\xca\x8d\xfc\x8d\x3f\x0f\xf6\xb3\xc8\x0d\x13\x06\x22\x76\x5d\x6a\x2b\xf0\x47\x5b\x2e\x7d\xbb\x9a\x19\x31\x06\x88\x02\x08\x6e\xba\x39\xf9\x2d\x39\xb6\xee\x0e\x26\xf0\x54\x1c\xc3\x00\xe2\xe3\xed\xd8\x85\xfe\x84\x21\xda\xb6\xe2\x85\x69\xab\x80\x64\xb0\x74\xb8\xe0\x37\xa1\x0b\x41\x8d\x1d\x18\x94\x55\xd9\x75\x94\xb7\xa0\x79\x0a\xce\xb7\x75\x5e\xb1\x76\xd6\xdc\x14\xc3\xfb\x28\xa0\x5f\xc3\xb2\xeb\x89\x23\x43\x0c\x3b\x8c\x24\x9a\x7f\xe2\x11\xf6\x90\xca\x18\x5d\x8f\xd2\x04\x4d\x6e\xa6\x25\x5e\x96\x5d\x35\xb7\x76\x69\x25\x85\x58\x2d\x9a\x2e\xcf\xc6\xd9\xc8\xb5\x6d\x58\x76\x4d\x23\xe4\xe8\x08\xbc\x11\x0c\xf6\x75\xc1\x6e\x34\xc9\x98\x78\x3b\x3d\x9a\x38\x0c\x9c\x76\x3d\x04\x43\xaa\xc6\xd0\x7e\x28\xbb\xf9\xc3\x7c\x43\x1e\x6a\x9d\x44\xe7\x14\x99\x31\x55\x82\xa4\x2a\xdb\x8e\x5c\x53\xd2\xcd\x29\x11\xc0\x4c\x4a\x21\xff\xc6\x32\x07\xa5\xb2\xce\x89\xa0\x6d\x4d\xb9\x11\x84\x59\xa7\x62\xf0\xe5\x97\x24\x37\xa1\x2b\x20\x18\xf4\x1f\xef\x67\x79\x00\x11\x23\x72\x76\x76\x46\x5e\x9f\x60\xa6\x58\x62\x93\xac\x27\x23\x3f\x34\x83\xa7\xd3\x62\xdd\x74\x73\xd6\x77\x56\x41\x04\x3e\x23\x27\xe5\x1d\xa7\x0f\x22\xe7\xd1\xe2\xc3\xc4\x46\x28\x5d\x26\x19\x35\xb9\x5b\x8f\xd6\x8e\x81\xbf\x70\x6a\x29\xb4\xc7\x28\xc4\x34\x29\x17\x9c\x96\xf5\xbd\x8a\x79\xd3\xde\x48\x61\x4d\x0b\x32\x04\x95\xb9\x91\x47\x45\x23\xc6\xe6\xd5\xb4\xb8\xa5\xf7\x22\xf7\xca\x69\x34\xac\xfa\x8e\x85\x7a\x92\x38\xe0\x3b\x15\xb2\x44\x11\x70\x51\xe9\x6b\xd6\x43\x8e\x9c\x91\xd0\x7f\xf5\x1e\x36\xf5\xc4\x98\x83\x69\x95\x23\x6f\x03\xf4\xc7\x13\xf8\xf5\x9b\x40\x0c\x64\x4c\x0a\xb0\x80\xf4\xd5\xab\xb0\x7a\x79\xd9\xd6\x6c\x69\x72\xf6\xcc\xe1\xc4\x52\xab\x68\xfe\x16\xaa\xa0\x98\x2d\x18\xe3\xea\x4f\xc5\x91\x8f\xc8\xcb\x48\x0b\xd4\xe4\xc9\xe8\xe2\xd8\x41\x2a\x09\x9e\x9e\x8a\x30\x11\x3d\x24\xf3\x28\x13\x80\x18\xac\x07\xb0\xf8\x80\x38\x05\x8f\x5b\xcb\x38\xdc\x1e\x34\x5d\x6f\x07\x5b\xb7\xbb\x20\xdc\x23\x8b\xcd\x0e\x96\x77\x82\xb9\x4f\xbb\xcb\x64\x65\x30\xfe\xdc\x8c\x01\x4e\x1a\xa1\x32\x76\x28\x6d\x4f\xea\xe4\x00\xbc\x72\x0f\x1e\xf8\xf6\x7c\x5e\xbe\x2d\x57\xaa\x71\xda\xd3\xc4\xcc\xac\x98\xa3\xc4\x3e\x1d\xd6\xb2\x85\x9d\x54\x61\x7d\x21\xe6\xa5\x6e\xda\xc6\x46\xcb\xe4\x1b\xe8\x54\xfc\xfb\x15\x6d\x69\x9d\xd3\x3b\xda\x76\xdf\x94\x5d\x69\x0d\x0d\x60\x01\xf4\x18\xa2\x02\xd7\xa6\x03\xb0\x16\x08\x6d\xd8\x01\x9a\x56\xc6\x47\x3b\x89\x25\x0a\x91\xf8\x60\xc5\xc8\x50\x59\x55\x45\xdb\x2f\xaf\x87\x36\x9a\x3a\x67\x3d\xe6\xfc\xf6\x71\x33\x9a\xa4\x02\x9c\xda\x0a\x69\x25\x26\x5f\x12\x9d\x12\xc0\x23\xdb\x25\x15\xa2\xbc\xa1\x20\x32\xfb\xfd\x9a\x0a\x06\x4d\x66\xcd\xf8\xed\x21\x79\xc7\xd6\xe4\xa7\x1e\xfb\x4b\x03\x3d\xa8\xac\x6e\x09\x14\x05\x59\x97\xf0\x09\x81\xe4\x7b\x5e\xde\x35\xd0\x8d\x18\x20\x8f\x10\x72\x8d\x41\x6b\xe2\xf2\x95\xd2\x4c\xee\x59\xcf\x49\xc5\x6a\x5a\xfc\xd8\xfe\xd8\x66\x2a\xff\xb4\xc2\x57\xa0\xf1\xc5\x0b\xd3\xf4\x84\x24\x70\x8f\x8a\x9e\xf9\x7b\x9c\x30\x7d\xd1\x5f\x65\xe4\x95\x21\x81\x3f\x33\x63\xc0\xbe\x67\x51\x5f\xde\x6b\x72\x85\x12\x65\x5b\x06\x69\x57\x8e\xb8\x8d\xa9\x2c\x97\xc1\x10\x98\x4e\xe7\xaf\xbe\x30\xce\x43\x88\x96\x4b\x08\xa0\x48\xc6\xe8\x35\x29\xab\x8a\xae\xba\x53\x72\xb5\xe2\xd3\x21\xb2\xef\xff\x7c\xb5\x8d\xb8\xae\x8d\xdb\x1e\x0b\x2e\x5c\xe8\x6e\x7d\x49\x34\x5e\x5c\x6e\x13\x54\xcd\xcb\x16\x3e\x24\x65\x0d\x6b\x17\x6c\x51\x4f\x1d\x91\x2d\x5d\xdb\x8f\xdb\xe4\xae\x38\x74\x59\x22\xba\xb2\xeb\x85\x27\x54\xbd\xba\xb2\x79\x50\x41\x1b\xec\xe8\x1f\x85\xe8\xe1\xc4\xb7\x5c\x42\x75\x45\x35\x36\xd6\xc2\x87\x2d\x50\x2c\xe7\x52\x92\x6e\xe0\x5b\xaa\x7b\x0e\x3d\x16\xc1\x45\x37\xf5\x0c\x00\xa3\x86\x6e\x9b\x8d\x77\xf3\xf5\x7c\x61\x58\x3e\xb8\xe7\x30\xe5\xc6\x29\xc1\x34\x49\x57\xe0\x4f\xac\x69\xe1\x04\x4a\xe0\x08\x6a\x94\x6a\xf7\x33\xf9\x66\x70\x43\x94\x77\x14\x35\x47\xfe\x62\xea\x9d\x62\x0d\x82\xa1\x03\xe3\x74\xc6\xd9\x12\x84\xfe\xe9\xfc\xfd\xbb\x42\x74\x10\xdd\x9b\x66\x76\x1f\xa8\x56\xf7\x1e\x0c\xeb\x6e\xd1\xb2\x24\x62\x61\x16\x7a\x50\xd2\x16\xc4\xfd\x61\x55\x43\xec\x9f\x0f\x72\x9f\x80\xb8\xd6\xde\xf3\x0e\xb5\x2d\x58\x59\x3f\xe4\xb4\x61\x86\xa4\x36\xa0\xb4\x0f\x7b\x6a\x3b\xd2\xa0\x6d\x2f\xd8\xae\x0e\x7b\xbf\xee\xf8\x7d\xd4\x15\x61\x55\x6e\xc6\xaa\x84\x83\x69\xee\x39\xa6\x36\x15\x2e\x09\x70\xd8\xcf\x11\xb8\x36\xbe\x90\x40\x89\x23\x26\x70\x31\x2d\x48\x47\x1e\x2f\x52\x0b\x80\x8a\xdd\x78\x89\x7d\x67\x7b\x2f\x3f\x3c\xb3\xdd\xdc\xbf\xed\xef\xd3\xfb\xd5\x61\x47\x76\xfe\x8e\xf7\x74\x62\xcf\x2f\x23\xd3\x99\x9f\xd2\x64\xdd\x70\x3c\xb9\x8b\x9e\x63\x0b\x65\x33\x79\x4f\x53\x21\x04\x66\x4a\x7a\x55\x1d\x7b\x77\xc2\xff\xe5\x46\x08\x77\xdd\xb7\x94\xc3\x32\x04\x5e\x0c\x41\xc2\x13\x86\xeb\xb4\xbb\x27\x7b\xf9\xfc\xf8\xd9\xc8\xef\x40\x57\xdf\xe2\x55\x2f\x10\x1a\x10\x8e\xc8\xa9\x32\x32\x70\xe3\x91\xfd\xe9\x73\x83\xfa\x2f\x37\xa8\x68\x93\x6c\x83\x6a\x6a\xaf\x27\x35\xb8\xa7\x83\x5a\x0d\xd9\x6a\xcc\xf2\x0e\xa7\x30\x2e\xa9\x7a\xed\xf7\xac\x6b\x56\xdf\x7b\x44\x95\xd2\x5c\xe0\x42\x01\x46\xc3\x25\x58\xd3\x56\xcb\xda\x9d\x46\x4a\x8a\x61\x54\x05\x85\xe3\xcd\xaa\x74\x2a\x39\x88\x3b\xbc\x32\xc3\x1d\x67\xbb\xd4\x60\xc7\x19\x32\x80\x26\x17\xcd\x9d\x59\xc6\x12\xae\x10\x5a\x92\xe8\xaf\x55\x58\xf3\x93\xe3\x91\xb6\x84\x84\x43\x33\xde\x25\xc7\x42\xb8\x30\xf8\x57\x70\xba\x5a\x94\x15\xcd\x8f\xfe\xf6\xd5\x11\x64\x54\xe6\x0d\xbe\xec\x24\xc5\x4a\x05\xfb\x92\x42\x0f\x0f\x65\x8c\x0c\x73\x34\x66\x71\x87\x75\x19\x7a\x89\x09\x0e\xbf\x87\x74\x06\xe3\x2d\xad\x58\x37\xd8\xe4\x60\xf5\xe2\xf8\xb2\xe8\xd8\x5f\x18\x0e\x3f\x4a\xe8\x89\xde\xa0\xab\x82\x37\x24\x63\xb7\xd9\xa9\x63\x8f\xcc\x82\x8e\xe3\x8e\xba\x87\x02\xc8\x9d\x9d\xc7\x00\xfd\xe0\x7e\x0d\xec\xbe\x9f\x6e\xcf\xf6\xb5\x85\x4d\xcd\x69\xe1\x5a\xd2\x24\x60\xab\xe9\x82\x76\x34\x80\x32\x9b\xbb\x97\x21\xbd\x29\xb7\x1d\x6e\x3c\x5c\xbb\x09\xdb\x57\xfc\x1b\xda\x95\xcd\x22\x3e\xbc\x0d\xef\x41\x63\x64\xfd\x83\x7d\x37\xc8\x69\xfb\x78\xc0\x6a\x74\x5b\x10\x25\x99\xe8\xe1\x1e\x25\x10\x3c\xec\x32\x62\x65\x12\x25\x49\xcd\x5a\x8a\x48\xe8\x14\x54\x68\x6c\xb2\x03\x34\xf5\x98\x7c\x61\xef\x75\x2b\xdc\x8d\xfa\xf0\x8b\x88\x39\x98\xa9\x6f\x71\x24\x5a\x25\x24\xe1\x5b\x82\x2a\x6a\x16\x69\x11\x4e\xaf\xf0\xb8\x9f\xdc\x37\x7c\x5b\xfc\x1e\xe2\x3e\x71\x5c\xfc\x5c\xf2\x4f\xa5\x2e\x99\xfe\xeb\x1a\xe2\x75\x3b\x09\x2a\x17\x2e\xbb\x5e\xe9\x62\x5e\x61\xcd\x9f\x5c\x86\xb9\x83\xa9\x0a\xf7\x56\x5d\x61\x17\x41\x81\x3c\xb1\xe6\x77\x56\x7d\xba\xee\x1f\x51\xf9\x11\xa7\x76\xf3\x4d\xe4\xa6\x7a\x1c\x47\xa7\x08\xfa\xa6\x19\xa4\x6e\x57\x50\x9e\xbb\xce\x84\xee\x93\xfc\xfe\x43\x19\xb2\xeb\x6b\x13\xfd\x6c\x1e\xab\xc8\x13\x99\x96\x18\xbf\xdd\xc4\xf1\xf2\x51\x52\x25\xc8\xa5\x6c\x92\xea\x5c\x98\x5e\x97\x63\xd8\xb1\x09\x66\x42\xd5\xf3\x80\x6a\x28\xf5\x93\x51\xf5\xff\x1e\x54\xb6\x22\xb5\xba\x1d\xa9\x8d\xc5\x9d\xc2\x29\x19\xad\x63\xa8\xdf\x06\x43\x2e\x10\xed\x00\xa5\xa3\x97\x01\x3e\x71\xba\x64\x77\xf4\x11\x10\xf5\x8b\xc5\xa0\x90\x31\x79\xfe\x18\x2a\xe7\x3f\x53\x28\x4f\xdc\xab\x97\x47\xc1\x5e\xa9\x61\xe7\x96\xbd\xc2\xaf\xcc\xd2\x88\xfb\x8b\xde\xb5\x64\xe7\x48\xee\x59\x1a\x89\x63\xd2\x37\x0f\x00\xe7\x1b\x0b\x9c\x69\x3d\x29\x18\x7f\x5c\x32\xfd\xbb\x70\x77\x7f\xf4\x50\xa9\x52\xe3\x57\x20\x66\xe9\x4d\xca\xb5\xcd\xf3\xe6\xac\x06\x15\x06\x00\xed\x24\xaa\x1c\x40\x96\xb7\xf4\x0f\x78\x11\xc5\x31\xa3\xba\xd1\x9e\x12\x34\xde\x9d\x19\x9c\x6e\xef\x25\x1b\xab\x25\xfe\x76\xcd\x08\x77\x5c\x4c\x9a\xa6\x66\xfb\xbf\xbe\xdb\x54\x30\xdb\xfb\xab\xb2\x4a\xdf\x11\xd0\x2a\x67\x9e\x67\x9f\x4f\x1e\xdc\xd9\x67\xdf\x11\x5e\xa4\xf4\xc1\x61\x5e\x5a\xc7\x6b\xe2\x4e\xf5\x92\x0a\x52\x87\xaa\xe4\xa0\xcf\x67\x09\x5e\x6d\xa9\xa5\x60\x4e\x66\x9f\x4f\xbf\x12\x3e\xd7\x79\xe9\xf3\x6d\xf2\x57\x7b\xf0\x7b\xda\x6d\xd2\xf9\x47\x09\x35\x55\x3c\x3a\x22\x1f\x38\xc3\x7d\x27\x73\xc6\x6e\x49\x0d\x98\x71\x80\x09\x2a\x47\x7d\xdf\xdf\xaf\xa8\xcc\xc6\xcc\xc5\xd6\x0c\x8f\x08\x76\x14\x58\xaa\xaa\x94\x64\x4c\xa2\x68\xa6\x72\x77\xd7\xff\x2e\x80\x72\xb5\xc1\x09\x5d\x72\x56\x39\x1d\x26\x8c\x3b\x94\xa9\x4c\xa8\x03\x0a\x35\xe9\x74\xed\x8d\xac\x89\xc7\xa6\xbb\xcc\xd9\xd3\x75\x71\xdf\x56\x73\xce\xda\xe6\x9f\x34\xf6\x3f\xfe\x26\x11\xa3\xff\xaf\x00\x00\x00\xff\xff\x88\x70\x00\x52\x00\x2b\x00\x00")

func pr_review_js_bytes() ([]byte, error) {
	return bindata_read(
		_pr_review_js,
		"pr_review.js",
	)
}

func pr_review_js() (*asset, error) {
	bytes, err := pr_review_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "pr_review.js", size: 11008, mode: os.FileMode(420), modTime: time.Unix(1441772449, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pr_review.js": pr_review_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"pr_review.js": &_bintree_t{pr_review_js, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

