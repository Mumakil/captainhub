package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _pr_review_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x5b\x73\xd3\xc8\x12\x7e\xcf\xaf\x98\x40\x15\xb2\xc1\x28\x09\x8f\x71\xe5\x5c\x0a\x0e\x55\xe7\x02\x49\x11\xa8\xf3\x60\x5c\x46\xb1\xc6\xb1\x88\xad\xf1\xd1\x48\xf1\xf1\x82\xff\xfb\x76\xcf\x7d\x46\xe3\x4b\x48\x76\x97\xdd\x45\x0f\xc4\xd6\xf4\x7d\xba\xbf\x9e\x69\x33\x69\xca\x71\x5d\xb0\x92\x5c\xd3\xfa\x1d\xbd\x2d\xe8\x92\x56\xfc\x35\xab\x5e\x17\x33\xda\x99\xc0\x3f\xbc\x47\x16\xcd\x6c\xf6\x8e\xfe\xaf\xa1\xbc\xfe\xc0\x69\x05\x2f\x2a\x3a\xa1\x55\x45\x73\xc3\xd1\x25\x5f\x0e\x08\xb9\xcd\x2a\x52\xa9\x57\x28\x80\x93\x33\xf2\x65\xdd\x57\x2b\x28\xcd\x30\xa8\x15\x58\x1a\xa5\x34\x1b\x4f\x3b\x6d\x99\x3d\x62\x8c\xd3\x96\x68\xe1\x52\x9d\xe1\x55\xab\x3e\xb9\xa6\x21\xbe\xe2\x01\x7e\x1b\x82\xfa\xd8\xdb\xaf\x5f\xc9\x60\xd8\xdf\xcc\x96\x2e\x1a\x3e\xed\x18\x2b\x24\xe5\x5a\xfc\xc5\x7f\x0f\xf6\xb3\xc8\x0d\x13\x06\xa2\xed\xba\xd0\x96\xe2\x3f\x65\x36\xb7\x76\x09\xee\x62\x42\x8c\x05\x3c\x05\x8a\xeb\x7a\x4a\xce\xce\xce\xc8\xb1\xf5\x18\x35\x2c\xb2\xba\xa6\x55\x09\xf2\x47\x20\xa9\xcc\x3b\x63\x56\x4e\x8a\xeb\x54\xbd\x6f\x59\xf7\x12\x96\xad\x04\x4f\x06\x57\xe1\x42\x12\xcd\xdf\xf7\x08\x1b\xc8\x0b\x34\xd5\xa3\x34\x56\x2a\xcb\x35\xf1\x3c\xab\xc7\x53\x6b\x97\x56\x92\xf2\xc5\xac\xa8\x3b\x49\x2f\xe9\xba\xb6\xa9\x65\xd7\x34\x42\x8e\x8e\xc0\x1b\xce\x20\x48\x33\x76\xad\x49\x7a\xc4\x0b\x5b\xb7\xef\x30\x54\xb4\x6e\x20\x18\x42\x35\xa6\xe6\x45\x56\x4f\x77\xf3\xa9\x4d\xd5\x3a\x89\xde\x20\x32\x61\x32\x9f\xc9\x38\x2b\x6b\x72\x45\x49\x3d\xa5\x84\x03\x33\xc9\xb8\xf8\x8c\x35\x03\x4a\x45\xd1\x10\x4e\xcb\x9c\x56\x46\x10\xee\xa0\x8c\xc1\x93\x27\xa4\x63\x42\x97\x42\x30\xe8\xff\xcf\x27\x9d\xa0\xde\xba\x62\x77\x9f\x9f\x60\x16\x58\x62\xb5\xf1\x7f\x21\x27\x5d\x3f\x34\xca\xd3\x51\xba\x2c\xea\x29\x6b\x6a\xab\xa0\x55\xc9\x5d\x2b\xe5\xd8\x71\xfa\xa0\xe5\x3c\x5a\x7c\x18\xd9\x08\xa9\x4b\xb3\xae\x35\xb9\x97\xdc\x92\x2b\x92\x0c\x98\x0a\xd9\xac\xa2\x59\xbe\x92\x71\x2d\xca\x6b\x91\x15\x45\x09\x1c\x9c\x8a\xfd\xef\x38\xba\x34\x2e\x98\x57\xa3\xf4\x86\xae\x78\xc7\x83\x9c\xae\x5a\xf5\x8d\x0f\xf5\x38\x8e\xfb\xfe\x58\xc3\x43\x16\xeb\xa5\xe3\xab\x28\xe5\xac\xcc\xd9\xdc\xa4\xc6\x99\x95\x32\x78\x03\x59\x96\x4e\x66\x8c\x55\x1d\xf1\x51\x92\x76\xba\xe4\x29\x09\x4b\xb8\xab\xeb\xdb\xf3\x66\xe0\x0b\x1f\x3a\xd2\xe3\xeb\x0e\x82\x6d\x25\x94\x48\xd6\xce\xfb\x75\x0f\xd2\xb7\xe0\x32\x7a\x2a\x95\x3c\x41\xfd\x03\x70\xdd\xed\x1a\xf8\xf6\x72\x9a\xbd\xc9\x16\x12\xf5\x6c\x2b\x98\x98\x15\xd3\x07\xf6\x81\x47\xcb\x16\xc2\xa0\xc4\x96\x94\x4f\x33\x8d\xb8\xc6\x46\xcb\xe4\x1b\xe8\x64\xfc\xf9\x82\x96\x34\xef\xd0\x5b\x5a\xd6\xaf\xb2\x3a\xb3\x86\x06\x65\x01\x7a\x0c\x51\x8a\x6b\x23\x55\xc8\x29\x96\x12\x22\x4e\x51\x8a\xf8\x68\x27\x31\x5d\x20\x12\x17\x56\x8c\x08\x95\x55\x95\x96\xcd\xfc\x4a\x35\x8c\x58\x93\xbc\x4b\xf3\xfd\xb2\xee\xf6\x63\x01\x8e\x6d\x85\xb0\x12\xf3\x3f\x5a\x29\x91\x22\x10\xf0\x4c\x39\xcf\xae\x29\x88\x4c\xfe\xbe\xa4\x9c\x01\xa8\x2d\x59\x75\x73\x48\xde\xb2\x25\xf9\xdc\x20\x9e\x15\x80\x79\xd9\xf8\x86\x40\x4e\x91\x65\x06\xdf\x10\x0f\xdf\x57\xd9\x6d\x01\xe8\xc7\xa0\xe6\x39\x17\x6b\x0c\xa0\xb0\x12\xaf\xa4\x66\xb2\x62\x4d\x45\xc6\x2c\xa7\xe9\xc7\xf2\x63\x99\xc8\x44\xd5\x0a\x9f\x81\xc6\xc7\x8f\x0d\xc8\x72\x41\xe0\xf6\x79\xcf\xfc\x3d\x8e\x07\xbe\xe8\xbf\x25\xe4\x99\x21\x81\x8f\x89\x31\x60\xdf\x83\x84\x2f\xef\x39\x41\x81\xa2\x0b\xf8\xc2\xd6\xa6\x83\xb8\xe4\x86\xc0\xe0\xaa\xbf\xfa\xd8\xb8\x0e\x01\x9a\xcf\x21\x7c\x3c\x1a\xa1\xe7\x24\x1b\x8f\xe9\xa2\x3e\x25\x9f\x16\xd5\x48\xc5\xf5\xfc\xdf\x9f\x36\x11\xe7\xb9\x71\xda\x63\xc1\x85\x81\xee\x0d\xc3\x4d\xec\xe3\x69\x56\xc2\x97\xa8\x04\xb5\x36\x60\xb3\x7c\x64\x04\x91\x41\x49\x97\xa3\x9d\x72\x17\x15\xa0\x3c\xe1\x75\x56\x37\xdc\x13\x2a\x5f\x7d\xb2\x7b\x3f\x06\x18\xae\xe9\x3f\x39\x6f\xe0\x54\x31\x9f\x43\x45\xb5\xea\xaa\xa7\x85\xab\xc0\x4b\x96\x4b\x21\x49\x37\x90\x0d\x15\x3d\x05\x8c\x47\x40\xd1\x4d\x25\x01\x90\xc8\x01\xed\x93\xde\x76\xbe\xa6\x9a\x19\x96\x0b\xb7\xd7\x4b\x37\x4e\x45\x6e\xc4\xab\xee\x33\x2b\x4a\x38\xe5\x10\x38\xe6\x18\xa5\xda\xfd\xe4\x40\xf5\x2e\xfc\xc3\xb3\x5b\x8a\x9a\x5b\xfe\x62\xbe\x9d\x62\xdd\x81\xa1\x8a\x71\x34\xa9\xd8\x1c\x84\xfe\xeb\xf2\xfc\x6d\xca\x6b\x88\xee\x75\x31\x59\x05\xaa\x25\xc2\x63\x58\xb7\x8b\x16\x65\xd0\x16\x66\xe1\x06\x25\x6d\x40\xd9\x0f\x8b\x1c\x62\xff\x70\x30\x7b\x0f\x94\xb5\xf6\x5e\xd6\xa8\x6d\xc6\xb2\x7c\x97\xd3\x86\x19\x92\xda\x00\xd1\x3e\xec\xb1\xed\x88\x03\xb5\xbd\x11\xb9\x3a\xec\x85\xa8\xae\x56\xad\x4e\x08\xab\x62\x33\x16\x19\x1c\x8c\x3a\x9e\x63\x72\x53\xe1\x20\x0a\x07\xca\x0e\x82\xd5\xda\x17\x12\x28\x71\xc4\x04\x2e\xc6\x05\xe9\xc8\xe3\x61\x7d\x06\xe7\xb2\xed\x18\x89\xbd\x66\x73\xff\x3e\x3c\xb3\x1d\xdc\xbf\x9e\xed\xd3\xef\xe5\x99\x46\x74\xfb\xba\x6a\xa8\x02\x53\x7b\xf5\xba\x6f\x63\x75\xc3\x71\xef\xce\x79\x89\x6d\x93\x4d\xc4\x5d\x40\x86\x10\x98\x29\x69\x64\x75\xec\xdd\xfd\xfe\xb8\xcd\x0f\x6e\x53\x6f\x68\x05\xcb\x10\x76\xae\x42\x84\x67\x0a\xd7\x65\x77\x47\xf6\xf2\x38\x38\xf2\x6e\x3e\x35\x9b\x95\xbf\x82\xae\xa6\xc4\x8b\x46\x20\x34\x20\xec\x92\x53\x69\x64\xe0\xc6\x1d\xbb\xd3\x8f\xf6\xf4\x1b\xb7\xa7\xd6\x26\xd9\xf6\x54\xe4\x5e\x47\x2a\x70\x4f\x95\x5a\x0d\xd8\xf2\x22\xff\x16\xef\xf9\x2e\xa9\x7c\xed\x77\xac\x2b\x96\xaf\x3c\xa2\xb1\xd4\x9c\xe2\x42\x0a\x46\xc3\x35\x50\xd3\x8e\xe7\xb9\x3b\x3c\x12\x14\x6a\x18\x02\x85\xe3\x4d\x43\x74\x2a\x39\x78\xab\x5e\x99\xf1\x81\xb3\x5d\xdd\x70\x30\x04\x9a\x5c\x2c\x77\x6e\xd2\x73\xb8\x34\x68\x49\xbc\xb9\x92\x61\xed\x9c\x1c\x77\xb5\x25\x24\x1c\xcb\x54\x35\xc8\xd5\x88\x8c\x5f\xb5\x57\x50\x1d\xf6\x8e\x6e\x39\x40\x77\x74\x52\x71\x78\x28\xfc\xd7\x6f\xd7\xad\x0b\xbc\x3b\xea\x49\xd0\x03\x4c\x5e\xf8\xab\x52\x15\x0c\xb3\xb4\x7c\x59\x60\xfb\x82\xd5\xc1\xf1\x30\xad\xd9\x7f\x18\xa4\xd7\xcb\x0c\xba\x9d\x37\x26\x19\xc3\x1b\x92\xb0\x9b\xe4\xd4\xb1\x47\xec\x70\x5d\xe1\x6e\xb9\xed\x1e\xf2\x62\x6b\x83\xd7\x0f\xee\x85\x62\xf7\xfd\x74\xbb\xb1\xaf\x2d\x6c\x57\x4e\x73\xd6\x92\xfa\x01\x5b\x4e\x67\xb4\xa6\x01\x4c\xd9\xbc\x1c\x86\xf4\xa6\x94\xb6\xb8\xb1\xbb\x2e\x23\xb6\x2f\xaa\x57\xb4\xce\x8a\x59\xfb\x58\xa6\xde\x83\xc6\x96\xf5\x3b\x3b\x6a\x90\xaf\xf6\xf1\x40\xd3\xe8\xb6\x00\x49\x12\xde\xc0\xbd\x88\x23\x30\xd8\x65\xc4\xc1\x28\x02\x22\xc0\x39\x75\x12\xda\x19\x05\xf6\x22\xef\x91\x47\xf6\x8a\xb6\xc0\x8d\xc8\x0f\x1f\xb5\x98\xd7\x84\xce\x20\xbd\x76\xf8\xd0\x5a\x25\x24\xe2\x56\x84\xaa\xd5\x03\xe2\x22\x9c\x16\xe0\x71\xdf\xbb\x1d\xf8\xb6\xf8\xad\xc1\x7d\xda\x71\xf1\xd3\xc8\x3f\x6a\xba\x64\xfa\xd3\x15\xc4\xeb\xa6\x1f\x14\x2d\xdc\x5b\xbd\xaa\xc5\x94\xc2\x72\x3f\x19\x86\x69\x83\x59\x0a\x97\x51\x5d\x5c\x83\xa0\x36\xee\x59\xee\x5b\x0b\x3e\x5e\xf2\x77\x28\xfa\x16\xa7\x76\xf3\x45\xcb\x4d\xf9\x38\x8e\x1a\x78\x8f\xdd\x96\xa0\x28\xb7\x9d\xf1\xdc\x27\x3a\x33\x97\x36\x6c\x1b\xb5\xeb\x67\x1d\x79\xbb\x6e\x3b\xe6\x23\x99\xdc\xc9\xa1\xf0\x42\x9e\xcb\xe2\xeb\x62\xce\xd9\x33\x5e\x47\x54\x3d\x0c\xf0\xc5\xb6\x61\xdf\x2b\x81\xff\x7c\x33\x66\xe2\xb3\x0b\x39\xf6\xc5\x8e\x1d\xe8\xb1\x07\x7e\x3c\x34\x82\x6c\xc7\x90\x08\x8a\xb8\x00\xa1\xbe\x6f\x00\x12\x9f\x72\x23\xac\x1c\x3d\x0d\x10\xa6\xa2\x73\x76\x4b\xef\x00\x32\xdf\x2d\x8a\x84\x8c\xd1\xc3\x83\x2a\xa9\x5f\xa7\x82\xee\xb9\x57\x4f\x8f\x82\xbd\x92\x33\xc8\x0d\x7b\x85\xbf\xaf\xc5\x31\xf3\xbb\xde\xb5\x28\xe8\x44\xf7\x2c\x8e\x34\x6d\xd2\x17\x3b\x10\xf5\x85\x45\xd4\xb8\x9e\x18\x26\xdd\x2d\x99\x7e\x29\x40\x7e\x60\x30\xd0\x08\xc0\x00\x26\x9d\xac\x12\x43\xbc\xec\x86\xfe\x03\xaf\x73\x38\xaa\x93\xf7\xc2\x53\x82\x67\x42\xf7\xe6\x7d\xba\x19\xd7\xd7\x56\x4b\xfb\x57\x29\x23\xdc\x71\x31\x6a\x9a\x9c\x8f\xff\xfe\xee\x2d\xc1\x7c\xec\xbf\xd2\x2a\xfd\xbb\x10\x5a\xe5\xcc\xc4\xec\xf3\xcd\xc3\x2f\xfb\xec\x3b\x06\x6b\x29\xdd\x39\x10\x8b\xeb\xd8\x38\x1a\xb3\x4f\xec\x68\x14\x1d\x97\xf9\x2c\xc1\xab\x0d\x57\x94\x60\xda\x64\x9f\x6f\xbf\x7c\xdd\xe3\xec\xf2\xe3\xde\xa6\x9f\x3f\xe9\xbd\x4d\xff\x7f\x09\x99\xc2\x20\xeb\xe8\x88\x5c\x54\x0c\xb7\x9c\x4c\x19\xbb\x21\x39\xc0\xc5\x01\xe6\xa6\x98\x95\xbd\x5f\x2d\xa8\x48\xc4\xc4\x85\xd5\x04\x5b\xb9\x9d\xa5\x65\xb2\x20\x05\x19\x13\x00\x9a\xc8\xb4\xdd\xf6\x73\x3f\x28\x97\x1b\x1c\xd1\x25\x86\x7d\x23\x35\xa2\xdb\xa2\x4c\x66\x42\x1e\x50\xc8\x51\xa1\x6b\x6f\xcb\x9a\xf6\xdc\x71\x9b\x39\x7b\xba\xce\x57\xe5\x78\x5a\xb1\xb2\xf8\x89\xb6\xfd\x6f\xff\x10\x87\xd1\xff\x39\x00\x00\xff\xff\xf3\x2a\x7a\x55\xf0\x27\x00\x00")

func pr_review_js_bytes() ([]byte, error) {
	return bindata_read(
		_pr_review_js,
		"pr_review.js",
	)
}

func pr_review_js() (*asset, error) {
	bytes, err := pr_review_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "pr_review.js", size: 10224, mode: os.FileMode(420), modTime: time.Unix(1441703721, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pr_review.js": pr_review_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"pr_review.js": &_bintree_t{pr_review_js, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

