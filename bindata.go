package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _pr_review_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x5b\x73\xd3\xc8\x12\x7e\xcf\xaf\x98\x40\x15\xb2\xc1\x28\x09\x8f\x71\xe5\x5c\x0a\x0e\x55\xe7\x02\x49\x11\xa8\xf3\x60\x5c\x46\xb1\xc6\xb1\x88\xad\xf1\xd1\x48\xf1\xf1\x82\xff\xfb\x76\xcf\x7d\x46\xe3\x4b\x48\x76\x97\xdd\x45\x0f\xc4\xd6\xf4\x7d\xba\xbf\x9e\x69\x33\x69\xca\x71\x5d\xb0\x92\x5c\xd3\xfa\x1d\xbd\x2d\xe8\x92\x56\xfc\x35\xab\x5e\x17\x33\xda\x99\xc0\x3f\xbc\x47\x16\xcd\x6c\xf6\x8e\xfe\xaf\xa1\xbc\xfe\xc0\x69\x05\x2f\x2a\x3a\xa1\x55\x45\x73\xc3\xd1\x25\x5f\x0e\x08\xb9\xcd\x2a\x52\xa9\x57\x28\x80\x93\x33\xf2\x65\xdd\x57\x2b\x28\xcd\x30\xa8\x15\x58\x1a\xa5\x34\x1b\x4f\x3b\x6d\x99\x3d\x62\x8c\xd3\x96\x68\xe1\x52\x9d\xe1\x55\xab\x3e\xb9\xa6\x21\xbe\xe2\x01\x7e\x1b\x82\xfa\xd8\xdb\xaf\x5f\xc9\x60\xd8\xdf\xcc\x96\x2e\x1a\x3e\xed\x18\x2b\x24\xe5\x5a\xfc\xc5\x7f\x0f\xf6\xb3\xc8\x0d\x13\x06\xa2\xed\xba\xd0\x96\xe2\x3f\x65\x36\xb7\x76\x09\xee\x62\x42\x8c\x05\x3c\x05\x8a\xeb\x7a\x4a\xce\xce\xce\xc8\xb1\xf5\x18\x35\x2c\xb2\xba\xa6\x55\x09\xf2\x47\x20\xa9\xcc\x3b\x63\x56\x4e\x8a\xeb\x54\xbd\x6f\x59\xf7\x12\x96\xad\x04\x4f\x06\x57\xe1\x42\x12\xcd\xdf\xf7\x08\x1b\xc8\x0b\x34\xd5\xa3\x34\x56\x2a\xcb\x35\xf1\x3c\xab\xc7\x53\x6b\x97\x56\x92\xf2\xc5\xac\xa8\x3b\x49\x2f\xe9\xba\xb6\xa9\x65\xd7\x34\x42\x8e\x8e\xc0\x1b\xce\x20\x48\x33\x76\xad\x49\x7a\xc4\x0b\x5b\xb7\xef\x30\x54\xb4\x6e\x20\x18\x42\x35\xa6\xe6\x45\x56\x4f\x77\xf3\xa9\x4d\xd5\x3a\x89\xde\x20\x32\x61\x32\x9f\xc9\x38\x2b\x6b\x72\x45\x49\x3d\xa5\x84\x03\x33\xc9\xb8\xf8\x8c\x35\x03\x4a\x45\xd1\x10\x4e\xcb\x9c\x56\x46\x10\xee\xa0\x8c\xc1\x93\x27\xa4\x63\x42\x97\x42\x30\xe8\xff\xcf\x27\x9d\xa0\xde\xba\x62\x77\x9f\x9f\x60\x16\x58\x62\xb5\xf1\x7f\x21\x27\x5d\x3f\x34\xca\xd3\x51\xba\x2c\xea\x29\x6b\x6a\xab\xa0\x55\xc9\xae\xa7\x07\x2d\x8f\xd1\xcc\xc3\x48\xf4\xa5\x02\xcd\xba\xd6\xe4\x5e\x46\x4b\xae\x48\x06\xe0\xfe\x67\xb3\x8a\x66\xf9\x4a\x06\xb3\x28\xaf\x45\x2a\x14\x25\x70\x70\x2a\x36\xbd\xe3\xe8\xd2\x60\x60\x5e\x8d\xd2\x1b\xba\xe2\x1d\x0f\x67\xba\x6a\xd5\x37\x3e\xd4\x63\x63\x76\xec\xfb\x63\x0d\x0f\x59\xac\x97\x8e\xaf\xa2\x7e\xb3\x32\x67\x73\x93\x0f\x67\x56\xca\xe0\x0d\xa4\x56\x3a\x99\x31\x56\x75\xc4\x47\x49\xda\xe9\x92\xa7\x24\xac\xdb\xae\x2e\x6a\xcf\x9b\x81\x2f\x7c\xe8\x48\x8f\xaf\x3b\xb0\xb5\x95\x50\xc2\x57\x3b\xd9\xd7\x3d\xc8\xd9\x82\xcb\xe8\xa9\xfc\xf1\x04\xf5\x0f\xc0\x75\xb7\x55\xe0\xdb\xcb\x69\xf6\x26\x5b\x48\xa8\xb3\xf8\x3f\x31\x2b\x06\xfc\xf7\xc1\x44\xcb\x16\x62\x9f\x04\x94\x94\x4f\x33\x0d\xb3\xc6\x46\xcb\xe4\x1b\xe8\xa4\xf9\xf9\x82\x96\x34\xef\xd0\x5b\x5a\xd6\xaf\xb2\x3a\xb3\x86\x06\xb5\x00\x7a\x0c\x51\x8a\x6b\x23\x55\xbd\x29\xd6\x0f\xc2\x4c\x51\x8a\xf8\x68\x27\x31\x5d\x20\x12\x17\x56\x8c\x08\x95\x55\x95\x96\xcd\xfc\x4a\x15\x59\xac\x33\xde\xa5\xe3\x7e\x59\x77\xfb\xb1\x00\xc7\xb6\x42\x58\x89\xf9\x1f\xad\x94\x48\x11\x08\x4c\xa6\x9c\x67\xd7\x14\x44\x26\x7f\x5f\x52\xce\x00\xc9\x96\xac\xba\x39\x24\x6f\xd9\x92\x7c\x6e\x10\xc4\x0a\x00\xba\x6c\x7c\x43\x20\xa7\xc8\x32\x83\x6f\x08\x82\xef\xab\xec\xb6\x00\xc8\x63\x50\xf3\x9c\x8b\x35\x06\xf8\x57\x89\x57\x52\x33\x59\xb1\xa6\x22\x63\x96\xd3\xf4\x63\xf9\xb1\x4c\x64\xa2\x6a\x85\xcf\x40\xe3\xe3\xc7\x06\x59\xb9\x20\x70\x9b\xbb\x67\xfe\x1e\x67\x02\x5f\xf4\xdf\x12\xf2\xcc\x90\xc0\xc7\xc4\x18\xb0\xef\xe9\xc1\x97\xf7\x9c\xa0\x40\x01\xfd\xbe\xb0\xb5\x01\x53\x97\xdc\x10\x18\x5c\xf5\x57\x1f\x1b\xd7\x21\x40\xf3\x39\x84\x8f\x47\x23\xf4\x9c\x64\xe3\x31\x5d\xd4\xa7\xe4\xd3\xa2\x1a\xa9\xb8\x9e\xff\xfb\xd3\x26\xe2\x3c\x37\x4e\x7b\x2c\xb8\x30\xd0\x0d\x61\xb8\x89\x7d\x3c\xcd\x4a\xf8\x12\x95\xa0\xd6\x06\x6c\x96\x8f\x8c\x20\x32\x28\xe9\x72\xb4\x53\xee\xa2\x02\x94\x27\xbc\xce\xea\x86\x7b\x42\xe5\xab\x4f\x76\xef\xc7\x00\xc3\x35\xfd\x27\xe7\x0d\x1c\x25\xe6\x73\xa8\xa8\x56\x5d\xf5\xb4\x70\x15\x78\xc9\x72\x29\x24\xe9\x06\xb2\xa1\xa2\xa7\x80\xf1\x08\x28\xba\xa9\x24\x00\x12\x39\xa0\x7d\xd2\xdb\xce\xd7\x54\x33\xc3\x72\xe1\x36\x78\xe9\xc6\xa9\xc8\x8d\x78\xd5\x7d\x66\x45\x09\x47\x1b\x02\x67\x1b\xa3\x54\xbb\x9f\x1c\xa8\xde\x85\x7f\x78\x76\x4b\x51\x73\xcb\x5f\xcc\xb7\x53\xac\x3b\x30\x54\x31\x8e\x26\x15\x9b\x83\xd0\x7f\x5d\x9e\xbf\x4d\x79\x0d\xd1\xbd\x2e\x26\xab\x40\xb5\x44\x78\x0c\xeb\x76\xd1\xa2\x0c\xda\xc2\x2c\xdc\xa0\xa4\x0d\x28\xfb\x61\x91\x43\xec\x1f\x0e\x66\xef\x81\xb2\xd6\xde\xcb\x1a\xb5\xcd\x58\x96\xef\x72\xda\x30\x43\x52\x1b\x20\xda\x87\x3d\xb6\x1d\x71\xa0\xb6\xd7\x20\x57\x87\xbd\x05\xd5\xd5\xaa\xd5\x09\x61\x55\x6c\xc6\x22\x83\x83\x51\xc7\x73\x4c\x6e\x2a\x9c\x3e\xe1\x14\xd9\x41\xb0\x5a\xfb\x42\x02\x25\x8e\x98\xc0\xc5\xb8\x20\x1d\x79\x3c\xa1\xcf\xe0\x5c\xb6\x1d\x23\xb1\xd7\x6c\xee\xdf\x87\x67\xb6\x83\xfb\x77\xb2\x7d\xfa\xbd\x3c\xd3\x88\x6e\x5f\x57\x0d\x55\x60\x6a\xef\x5b\xf7\x6d\xac\x6e\x38\xee\xdd\x39\x2f\xb1\x6d\xb2\x89\xb8\x00\xc8\x10\x02\x33\x25\x8d\xac\x8e\xbd\xbb\xdf\x1f\xb7\xf9\xc1\x15\xea\x0d\xad\x60\x19\xc2\xce\x55\x88\xf0\x4c\xe1\xba\xec\xee\xc8\x5e\x1e\x07\x47\xde\xcd\xa7\x66\xb3\xf2\x57\xd0\xd5\x94\x78\xd1\x08\x84\x06\x84\x5d\x72\x2a\x8d\x0c\xdc\xb8\x63\x77\xfa\xd1\x9e\x7e\xe3\xf6\xd4\xda\x24\xdb\x9e\x8a\xdc\xeb\x48\x05\xee\xa9\x52\xab\x01\x5b\xde\xde\xdf\xe2\xe5\xde\x25\x95\xaf\xfd\x8e\x75\xc5\xf2\x95\x47\x34\x96\x9a\x53\x5c\x48\xc1\x68\xb8\x06\x6a\xda\xf1\x3c\x77\x27\x46\x82\x42\x4d\x40\xa0\x70\xbc\x11\x88\x4e\x25\x07\x6f\xd5\x2b\x33\x33\x70\xb6\xab\x1b\x4e\x83\x40\x93\x8b\xe5\xce\x4d\x7a\x0e\x97\x06\x2d\x89\x37\x57\x32\xac\x9d\x93\xe3\xae\xb6\x84\x84\xb3\x98\xaa\x06\xb9\x1a\x91\xf1\xab\xf6\x0a\xaa\xc3\xde\xd1\x2d\x07\xe8\x8e\x8e\x27\x0e\x0f\x85\xff\xfa\xed\xba\x75\x81\x77\xe7\x3b\x09\x7a\x80\xc9\x0b\x7f\x55\xaa\x82\x61\x96\x96\x2f\x0b\x6c\x5f\xb0\x3a\x38\x1e\xa6\x35\xfb\x0f\x83\xf4\x7a\x99\x41\xb7\xf3\x66\x23\x63\x78\x43\x12\x76\x93\x9c\x3a\xf6\x88\x1d\xae\x2b\xdc\x2d\xb7\xdd\x43\x5e\x6c\x6d\xf0\xfa\xc1\xbd\x50\xec\xbe\x9f\x6e\x37\xf6\xb5\x85\xed\xca\x69\xce\x5a\x52\x3f\x60\xcb\xe9\x8c\xd6\x34\x80\x29\x9b\x97\xc3\x90\xde\x94\xd2\x16\x37\x76\xd7\x65\xc4\xf6\x45\xf5\x8a\xd6\x59\x31\x6b\x1f\xcb\xd4\x7b\xd0\xd8\xb2\x7e\x67\x47\x0d\xf2\xd5\x3e\x1e\x68\x1a\xdd\x16\x20\x49\xc2\x1b\xb8\x17\x71\x04\x06\xbb\x8c\x38\x18\x45\x40\x04\x38\xa7\x4e\x42\x3b\xa3\xc0\x5e\xe4\x3d\xf2\xc8\x5e\xd1\x16\xb8\x11\xf9\xe1\xa3\x16\xf3\x9a\xd0\x19\xa4\xd7\x0e\x1f\x5a\xab\x84\x44\xdc\x8a\x50\xb5\x7a\x40\x5c\x84\xd3\x02\x3c\xee\x7b\xb7\x03\xdf\x16\xbf\x35\xb8\x4f\x3b\x2e\x7e\x1a\xf9\x47\x4d\x97\x4c\x7f\xba\x82\x78\xdd\xf4\x83\xa2\x85\x7b\xab\x57\xb5\x98\x52\x58\xee\x27\xc3\x30\x6d\x30\x4b\xe1\x32\xaa\x8b\x6b\x10\xd4\xc6\x3d\xcb\x7d\x6b\xc1\xc7\x4b\xfe\x0e\x45\xdf\xe2\xd4\x6e\xbe\x68\xb9\x29\x1f\xc7\x51\x03\xef\xb1\xdb\x12\x14\xe5\xb6\x33\x9e\xfb\x44\x07\xe5\xd2\x86\x6d\xf3\x75\xfd\xac\x23\x6f\xd7\x6d\xc7\x7c\x24\x93\x3b\x39\x14\x5e\xc8\x73\x59\x7c\x5d\xcc\x39\x7b\xc6\xeb\x88\xaa\x87\x01\xbe\xd8\x36\xec\x7b\x25\xf0\x9f\x6f\xc6\x4c\x7c\x76\x21\xc7\xbe\xd8\xb1\x03\x3d\xf6\xc0\x8f\x87\x46\x90\xed\x18\x12\x41\x11\x17\x20\xd4\xf7\x0d\x40\xe2\x53\x6e\x84\x95\xa3\xa7\x01\xc2\x54\x74\xce\x6e\xe9\x1d\x40\xe6\xbb\x45\x91\x90\x31\x7a\x78\x50\x25\xf5\xeb\x54\xd0\x3d\xf7\xea\xe9\x51\xb0\x57\x72\x06\xb9\x61\xaf\xf0\x47\xb5\x38\x66\x7e\xd7\xbb\x16\x05\x9d\xe8\x9e\xc5\x91\xa6\x4d\xfa\x62\x07\xa2\xbe\xb0\x88\x1a\xd7\x13\xc3\xa4\xbb\x25\xd3\x2f\x05\xc8\x0f\x0c\x06\x1a\x01\x18\xc0\xa4\x93\x55\x62\x88\x97\xdd\xd0\x7f\xe0\x75\x0e\x47\x75\xf2\x5e\x78\x4a\xf0\x4c\xe8\xde\xbc\x4f\x37\xe3\xfa\xda\x6a\x69\xff\x2a\x65\x84\x3b\x2e\x46\x4d\x93\xf3\xf1\xdf\xdf\xbd\x25\x98\x8f\xfd\x57\x5a\xa5\x7f\x17\x42\xab\x9c\x99\x98\x7d\xbe\x79\xf8\x65\x9f\x7d\xc7\x60\x2d\xa5\x3b\x07\x62\x71\x1d\x1b\x47\x63\xf6\x89\x1d\x8d\xa2\xe3\x32\x9f\x25\x78\xb5\xe1\x8a\x12\x4c\x9b\xec\xf3\xed\x97\xaf\x7b\x9c\x5d\x7e\xdc\xdb\xf4\xf3\x27\xbd\xb7\xe9\xff\x2f\x21\x53\x18\x64\x1d\x1d\x91\x8b\x8a\xe1\x96\x93\x29\x63\x37\x24\x07\xb8\x38\xc0\xdc\x14\xb3\xb2\xf7\xab\x05\x15\x89\x98\xb8\xb0\x9a\x60\x2b\xb7\xb3\xb4\x4c\x16\xa4\x20\x63\x02\x40\x13\x99\xb6\xdb\x7e\xee\x07\xe5\x72\x83\x23\xba\xc4\xb0\x6f\xa4\x46\x74\x5b\x94\xc9\x4c\xc8\x03\x0a\x39\x2a\x74\xed\x6d\x59\xd3\x9e\x3b\x6e\x33\x67\x4f\xd7\xf9\xaa\x1c\x4f\x2b\x56\x16\x3f\xd1\xb6\xff\xed\x1f\xe2\x30\xfa\x3f\x07\x00\x00\xff\xff\x97\xe7\xad\x50\xe5\x27\x00\x00")

func pr_review_js_bytes() ([]byte, error) {
	return bindata_read(
		_pr_review_js,
		"pr_review.js",
	)
}

func pr_review_js() (*asset, error) {
	bytes, err := pr_review_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "pr_review.js", size: 10213, mode: os.FileMode(420), modTime: time.Unix(1441702742, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pr_review.js": pr_review_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"pr_review.js": &_bintree_t{pr_review_js, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

