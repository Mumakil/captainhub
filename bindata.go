package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _pr_review_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\xdd\x73\xdb\xc6\x11\x7f\xd7\x5f\x71\x8a\x67\x02\xd0\xa1\x41\x5b\x8f\xe2\xa8\x4d\x27\xa9\x67\xfa\x61\x4b\x13\x25\xd3\x07\x86\xa5\x21\xe2\x28\x22\x02\x71\x2c\x0e\x10\xcb\x3a\xfc\xdf\xbb\x7b\xdf\x77\x38\x52\x94\xa5\xb6\x49\x63\x3c\x58\x24\x6e\x6f\xbf\x6e\xf7\xb7\x7b\x4b\x2f\xba\x7a\xde\x96\xac\x26\xb7\xb4\xfd\x8e\xde\x97\x74\x43\x1b\xfe\x96\x35\x6f\xcb\x8a\xa6\x0b\xf8\x87\x0f\xc9\xba\xab\xaa\xef\xe8\x3f\x3a\xca\xdb\x1f\x38\x6d\xe0\x45\x43\x17\xb4\x69\x68\x61\x76\x0c\xc8\xc7\x13\x42\xe6\xac\xe6\xac\xa2\x59\xc5\x6e\xd3\xe4\x6d\x59\x17\x65\x7d\x4b\x1a\x4d\x43\x6e\xba\x96\x94\xb7\x35\x6b\xf0\x75\x42\xbe\x0a\x19\x0f\xc6\x27\xc0\xe4\x3e\x6f\xcc\x1e\xd4\x82\x93\x0b\xf2\x71\x37\x56\x2b\xa8\x92\x91\xaa\x56\x60\x69\x96\xd1\x7c\xbe\x4c\xfb\x8a\x0d\x89\xb1\x50\x9b\xa3\x99\x4b\x9d\xcd\x5e\xb5\xea\x93\x6b\x1a\xe2\x0b\x9e\xe0\xb7\x29\x88\x8f\xbd\xfd\xf9\x67\x32\x99\x8e\xf7\x6f\xcb\xd6\x1d\x5f\xa6\x46\x0b\x49\xb9\x13\x7f\x77\x03\xd7\x9a\x83\x1a\xb9\x6e\x42\x47\xf4\x4d\x17\xd2\x32\xfc\xa7\xce\x57\x56\x2f\xb1\xbb\x5c\x10\xa3\x01\xcf\x80\xe2\xb6\x5d\x92\x8b\x8b\x0b\xf2\xda\x5a\x8c\x12\xd6\x79\xdb\xd2\xa6\x06\xfe\x33\xe0\x54\x17\x29\x1c\xf1\xa2\xbc\xcd\xd4\xfb\x9e\x76\xdf\xc0\xb2\xe5\xe0\xf1\xe0\xca\x5d\x48\xa2\xf7\x8f\x3d\xc2\x0e\x62\x00\x55\xf5\x28\x8d\x96\x4a\x73\x4d\xbc\xca\xdb\xf9\xd2\xea\xa5\x85\x64\x7c\x5d\x95\x6d\x9a\x0c\x93\x81\xab\x9b\x5a\x76\x55\x23\x64\x34\x72\x03\x56\x91\x0c\x89\xe7\xb6\xc1\xd8\xd9\xd0\xd0\xb6\x03\x67\x08\xd1\x18\x9a\x57\x79\xbb\x7c\x78\x9f\x3a\x54\x2d\x93\xe8\x03\x22\x0b\x26\xe3\x99\xcc\xf3\xba\x25\x37\x94\xb4\x4b\x4a\x38\x6c\x26\x39\x17\x9f\x31\x3f\x40\xa8\x48\x10\xc2\x69\x5d\xd0\xc6\x30\xc2\x13\x94\x3e\xf8\xf2\x4b\x92\x1a\xd7\x65\xe0\x0c\xfa\xcf\xcb\x45\x1a\xe6\x96\x38\xdd\x57\x6f\x30\x0a\x2c\xb1\x3a\xf8\xdf\x91\x37\x03\xdf\x35\xca\xd2\x59\xb6\x29\xdb\x25\xeb\x5a\x2b\xa0\x07\x07\x03\xcb\xe5\xb5\x63\xf4\x49\xcf\x78\xd4\xf8\x34\x72\x10\x52\x96\xde\xba\xd3\xe4\x6e\x70\x5b\x3d\xd4\x7e\x1b\x16\x7d\x7d\x8c\x40\x0c\x93\xbc\x6a\x68\x5e\x6c\xa5\xcf\x11\x77\x90\x59\x59\x03\x0f\x4e\x45\x6c\xa4\x8e\x1e\x9a\xa5\x79\x35\xcb\xee\xe8\x96\xa7\x1e\x1c\x0d\xd4\xaa\x6f\x58\x28\xc7\x71\x8a\x6f\xab\x35\x2a\xdc\x62\x3d\xe0\xf8\x41\xa4\x79\x5e\x17\x6c\x65\xc2\xe6\xc2\x72\x99\xbc\x83\x08\xcc\x16\x15\x63\x4d\x2a\x3e\x4a\xd2\x74\x40\x5e\x92\x30\xbd\x07\x3a\xf7\x3d\x6b\x26\x3e\xf3\xa9\xc3\x3d\xbe\xee\xa0\xdb\x41\x42\x89\x72\xfd\x9c\xd8\x0d\x21\xb4\x4b\x2e\xbd\xa7\xc2\xcc\x63\x34\x3e\x01\xd3\xdd\xb2\x84\x6f\xaf\x97\xf9\xbb\x7c\x2d\x11\x51\xfa\x53\x17\x03\xb9\x62\x6a\xc4\x31\xd0\x69\xb7\x85\x10\x29\x71\x27\xe3\xcb\x5c\xa3\xb1\xd1\xd1\x6e\xf2\x15\x74\xa2\xef\x72\x4d\x6b\x5a\xa4\xf4\x9e\xd6\xed\xb7\x79\x9b\x5b\x45\x83\x10\x05\x39\x86\x28\xc3\xb5\x99\x4a\xf2\x0c\xd3\x0c\xd1\xa8\xac\x4d\x2d\x5c\xa8\x1a\x08\x9e\xb8\xb2\x6c\x84\xab\xac\xa8\xac\xee\x56\x37\xaa\x98\xc4\x0a\xe8\x63\xaa\xfb\xc7\xdd\x60\x1c\x73\x70\xec\x28\x84\x96\x18\xff\xd1\x4c\x89\x24\x81\x80\x6e\xca\x79\x7e\x4b\x81\x65\xf2\x87\x0d\xe5\x0c\x00\x6f\xc3\x9a\xbb\x53\xf2\x9e\x6d\xc8\x4f\x1d\x62\x5d\x09\x78\x98\xcf\xef\x08\xc4\x14\xd9\xe4\xf0\x0d\xb1\xf2\xfb\x26\xbf\x2f\x01\x19\x19\x94\x14\xce\xc5\x1a\x03\x98\x6c\xc4\x2b\x29\x99\x6c\x59\xd7\x40\x1f\x52\xd0\xec\xc7\xfa\xc7\x3a\x91\x81\xaa\x05\x7e\x05\x12\x5f\xbc\x30\x00\xcc\x05\x81\xdb\x03\x78\xea\x1f\xd1\x3a\xf8\xac\xbf\xc6\x9e\x46\x93\xc0\xc7\xc4\x28\x70\x6c\x93\xe1\xf3\x7b\x25\x9a\x24\x51\x21\x7c\x66\x3b\x53\x5d\x5c\x72\x43\x60\x30\xd7\x5f\x7d\x61\x4c\x07\x07\xad\x56\xe0\x3e\x1e\xf5\xd0\x2b\x92\xcf\xe7\x74\xdd\x9e\x93\x0f\xeb\x66\xa6\xfc\x7a\xf9\x97\x0f\xfb\x88\x8b\xc2\x18\xed\x6d\xc1\x85\x89\xae\x1b\x53\x32\x51\xd0\x3d\xdd\xc7\x68\xbe\xcc\x6b\xf8\x12\xe5\xa5\xd6\x26\xac\x2a\x66\x0e\xcb\x9a\x6e\xec\xd7\x7d\x7c\xd7\xd0\x6f\x42\x48\xb5\x79\xdb\x71\x8f\xa9\x7c\xf5\xc1\x46\xc1\x1c\x00\xb9\xa5\x7f\xe2\xbc\x83\xde\x63\xb5\x82\xdc\xea\x65\xd8\x50\x33\x57\x47\x20\xb7\x5c\x0b\x4e\xba\x94\xec\xc9\xed\x25\xa0\x3d\x42\x8b\x2e\x2f\x09\xc0\x05\x76\xc8\xc9\xf0\xf0\xbe\xae\xa9\xcc\x96\x2b\xb7\x23\x90\x66\x9c\x8b\x28\x89\xe7\xdf\x4f\xac\xac\xa1\x17\x22\xd0\x0c\x19\xa1\xda\xfc\xe4\x44\x55\x31\xfc\xc3\xf3\x7b\x8a\x92\x7b\xf6\x62\xe4\x9d\x63\x06\x82\xa2\x6a\xe3\x6c\xd1\xb0\x15\x30\xfd\xf3\xf5\xe5\xfb\x8c\xb7\xd8\xcd\x97\x8b\x6d\x20\x5a\x62\x3d\xba\xf5\x30\x6b\x91\x10\x7d\x66\x16\x78\x90\xd3\x1e\xbc\xfd\x61\x5d\x80\xef\x9f\x0f\x70\x9f\x80\xb7\x56\xdf\xeb\x16\xa5\x55\x2c\x2f\x1e\x32\xda\x6c\x86\xa0\x36\x90\x74\xcc\xf6\xd8\x71\xc4\x21\xdb\xde\x9b\x5c\x19\xf6\xda\xd4\x36\xdb\x5e\x4d\x84\x55\x71\x18\xeb\x1c\x5a\xa4\xd4\x33\x4c\x1e\x2a\xb4\xab\xd0\x76\xa6\x08\x5b\x3b\x9f\x49\x20\xc4\x61\x13\x98\x18\x67\xa4\x3d\x8f\x2d\x7d\x05\x50\x71\x18\x2d\xb1\xea\xec\xaf\xe4\xa7\x17\xb6\x96\xfb\x97\xb8\x63\x2a\xbf\xec\x6e\x44\xdd\x6f\x9b\x8e\x2a\x58\xb5\x17\xb4\xa7\x96\x58\xd7\x1d\x4f\xae\xa1\xd7\x58\x40\xd9\x42\xdc\x18\xa4\x0b\x61\x33\x25\x9d\xcc\x8e\xa3\xeb\xe0\xff\x6f\x19\x84\x3b\xd7\x3b\xda\xc0\x32\xb8\x9d\x2b\x17\x61\x77\xe1\x9a\xec\x9e\xc8\x51\x16\x07\xcd\xef\xfe\xfe\xd9\xac\xfc\x1e\x64\x75\x35\x5e\x39\x02\xa6\x01\xe1\x80\x9c\x4b\x25\x03\x33\x1e\x59\x9d\x3e\x97\xa7\xff\x71\x79\xea\x1d\x92\x2d\x4f\x65\xe1\x55\xa4\x12\xcf\x54\x89\xd5\x80\x2d\xaf\xfb\xef\x71\x1a\xe0\x92\xca\xd7\x7e\xc5\xba\x61\xc5\xd6\x23\x9a\x4b\xc9\x19\x2e\x64\xa0\x34\x5c\x08\x35\xed\x7c\x55\xb8\x23\x26\x41\xa1\x46\x26\x90\x38\xde\xcc\x44\x87\x92\x83\xb7\xea\x95\x19\x32\x38\xc7\x35\x08\xc7\x47\x20\xc9\xc5\x72\xe7\x4e\xbd\x82\xeb\x83\xe6\xc4\xbb\x1b\xe9\xd6\xf4\xcd\xeb\x81\xd6\x84\x84\xc3\x9b\xa6\x8d\x8e\x27\x70\x41\xd9\x97\x35\x74\x5d\xe5\x73\x9a\x8e\xfe\xfe\xf5\x08\x22\x2a\xf1\x06\x30\xf6\x46\x6f\xb9\x82\x7e\x51\xa6\xa7\xa7\xc2\x47\x66\x73\xef\xba\xef\x4d\x39\xd1\x4a\x0c\x70\xf8\xab\xc2\x19\x94\xb7\xb4\x7c\x53\x62\x89\x83\xd5\xc9\xeb\x69\xd6\xb2\xbf\x32\x08\xc1\x6f\x72\xa8\x88\xde\xc0\x65\x0e\x6f\x48\xc2\xee\x92\x73\x47\x1f\x11\x05\x6d\x83\x27\xea\xb6\x04\x10\x3b\x07\x9b\x00\xfd\xe0\x79\xa9\xed\xbe\x9d\x6e\xc5\xf6\xa5\x85\x25\xcd\x29\xe0\x9a\xd3\x38\xd8\x56\xd0\x8a\xb6\x34\x80\x32\x1b\xbb\xd3\x90\xde\xa4\xdb\x01\x33\x1e\xce\xdd\x88\xee\xeb\xe6\x5b\xda\xe6\x65\xd5\x6f\xdd\xd4\x7b\x90\xd8\xd3\xfe\xc1\xaa\x1b\xc4\xb4\x7d\x3c\x60\x35\xb2\x2d\x88\x92\x84\x77\x70\x8b\xe2\x08\x1e\x76\x19\xb1\x32\x8a\x92\xa4\x60\x35\x45\x24\x74\x12\x2a\x54\x36\x5a\x01\xca\x62\x48\xbe\xb0\xb7\xba\x35\x9e\x46\x71\xfa\x45\x6f\xf3\x8e\xd0\x0a\x62\xec\x01\x43\x7a\xab\x84\x44\x6c\x8b\x50\xf5\x8a\x45\x9c\x85\x53\x2b\xbc\xdd\x4f\xae\x1b\xbe\x2e\x7e\x0d\x71\x9f\xbe\x5f\xfc\x58\xf2\x7b\x52\x97\x4c\x7f\xba\x01\x7f\xdd\x8d\x83\xcc\x85\xab\xae\x97\xba\x18\x57\x98\xf3\x6f\xa6\x61\xec\x60\xa8\xc2\xad\x55\x67\xd8\x24\x48\x90\x27\xe6\xfc\xc1\xac\x8f\xe7\xfd\x23\x32\xbf\xb7\x53\x9b\x79\xd6\x33\x53\x3e\x8e\xa1\xa6\x0e\xc4\xae\x55\x90\x99\x87\x9a\x41\xf7\x89\x8e\xe0\xa5\x0e\x87\x26\xf7\xfa\xd9\x45\xde\xee\xfa\x86\xf9\x70\x26\x4f\x72\x2a\xac\x90\x0d\x5c\x7c\x5d\x8c\x46\x87\xc6\xea\x88\xa8\xe7\x41\xbf\xd8\x01\x7e\x12\xfc\xfd\xe6\xb3\x7f\x2f\xa4\xca\x4b\x8c\x3c\x58\x3c\x29\x1c\x66\xd1\xa2\x8f\xc9\xfb\xf0\xc2\x45\x8c\x03\xe8\x31\x7a\x19\x00\x49\x43\x57\xec\x9e\x3e\x02\x4b\x7e\xb1\x60\x11\x6e\x8c\x36\x0a\x2a\x73\xfe\x3b\x89\xf2\xc4\xb3\x7a\x39\x0a\xce\x4a\xce\x24\xf7\x9c\x15\xfe\x2a\x17\x87\xc6\x5f\xf4\xa9\x45\x21\x3e\x7a\x66\x71\x80\xee\x93\x9e\x3d\x00\x9c\x67\x16\x38\xe3\x72\x62\x30\xfe\xb8\x60\xfa\x4f\xe1\xee\xf1\xe8\x21\x43\xa5\xc0\xdf\x29\xcc\xd2\x59\xcc\xb4\xdd\xf3\xc6\xac\x06\x15\x06\x00\xed\x04\xaa\x98\x13\xe6\x77\xf4\x8f\x78\x63\xc4\x69\xa0\xbc\x7a\x9e\x13\x54\xde\xbd\xdc\x9f\xef\xaf\x25\x3b\x2b\xa5\xff\x13\x98\x61\xee\x98\x18\x55\x4d\x8e\xe0\x7f\x7d\xd7\x9e\x60\x04\xf7\x37\xa9\x95\x6e\xe6\x51\x2b\x67\xec\x66\x9f\x4f\x9e\xaf\xd9\xe7\xd8\x49\x5b\x4f\xe8\x83\x33\xb7\xb8\x8c\xbd\xd3\x37\xfb\xc4\x9a\xaa\xe8\x44\xce\xdf\x12\xbc\xda\x93\x4b\xc1\x40\xcb\x3e\x9f\x7e\x77\x7b\xae\x7e\xe9\xf3\xb5\xef\x57\xdb\xf8\x3d\xed\xda\xa7\xff\x87\x86\x8c\x63\xe0\x35\x1a\x91\xab\x86\xe1\xb9\x93\x25\x63\x77\xa4\x00\xcc\x38\xc1\x00\x15\x33\xb9\xef\xb7\x6b\x2a\xa2\x31\x71\xb1\x35\xc1\x16\xc1\xce\xec\x72\x99\x95\x82\x8c\x09\x14\x4d\x64\xec\x1e\xfa\x0f\x06\x20\x5c\x1e\x70\x44\x96\x18\x2a\xce\xd4\x28\xf0\x80\x30\x19\x09\x45\x40\x21\x47\x92\xae\xbe\x3d\x6d\xfa\xf3\xcd\x43\xea\x1c\x69\x3a\xdf\xd6\xf3\x65\xc3\xea\xf2\x5f\xb4\x6f\x7f\xff\x07\x3f\xf4\xfe\xbf\x03\x00\x00\xff\xff\xcf\x76\x63\xec\xc3\x28\x00\x00")

func pr_review_js_bytes() ([]byte, error) {
	return bindata_read(
		_pr_review_js,
		"pr_review.js",
	)
}

func pr_review_js() (*asset, error) {
	bytes, err := pr_review_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "pr_review.js", size: 10435, mode: os.FileMode(420), modTime: time.Unix(1441707301, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pr_review.js": pr_review_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"pr_review.js": &_bintree_t{pr_review_js, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

