package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _pr_review_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x5b\x73\xdb\xba\x11\x7e\xf7\xaf\x80\x4f\x66\x0e\xa9\x1c\x85\xb6\xf3\x68\x8d\x7b\x99\x93\x66\xa6\x97\xc4\x9e\x38\x99\x3e\x28\x1a\x85\x16\x21\x8b\xb1\x44\xa8\x04\x69\x55\x4d\xf4\xdf\xbb\x8b\x3b\x40\xe8\xe2\xd8\x6d\xd3\x36\x7c\x88\x25\x62\xef\xd8\xfd\x16\x58\x65\xda\x56\x93\xa6\x64\x15\xb9\xa5\xcd\x3b\x7a\x5f\xd2\x15\xad\xf9\x6b\x56\xbf\x2e\xe7\x34\x9d\xc2\x3f\xbc\x4f\x96\xed\x7c\xfe\x8e\xfe\xad\xa5\xbc\xf9\xc0\x69\x0d\x2f\x6a\x3a\xa5\x75\x4d\x0b\xc3\xd1\x23\x5f\x8e\x08\x99\xb0\x8a\xb3\x39\xcd\xe6\xec\x36\x4d\x5e\x97\x55\x51\x56\xb7\xa4\xd6\x34\xe4\xa6\x6d\x48\x79\x5b\xb1\x1a\x5f\x27\xe4\x97\x50\x70\x6f\x70\x04\x42\xee\xf3\xda\xf0\xa0\x15\x9c\x5c\x90\x2f\x9b\x81\x5a\x41\x93\x8c\x56\xb5\x02\x4b\xe3\x8c\xe6\x93\x59\xda\x35\xac\x4f\x8c\x87\xda\x1d\x2d\x5c\xda\x6c\x78\xd5\xaa\x4f\xae\x69\x88\xaf\x78\x88\xdf\x46\xa0\x3e\xf6\xf6\xeb\x57\x32\x1c\x0d\xb6\xb3\x65\xcb\x96\xcf\x52\x63\x85\xa4\xdc\x88\xbf\x9b\x9e\xeb\xcd\x4e\x8b\xdc\x30\x61\x20\xba\xae\x0b\x6d\x19\xfe\x53\xe5\x0b\x6b\x97\xe0\x2e\xa7\xc4\x58\xc0\x33\xa0\xb8\x6d\x66\xe4\xe2\xe2\x82\x9c\x5a\x8f\x51\xc3\x32\x6f\x1a\x5a\x57\x20\x7f\x0c\x92\xaa\x22\x85\x2d\x9e\x96\xb7\x99\x7a\xdf\xb1\xee\x57\x58\xb6\x12\x3c\x19\x5c\x85\x0b\x49\x34\xff\xc0\x23\x6c\x21\x07\xd0\x54\x8f\xd2\x58\xa9\x2c\xd7\xc4\x8b\xbc\x99\xcc\xac\x5d\x5a\x49\xc6\x97\xf3\xb2\x49\x93\x7e\xd2\x73\x6d\x53\xcb\xae\x69\x84\x9c\x9c\xb8\x09\xab\x48\xfa\xc4\x0b\x5b\x6f\xe0\x30\xd4\xb4\x69\x21\x18\x42\x35\xa6\xe6\x55\xde\xcc\xf6\xf3\xa9\x4d\xd5\x3a\x89\xde\x20\x32\x65\x32\x9f\xc9\x24\xaf\x1a\x72\x43\x49\x33\xa3\x84\x03\x33\xc9\xb9\xf8\x8c\xf5\x01\x4a\x45\x81\x10\x4e\xab\x82\xd6\x46\x10\xee\xa0\x8c\xc1\xcf\x3f\x93\xd4\x84\x2e\x83\x60\xd0\xbf\x5f\x4e\xd3\xb0\xb6\xc4\xee\xbe\x38\xc3\x2c\xb0\xc4\x6a\xe3\x7f\x43\xce\x7a\x7e\x68\x94\xa7\xe3\x6c\x55\x36\x33\xd6\x36\x56\x41\x07\x0e\x7a\x56\xca\xa9\xe3\xf4\x51\xc7\x79\xb4\xf8\x38\xb2\x11\x52\x97\x66\xdd\x68\x72\x37\xb9\xad\x1d\x8a\xdf\xa6\x45\xd7\x1e\xa3\x10\xd3\x24\x9f\xd7\x34\x2f\xd6\x32\xe6\x88\x3b\x28\xac\xac\x40\x06\xa7\x22\x37\x52\xc7\x0e\x2d\xd2\xbc\x1a\x67\x77\x74\xcd\x53\x0f\x8e\x7a\x6a\xd5\x77\x2c\xd4\xe3\x04\xc5\xf7\xd5\x3a\x15\xb2\xd8\x08\x38\x71\x10\x65\x9e\x57\x05\x5b\x98\xb4\xb9\xb0\x52\x86\x6f\x20\x03\xb3\xe9\x9c\xb1\x3a\x15\x1f\x25\x69\xda\x23\xcf\x49\x58\xde\x3d\x5d\xfb\x9e\x37\x43\x5f\xf8\xc8\x91\x1e\x5f\x77\xd0\x6d\x27\xa1\x44\xb9\x6e\x4d\x6c\xfa\x90\xda\x25\x97\xd1\x53\x69\xe6\x09\x1a\x1c\x81\xeb\x6e\x5b\xc2\xb7\xd7\xb3\xfc\x4d\xbe\x94\x88\x28\xe3\xa9\x9b\x81\x5c\x31\x3d\xe2\x10\xe8\xb4\x6c\x21\x44\x4a\xdc\xc9\xf8\x2c\xd7\x68\x6c\x6c\xb4\x4c\xbe\x81\x4e\xf6\x5d\x2e\x69\x45\x8b\x94\xde\xd3\xaa\x79\x95\x37\xb9\x35\x34\x48\x51\xd0\x63\x88\x32\x5c\x1b\xab\x22\xcf\xb0\xcc\x10\x8d\xca\xca\xf4\xc2\xa9\xea\x81\x10\x89\x2b\x2b\x46\x84\xca\xaa\xca\xaa\x76\x71\xa3\x9a\x49\xac\x81\x3e\xa4\xbb\x7f\xd9\xf4\x06\xb1\x00\xc7\xb6\x42\x58\x89\xf9\x1f\xad\x94\x48\x11\x08\xe8\xa6\x9c\xe7\xb7\x14\x44\x26\xbf\x5f\x51\xce\x00\xf0\x56\xac\xbe\x3b\x26\x6f\xd9\x8a\x7c\x6e\x11\xeb\x4a\xc0\xc3\x7c\x72\x47\x20\xa7\xc8\x2a\x87\x6f\x88\x95\xef\xeb\xfc\xbe\x04\x64\x64\xd0\x52\x38\x17\x6b\x0c\x60\xb2\x16\xaf\xa4\x66\xb2\x66\x6d\x0d\xe7\x90\x82\x66\x1f\xab\x8f\x55\x22\x13\x55\x2b\xfc\x05\x34\x3e\x7b\x66\x00\x98\x0b\x02\xf7\x0c\xe0\x99\x7f\xc0\xd1\xc1\x17\xfd\x3b\x3c\xd3\x68\x12\xf8\x98\x18\x03\x0e\x3d\x64\xf8\xf2\x5e\x88\x43\x92\xe8\x10\xbe\xb0\x8d\xe9\x2e\x2e\xb9\x21\x30\x98\xeb\xaf\x3e\x33\xae\x43\x80\x16\x0b\x08\x1f\x8f\x46\xe8\x05\xc9\x27\x13\xba\x6c\xce\xc9\xa7\x65\x3d\x56\x71\xbd\xfc\xf3\xa7\x6d\xc4\x45\x61\x9c\xf6\x58\x70\x61\xa8\xfb\xc6\x68\x1b\xfb\x64\x96\x57\xf0\x25\x2a\x41\xad\x0d\xd9\xbc\x18\x1b\x41\x64\x58\xd1\xd5\x78\xaf\xdc\x25\x9c\x32\x21\x91\x9a\xbc\x69\xb9\x27\x54\xbe\xfa\x64\xf7\x7e\x02\x30\xdc\xd0\x3f\x72\xde\xc2\x89\x63\xb1\x80\x8a\xea\xd4\x55\x5f\x0b\x57\x81\x97\x2c\xd7\x42\x92\x6e\x20\x5b\x2a\x7a\x06\x18\x8f\x80\xa2\x9b\x4a\x02\x20\x81\xe7\xe2\xa4\xbf\x9b\xaf\xad\xe7\x86\xe5\xca\x3d\x07\x48\x37\xce\x45\x6e\xc4\xab\xee\x33\x2b\x2b\x38\x01\x11\x38\x02\x19\xa5\xda\xfd\xe4\x48\xf5\x2e\xfc\xc3\xf3\x7b\x8a\x9a\x3b\xfe\x62\xbe\x9d\x63\xdd\x81\xa1\x8a\x71\x3c\xad\xd9\x02\x84\xfe\xe9\xfa\xf2\x6d\xc6\x1b\x3c\xc3\x97\xd3\x75\xa0\x5a\x22\x3c\x86\x75\xb7\x68\x51\x06\x5d\x61\x16\x6e\x50\xd2\x16\x94\xfd\xb0\x2c\x20\xf6\x4f\x07\xb3\x8f\x40\x59\x6b\xef\x75\x83\xda\xe6\x2c\x2f\xf6\x39\x6d\x98\x21\xa9\x0d\x10\x1d\xc2\x1e\xdb\x8e\x38\x50\xdb\xdb\x92\xab\xc3\x5e\x96\x9a\x7a\xdd\xe9\x84\xb0\x2a\x36\x63\x99\xc3\xc1\x28\xf5\x1c\x93\x9b\x0a\x87\x54\x38\x6c\xa6\x08\x56\x1b\x5f\x48\xa0\xc4\x11\x13\xb8\x18\x17\xa4\x23\x8f\x07\xf9\x39\x9c\xcb\x76\x63\x24\xf6\x9a\xed\xfd\xfb\xf8\xc2\x76\x70\xff\xea\x76\x48\xbf\x97\x67\x1a\xd1\xed\x9b\xba\xa5\x0a\x4c\xed\xb5\xec\xb1\x8d\xd5\x0d\xc7\xa3\x3b\xe7\x35\xb6\x4d\x36\x15\xf7\x04\x19\x42\x60\xa6\xa4\x95\xd5\x71\x70\xf7\xfb\xdf\x6d\x7e\x70\xd3\x7a\x43\x6b\x58\x86\xb0\x73\x15\x22\x3c\x53\xb8\x2e\xbb\x3b\x72\x90\xc7\xc1\x91\x77\xfb\xa9\xd9\xac\xfc\x16\x74\xb5\x15\x5e\x34\x02\xa1\x01\x61\x8f\x9c\x4b\x23\x03\x37\x1e\xd8\x9d\x7e\xb4\xa7\xff\x70\x7b\xea\x6c\x92\x6d\x4f\x65\xe1\x75\xa4\x12\xf7\x54\xa9\xd5\x80\x2d\x2f\xf9\x6f\x71\x06\xe0\x92\xca\xd7\x7e\xc7\xba\x61\xc5\xda\x23\x9a\x48\xcd\x19\x2e\x64\x60\x34\x5c\x03\x35\xed\x64\x51\xb8\x83\x25\x41\xa1\x06\x25\x50\x38\xde\xa4\x44\xa7\x92\x83\xb7\xea\x95\x19\x2d\x38\xdb\xd5\x0b\x87\x46\xa0\xc9\xc5\x72\xe7\x26\xbd\x80\x4b\x83\x96\xc4\xdb\x1b\x19\xd6\xf4\xec\xb4\xa7\x2d\x21\xe1\xc8\xa6\x6e\x40\xae\x46\x64\xfc\xaa\xbd\x82\xea\xb0\x77\x74\xcb\x01\xba\xa3\x53\x8c\xe3\x63\xe1\xbf\x7e\xbb\xe9\x5c\xe0\xbd\xb9\x25\x7a\x80\xc9\x0b\x7f\x55\xaa\x82\x61\x96\x96\xaf\x4a\x6c\x5f\xb0\x3a\x3c\x1d\x65\x0d\xfb\x0b\x83\xf4\xfa\x35\x87\x6e\xe7\x8d\x50\x26\xf0\x86\x24\xec\x2e\x39\x77\xec\x11\x3b\xdc\xd4\xb8\x5b\x6e\xbb\x87\xbc\xd8\xd9\xe0\xf5\x83\x7b\xa1\xd8\x7d\x3f\xdd\x6e\xec\x6b\x0b\xdb\x95\xd3\x9c\xb5\xa4\x41\xc0\x56\xd0\x39\x6d\x68\x00\x53\x36\x2f\x47\x21\xbd\x29\xa5\x1d\x6e\xec\xaf\xcb\x88\xed\xcb\xfa\x15\x6d\xf2\x72\xde\x3d\x96\xa9\xf7\xa0\xb1\x63\xfd\xde\x8e\x1a\xe4\xab\x7d\x3c\xd0\x34\xba\x2d\x40\x92\x84\xb7\x70\x2f\xe2\x08\x0c\x76\x19\x71\x30\x8a\x80\x08\x70\x4e\x9d\x84\x76\x46\x81\xbd\x2c\xfa\xe4\x27\x7b\x45\x5b\xe2\x46\x14\xc7\x3f\x75\x98\x37\x84\xce\x21\xbd\xf6\xf8\xd0\x59\x25\x24\xe2\x56\x84\xaa\xd3\x03\xe2\x22\x9c\x16\xe0\x71\x3f\xba\x1d\xf8\xb6\xf8\xad\xc1\x7d\xba\x71\xf1\xd3\xc8\x3f\x6a\xba\x64\xfa\xd3\x0d\xc4\xeb\x6e\x10\x14\x2d\xdc\x5b\xbd\xaa\xc5\x94\xc2\x72\x3f\x1b\x85\x69\x83\x59\x0a\x97\x51\x5d\x5c\xc3\xa0\x36\x1e\x59\xee\x3b\x0b\x3e\x5e\xf2\x0f\x28\xfa\x0e\xa7\x76\xf3\x65\xc7\x4d\xf9\x38\x8e\x1a\x78\x8f\xdd\x96\xa0\x28\x77\x9d\xf1\xdc\x27\x3a\x4f\x97\x36\xec\x1a\xc3\xeb\x67\x13\x79\xbb\xe9\x3a\xe6\x23\x99\xdc\xc9\x91\xf0\x42\x9e\xcb\xe2\xeb\x62\xce\xd9\x37\x5e\x47\x54\x3d\x0d\xf0\xc5\xb6\xe1\xd0\x2b\x81\xff\x7c\x33\x66\xe2\xb3\x0f\x39\x0e\xc5\x8e\x3d\xe8\x71\x00\x7e\x3c\x35\x82\xec\xc6\x90\x08\x8a\xb8\x00\xa1\xbe\x6f\x01\x12\x9f\x72\x2b\xac\x9c\x3c\x0f\x10\xa6\xa6\x0b\x76\x4f\x1f\x00\x32\xdf\x2d\x8a\x84\x8c\xd1\xc3\x83\x2a\xa9\x7f\x4f\x05\x3d\x72\xaf\x9e\x9f\x04\x7b\x25\x67\x90\x5b\xf6\x0a\x7f\x7b\x8b\x63\xe6\x77\xbd\x6b\x51\xd0\x89\xee\x59\x1c\x69\xba\xa4\x2f\xf7\x20\xea\x4b\x8b\xa8\x71\x3d\x31\x4c\x7a\x58\x32\xfd\xab\x00\xf9\x89\xc1\x40\x23\x00\x03\x98\x74\xb2\x4a\x0c\xf1\xf2\x3b\xfa\x07\xbc\xce\xe1\xa8\x4e\xde\x0b\xcf\x09\x9e\x09\xdd\x9b\xf7\xf9\x76\x5c\xdf\x58\x2d\xdd\x5f\xa5\x8c\x70\xc7\xc5\xa8\x69\x72\x3e\xfe\xdf\x77\x6f\x09\xe6\x63\x7f\x95\x56\xe9\xdf\x85\xd0\x2a\x67\x26\x66\x9f\x6f\x1e\x7e\xd9\xe7\xd0\x31\x58\x47\xe9\xde\x81\x58\x5c\xc7\xd6\xd1\x98\x7d\x62\x47\xa3\xe8\xb8\xcc\x67\x09\x5e\x6d\xb9\xa2\x04\xd3\x26\xfb\x7c\xfb\xe5\xeb\x11\x67\x97\x1f\xf7\x36\xfd\xfc\x9f\xde\xdb\xf4\xff\x97\x90\x29\x0c\xb2\x4e\x4e\xc8\x55\xcd\x70\xcb\xc9\x8c\xb1\x3b\x52\x00\x5c\x1c\x61\x6e\x8a\x59\xd9\xfb\xf5\x92\x8a\x44\x4c\x5c\x58\x4d\xb0\x95\xdb\x59\x5a\x2e\x0b\x52\x90\x31\x01\xa0\x89\x4c\xdb\x5d\x3f\xf7\x83\x72\xb9\xc1\x11\x5d\x62\xd8\x37\x56\x23\xba\x1d\xca\x64\x26\x14\x01\x85\x1c\x15\xba\xf6\x76\xac\xe9\xce\x1d\x77\x99\x73\xa0\xeb\x7c\x5d\x4d\x66\x35\xab\xca\x7f\xd0\xae\xff\xdd\x1f\xe2\x30\xfa\xff\x0c\x00\x00\xff\xff\x27\xa2\x47\x13\x51\x28\x00\x00")

func pr_review_js_bytes() ([]byte, error) {
	return bindata_read(
		_pr_review_js,
		"pr_review.js",
	)
}

func pr_review_js() (*asset, error) {
	bytes, err := pr_review_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "pr_review.js", size: 10321, mode: os.FileMode(420), modTime: time.Unix(1441705495, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pr_review.js": pr_review_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"pr_review.js": &_bintree_t{pr_review_js, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

